{"version":3,"sources":["components/Navbar/index.js","constants/routes.js","utils/data.js","components/LineChart/index.js","components/ModelsChart/index.js","containers/ChartContainer/index.js","containers/newDeathsContainer/index.js","pages/AboutPage/index.js","pages/LandingPage/index.js","components/Leaderboard/index.js","components/MarketChart/index.js","components/UserPredictionChart/index.js","containers/UserPredictionChartContainer/index.js","pages/ProfilePage/index.js","components/InteractiveChart/index.js","containers/InteractiveChartContainer/index.js","components/Mapportal/index.js","components/LogIn/index.js","components/SignUp/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","isLoggedIn","fetch","then","response","json","data","setState","loggedinstate","state","logoutbutton","loginbutton","signupbutton","bind","console","log","this","method","headers","className","href","id","data-toggle","onClick","saveLogout","type","data-target","aria-controls","aria-expanded","aria-label","renderDropdown","React","Component","cleanConfirmedData","dates","result","i","length","organizeData","orgs","Object","keys","results","forecast","target_end_date","values","value","forEach","key","push","addDays","date","days","Date","setDate","getDate","clamp","a","b","c","Math","max","min","reformatData","map","d3","findYatX","x","path","startX","getXY","len","point","getPointAtLength","y","start","end","getTotalLength","mid","currPoint","currPointX","getAllDataPoints","pathNode","xAxis","yAxis","startDate","endDate","invert","offset","LineChart","userPrediction","chartRef","createRef","renderChart","model","body","JSON","stringify","org","confirmed","confirmedResult","savePrediction","myChart","Chart","current","labels","datasets","label","backgroundColor","borderWidth","dragData","radius","pointStyle","rotation","pointBorderColor","options","scales","yAxes","ticks","beginAtZero","title","display","text","fontSize","dragDataRound","dragOptions","showTooltip","onDragStart","e","onDrag","datasetIndex","index","target","style","cursor","onDragEnd","hover","onHover","getElementAtEvent","responsive","plugins","zoom","pan","enabled","mode","position","width","margin","ref","ModelsChart","aggregate","dateArray","toISOString","slice","getDates","colors","modelDates","j","includes","newDict","sort","k","borderColor","fill","pointBackgroundColor","pointRadius","pointBorderWidth","pointHoverRadius","pointHoverBorderColor","borderDash","aggregateResult","spanGaps","LineCharts","dataSet","ChartContainer","res","newDeathsContainer","pstyle","textAlign","marginLeft","h1style","AboutPage","Leaderboard","users","user","renderTable","MarketChart","colorArr","UserPredictionChart","category","userStatus","innerHTML","predictionData","compiledData","confirmedData","p","d","substring","defined","sortedDict","dateObj","sortDictByDate","sortedDates","sortStringDates","mostRecentPred","confirmedStartDate","predEndDate","height","svg","append","attr","domain","range","call","legendString","color","legend","selectAll","enter","today","todayMarker","mainArea","lineGenerator","curve","predLineGenerator","line","predLine","tooltip","datum","filter","mousePerLine","on","todayDate","select","newDate","pred","mouse","xCoord","f","left","element","floor","ceil","round","UserPredictionChartContainer","ProfilePage","renderUser","InteractiveChart","loginStatus","renderChartUnregistered","predStartDate","defaultData","currDate","modal","document","createElement","modalContent","innerText","signinBtn","onclick","window","location","signupBtn","appendChild","createDefaultPrediction","appendModal","w","h","forecastData","aggregateData","confirmedMax","forecastMax","currMax","yAxisMax","nice","concat","confirmedLine","confirmedAreaEndX","confirmedAreaEndY","predictionArea","idxOfStartDate","splice","getElementsByClassName","yourLine","confirmedLastVal","filteredData","forecastPaths","querySelectorAll","aggregatePath","querySelector","o","lastDate","name","node","getBoundingClientRect","drawingInstruction","selectCircle","drag","pos","getElementById","event","tooltipArea","chart","yCoord","xLowerBoundary","context","contextX","brush","extent","selection","newX","gb","move","defaultSelection","deleteButton","deletePrediction","filtered","reformatPredData","confirmedAreaWidth","clickAreaWidth","lastPredDate","getDataPointsFromPath","InteractiveChartContainer","mapStyle","feature","weight","opacity","dashArray","fillOpacity","fillColor","Mapportal","onEachFeature","layer","bindTooltip","properties","toString","noHide","openTooltip","mouseover","highlightFeature","mouseout","resetHighlight","alert","setStyle","L","Browser","ie","opera","edge","bringToFront","geojson","resetStyle","countries","center","layers","tileLayer","maxZoom","attribution","geoJson","statesData","addTo","countriesData","overlay","control","layerGroup","Login","wasSucess","Promise","resolve","reject","updateLoginState","setTimeout","username","password","preventDefault","saveLogin","onSubmit","handleSubmit","onChange","handleChange","required","SignUp","nam","email","App","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6e78dd4e.chunk.js","sourcesContent":["import React from 'react';\nimport * as ROUTES from '../../constants/routes';\n\nclass Navbar extends React.Component {\n  constructor(props){\n\t\tsuper(props)\n\t\tthis.state = { loggedinstate: '', logoutbutton: null, loginbutton: null, signupbutton: null}\n\t\tthis.isLoggedIn = this.isLoggedIn.bind(this)\n\t}\n\t/*\n\tisLoggedIn() {\n\t\tfetch('/user-status').then(res => res.json()).then(data => {\n\t\t\tthis.setState({ users: data });\n\t\t});\n\t}*/\n\n\tcomponentDidMount(){\n\t\tconsole.log(\"nav bar loading\");\n\t\tthis.isLoggedIn();\n\t\t\n\t}\n\n\tasync saveLogout() {\n\t\tfetch('/logout/',{\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t}\n\t\t});\n}\n\n\tisLoggedIn = () => {\n\t\tfetch('/login-status/')\n\t\t.then((response) => response.json())\n\t\t.then((data) => this.setState({loggedinstate: data}));\n\t\t\n}\n\nrenderDropdown(){\n\tif(this.state.loggedinstate['logged in']){\n\t\t\n\t\treturn(\n\t\t\t<div className='navbar-nav ml-auto'>\n\n<ul className=\"navbar-nav ml-auto\">\n\t\t\t\t <li className=\"nav-item dropdown ml-auto\">\n\t\t\t\t<a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbardrop\" data-toggle=\"dropdown\">\n\t\t\t\t\tHello {this.state.loggedinstate['name']}!</a>\n\t\t\t<div className=\"dropdown-menu\">\n\t\t\t\t<a className=\"dropdown-item\" href={ROUTES.PROFILE}>Profile</a>\n\t\t\t\t<a className=\"dropdown-item\" onClick={() => this.saveLogout()} href={ROUTES.LANDING}>Sign Out</a>\n\t\t\t</div>\n\t\t</li>\n\t\t\t\t </ul>\n\t\t\t</div>\n\t\t);\n\n\t}\n\telse{\n\t\treturn(\n\t\t\t<div className='navbar-nav ml-auto'>\n\t\t\t\t<ul className=\"navbar-nav ml-auto\">\n\t\t\t\t <li className=\"nav-item dropdown\">\n\t\t\t\t<a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbardrop\" data-toggle=\"dropdown\">\n\t\t\t\t\tWelcome</a>\n\t\t\t<div className=\"dropdown-menu\">\n\t\t\t\t<a className=\"dropdown-item\" href={ROUTES.SIGN_UP}>Sign Up</a>\n\t\t\t\t<a className=\"dropdown-item\" href={ROUTES.SIGN_IN}>Sign In</a>\n\t\t\t</div>\n\t\t</li>\n\t\t\t\t </ul>\n\t\t\t</div>\n\t\t);\n\n\t}\n}\n\n\n  render() {\n    return (\n     <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n       <a className=\"navbar-brand\" href=\"#\">Aggregate COVID-19 Forecasting</a>\n       <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n         <span className=\"navbar-toggler-icon\"></span>\n       </button>\n       <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n       <div className=\"navbar-nav\">\n         <a className=\"nav-item nav-link active\" href={ROUTES.LANDING}>Home <span className=\"sr-only\">(current)</span></a>\n         <a className=\"nav-item nav-link\" href={ROUTES.ABOUT}>About</a>\n         <a className=\"nav-item nav-link\" href={ROUTES.LEADERBOARD}>Top Forecasts</a>\n        \n       </div>\n       {this.renderDropdown()}\n       </div>\n     </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","export const LANDING = '/';\nexport const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const ABOUT = '/about';\nexport const PROFILE = '/profile';\nexport const MAP_PORTAL = '/map-portal';\nexport const MARKET = '/market';\nexport const LEADERBOARD = '/leaderboard';\nexport const US_NATIONAL_CUM = '/us-national-cumulative';\nexport const US_NATIONAL_INC = '/us-national-incident';\nexport const US_STATE = '/us-state';\n","import * as d3 from 'd3'\n\nexport const cleanConfirmedData = (data, dates) => {\n  var result = {};\n  for (var i = 0; i < dates.length; i++) {\n    result[dates[i]] = data[dates[i]];\n  }\n  return result;\n};\n\nexport const organizeData = (data) => {\n  var orgs = Object.keys(data);\n  var results = [];\n  for (var i = 0; i < orgs.length; i++) {\n    var forecast = data[orgs[i]];\n    var dates = forecast.target_end_date;\n    var values = forecast.value;\n\n    var result = {};\n    dates.forEach((key, i) => result[key] = values[i]);\n    results.push(result);\n  }\n\n  return [results, orgs];\n}\n\n\nfunction addDays(date, days) {\n  var result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n\nexport const getDates = () => {\n  var current = new Date(2020, 2, 28);\n  var end = new Date();\n  var dateArray = [];\n  while (current <= end) {\n      dateArray.push(new Date(current).toISOString().slice(0,10));\n      current = addDays(current, 1);\n  }\n  return dateArray;\n}\n\nexport const clamp = (a, b, c) => { \n  return Math.max(a, Math.min(b, c)) \n}\n\nexport const formatValue = (value) => {\n  return value.toLocaleString(\"en\", {\n    style: \"currency\",\n    currency: \"USD\"\n  });\n}\nexport const callout = (g, value) => {\n  if (!value) return g.style(\"display\", \"none\");\n\n  g\n      .style(\"display\", null)\n      .style(\"pointer-events\", \"none\")\n      .style(\"font\", \"10px sans-serif\");\n\n  const path = g.selectAll(\"path\")\n    .data([null])\n    .join(\"path\")\n      .attr(\"fill\", \"white\")\n      .attr(\"stroke\", \"black\");\n\n  const text = g.selectAll(\"text\")\n    .data([null])\n    .join(\"text\")\n    .call(text => text\n      .selectAll(\"tspan\")\n      .data((value + \"\").split(/\\n/))\n      .join(\"tspan\")\n        .attr(\"x\", 0)\n        .attr(\"y\", (d, i) => `${i * 1.1}em`)\n        .style(\"font-weight\", (_, i) => i ? null : \"bold\")\n        .text(d => d));\n\n  const {x, y, width: w, height: h} = text.node().getBBox();\n\n  text.attr(\"transform\", `translate(${-w / 2},${15 - y})`);\n  path.attr(\"d\", `M${-w / 2 - 10},5H-5l5,-5l5,5H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n}\n\nexport const sortDictByDate = (data) => {\n  var sortedDict = {};\n  const sortedDates = Object.keys(data).sort((a, b) => new Date(a) - new Date(b));\n  sortedDates.map(d => {\n    const dateObj = d3.timeParse(\"%Y-%m-%d\")(d);\n    sortedDict[dateObj] = data[d]\n  })\n  return sortedDict;\n}\n//pass in list of string dates, return string dates y-m-d\nexport const sortStringDates = (data) => {\n  var sortedDates = data.sort((a, b) => new Date(a) - new Date(b));\n  sortedDates = sortedDates.map(d => d3.timeParse(\"%Y-%m-%d\")(d));\n  return sortedDates;\n}\n\nexport const getMostRecentPrediction = (data) => {\n  const sortedDates = Object.keys(data).sort((a, b) => new Date(b) - new Date(a));\n  const mostRecentDate = sortedDates[0];\n  return data[mostRecentDate]\n}\n\nexport const reformatData = (data) => {\n  return Object.keys(data).map(key => ({\n    date: d3.timeParse(\"%Y-%m-%d\")(key),\n    value: data[key]\n}));\n}\n\nexport const reformatPredData = (data) => {\n  return data.map(d => ({\n      date: d3.timeParse(\"%Y-%m-%d\")((d.date).substring(0,10)),\n      value: d.value,\n      defined: d.defined\n      })\n  );\n}\n//returns y coordinate at given x \n/*export const findYatX = (x, path) => {\n  if (x > path.getTotalLength()) {return null}\n  const getXY = (len) => {\n      var point = path.getPointAtLength(len);\n      return [point.x, point.y];\n  }\n  var start = 0;\n  var end = path.getTotalLength();\n  var result = 0;\n  while (start < end) { \n    var mid = (start + end) / 2;\n    var currPoint = getXY(mid);\n    var currPointX = currPoint[0];\n    if (x < currPointX) {\n      end = mid - 0.01; //does it have to be 0.01?\n    }\n    else if (x > currPointX) {\n      start = mid + 0.01;\n    }\n    else {\n      console.log(currPointX);\n      result = currPoint[1];\n      break;\n    }\n  }\n  if (result == 0) {\n    console.log(start, end);\n    return getXY(start)[1];\n  }\n  return result;\n}*/\n\nexport const findYatX = (x, path, startX) => {\n  const getXY = (len) => {\n      var point = path.getPointAtLength(len);\n      return [point.x, point.y, len];\n  }\n  var start = startX;\n  var end = path.getTotalLength();\n  var result = 0;\n  while (start < end) { \n    var mid = (start + end) / 2;\n    var currPoint = getXY(mid);\n    var currPointX = currPoint[0];\n    if (x < currPointX) {\n      end = mid - 0.001; //does it have to be 0.01?\n    }\n    else if (x > currPointX) {\n      start = mid + 0.001;\n    }\n    else {\n      result = currPoint;\n      break;\n    }\n  }\n  if (result == 0) {\n    result = getXY(start);\n  }\n  return result;\n}\n\n//for confirmedData, forecastData, aggregateData\nexport const getAllDataPoints = (pathNode, xAxis, yAxis, startDate, endDate) => {\n  var data = [];\n  var date = startDate;\n  var startX = 0;\n  while (+date <= +endDate) {\n    var x = xAxis(date);\n    var point = findYatX(x, pathNode, startX);\n    data.push({\n      date: date,\n      value: yAxis.invert(point[1])\n    });\n    startX = point[2];\n    date = d3.timeDay.offset(date, 1);\n  }\n  return data;\n}\nexport const getDataPointsFromPath = (predictionData, pathNode, xAxis, yAxis, lastPredDate) => {\n  var date = predictionData[0].date;\n  var startX = 0;\n  for (var i = 0; i < predictionData.length; i++) {\n    if (+predictionData[i].date > +lastPredDate) {\n      break;\n    }\n    if (predictionData[i].defined == 0) {\n      date = predictionData[i].date;\n      var point = findYatX(xAxis(date), pathNode, startX);\n      predictionData[i].defined = true;\n      predictionData[i].value = yAxis.invert(point[1]);\n      startX = point[2];\n    }\n  }\n  return predictionData;\n}","import React from 'react';\nimport Chart from 'chart.js';\nimport 'chartjs-plugin-dragdata';\nimport 'chartjs-plugin-zoom';\nimport PropTypes from 'prop-types';\nimport { cleanConfirmedData } from '../../utils/data';\n\nclass LineChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { userPrediction: null };\n    this.chartRef = React.createRef(); // create reference for chart in class\n  }\n\n  componentDidMount() {\n    this.renderChart();\n  }\n\n  savePrediction(model, data) {\n    fetch('/update/',{\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\"model\": model, \"data\": data}),\n    });\n  }\n\n  renderChart() {\n    const { data, org, userPrediction, confirmed } = this.props;\n    const model = org;\n    const confirmedResult = cleanConfirmedData(confirmed, Object.keys(data));\n    const savePrediction = this.savePrediction;\n    \n    this.myChart = new Chart(this.chartRef.current, {\n      type: 'line',\n      data: {\n        labels: Object.keys(data),\n        datasets: [ // Settings for user prediction graph\n          {\n              label: \"User's Prediciton\",\n              data: userPrediction.value,\n              backgroundColor: [\n                'rgba(64, 64, 64, 0.2)',\n              ],\n              borderWidth: 1,\n              dragData: true, // User's predictions are draggable\n              radius: 2.5\n          },\n          // Settings for graph of forecasted deaths\n          {\n              label: 'Estimated Deaths',\n              data: Object.values(data),\n              backgroundColor: [\n                  'rgba(255, 99, 130, 0.2)',\n              ],\n              borderWidth: 0.2,\n              dragData: false,\n              pointStyle: 'cross',\n              rotation: 45,\n              pointBorderColor: 'black'\n          }, \n          // Settings for graph of confirmed deaths\n          {\n              label: 'Confirmed Deaths',\n              data: Object.values(confirmedResult),\n              backgroundColor: [\n                'rgba(130, 99, 255, 0.2)',\n              ],\n              borderWidth: 0.2,\n              dragData: false,\n              pointStyle: 'cross',\n              rotation: 45,\n              pointBorderColor: 'black'\n          }\n        ]\n      },\n      options: {\n          scales: {\n              yAxes: [{\n                  ticks: {\n                      beginAtZero: true\n                  }\n              }]\n          },\n          title: {\n            display: true,\n            text: this.props.org,\n            fontSize: 30\n          },\n          dragData: true,\n          dragDataRound: 1,\n          dragOptions: {\n            showTooltip: true\n          },\n          onDragStart: function(e) {\n            // console.log(e)\n          },\n          onDrag: function(e, datasetIndex, index, value) {\n            e.target.style.cursor = 'grabbing'\n          },\n          onDragEnd: function(e, datasetIndex, index, value) {\n            e.target.style.cursor = 'default';\n            savePrediction(model, userPrediction[model]);\n          },\n          hover: {\n            onHover: function(e) {\n              const point = this.getElementAtEvent(e)\n              if (point.length) e.target.style.cursor = 'grab'\n              else e.target.style.cursor = 'default'\n            }\n          },\n          responsive: true,\n          plugins: {\n            zoom: {\n              // Pan options\n              pan: {\n                enabled: true,\n                // Panning directions\n                mode: 'x',\n              },\n          \n              // Zoom options\n              zoom: {\n                enabled: true,\n                // Zooming directions,\n                mode: 'x',\n              }\n            }\n          }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"chart-container\" style={{position: \"relative\", width: \"80vw\", margin: \"0 10%\"}}>\n        <canvas ref={this.chartRef} />\n        <br></br>\n      </div>\n    );\n  }\n}\n\nLineChart.propTypes = {\n  data: PropTypes.object.isRequired,\n  org: PropTypes.string.isRequired,\n  userPrediction: PropTypes.object.isRequired,\n  confirmed: PropTypes.object.isRequired,\n};\n\nexport default LineChart;\n","import React from 'react';\nimport Chart from 'chart.js';\nimport 'chartjs-plugin-dragdata';\nimport 'chartjs-plugin-zoom';\nimport { getDates, cleanConfirmedData } from '../../utils/data'\n\n\nclass ModelsChart extends React.Component {\n    constructor(props) {\n      super(props);\n      this.chartRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.renderChart();\n    }\n  \n    renderChart() {\n      const { data, orgs, confirmed, aggregate } = this.props;\n\n      var options = {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }],\n        },\n        title: {\n          display: true,\n          text: 'All Model Forecasts',\n          fontSize: 30\n        },\n        spanGaps: true\n      };\n\n      const dates = getDates();  \n      var datasets = [];\n      // Set colors for each organization\n      var colors = {\n        'Columbia': 'rgb(172, 204, 230)',\n        'Georgia Tech': 'rgb(179, 163, 105)',\n        'UCLA': 'rgb(39, 116, 174)',\n        'IHME': 'rgb(87, 175, 85)',\n        'Youyang Gu': 'rgb(196, 129, 14)'\n      }\n\n      for (var i = 0; i < data.length; i++) {\n        const modelDates = Object.keys(data[i]);\n        for (var j = 0; j < dates.length; j++) {\n            if (modelDates.includes(dates[j]) == false) {\n                data[i][dates[j]] = null;\n            }\n        }\n\n        // Sort key-value pairs by key (dates)\n        var keys = Object.keys(data[i]);\n        var newDict = {}; \n        keys.sort(); \n        for (var k = 0; k < keys.length; k++) {\n            var key = keys[k];\n            var value = data[i][key];\n            newDict[key] = value;\n        } \n        data[i] = newDict;\n\n        // Add each models data to datasets\n        datasets.push({\n          label: orgs[i],\n          data: Object.values(data[i]),\n          borderColor: colors[orgs[i]],\n          borderWidth: 3,\n          fill: false,\n          pointBackgroundColor: colors[orgs[i]],\n          pointRadius: 4,\n          pointBorderWidth: 1,\n          pointHoverRadius: 7,\n          pointHoverBorderColor: 'black'\n        })\n      }\n\n      // Add confirmed data to chart\n      const confirmedResult = cleanConfirmedData(confirmed, dates);\n      datasets.push({\n        label: 'Confirmed Deaths',\n        data: Object.values(confirmedResult),\n        borderColor: 'black',\n        fill: false,\n        pointBackgroundColor: 'clear',\n        pointBorderColor: 'clear',\n        pointStyle: 'dash',\n        pointHoverRadius: 7,\n        pointHoverBorderColor: 'black',\n        borderDash: [15, 10]\n      })\n\n      // Add aggregate data to chart\n      const aggregateResult = cleanConfirmedData(aggregate, dates);\n      datasets.push({\n        label: 'Aggregate Forecast (average)',\n        data: Object.values(aggregateResult),\n        borderColor: 'red',\n        borderWidth: 3,\n        fill: false,\n        pointBackgroundColor: colors[orgs[i]],\n        pointRadius: 4,\n        pointBorderWidth: 1,\n        pointHoverRadius: 7,\n        pointHoverBorderColor: 'black'\n      })\n  \n      // Create chart with all models\n      this.myChart = new Chart(this.chartRef.current, {\n        type: 'line',\n        data: {\n          labels: dates,\n          datasets: datasets\n        },\n        options: options\n      });\n  \n    }\n  \n    render() {\n        const { data, orgs } = this.props;\n        if (!data || !orgs) return 'Loading...';\n\n        return (\n            <div className=\"chart-container\" style={{position: \"relative\", width: \"80vw\", margin: \"0 10%\"}}>\n                <canvas ref={this.chartRef} />\n            </div>\n        );\n    }\n  }\n\n  export default ModelsChart;","import React from 'react';\nimport LineChart from '../../components/LineChart';\nimport ModelsChart from '../../components/ModelsChart';\nimport { cleanConfirmedData, organizeData } from '../../utils/data';\n\nfunction LineCharts({ dataSet, orgs, userPrediction, confirmed }) {\n  return dataSet.map((data, index) => {\n    return (\n      <LineChart data={data} org={orgs[index]} userPrediction={userPrediction} confirmed={confirmed} />\n     );\n  })\n}\n\nclass ChartContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n      orgs: null,\n      confirmed: null,\n      userPrediction: null,\n      aggregate: null\n    };\n  }\n\n  componentDidMount() {\n    fetch('/us-cum-deaths-forecasts').then(res => res.json()).then(data => {\n      const [results, orgs] = organizeData(data);\n      this.setState({ data: results, orgs });\n    });\n    fetch('/user-prediction').then(res => res.json()).then(data => {\n      this.setState({ userPrediction: data });\n    });\n    fetch('/us-cum-deaths-confirmed').then(res => res.json()).then(data => {\n      this.setState({ confirmed: data });\n    });\n    fetch('/us-agg-cum-deaths').then(res => res.json()).then(data => {\n      this.setState({ aggregate: data });\n    });\n  }\n\n  render() {\n    //const { data, orgs, userPrediction, confirmed } = this.state;\n    const { data, orgs, confirmed, userPrediction, aggregate } = this.state;\n\n    //if (!data || !orgs || !userPrediction || !confirmed) return 'Loading...';\n    if (!data || !orgs || !confirmed || !userPrediction || !aggregate) return 'Loading...';\n\n    return (\n      <div className=\"chartContainer\">\n        <LineCharts\n          dataSet={data}\n          orgs={orgs}\n          userPrediction={userPrediction}\n          confirmed={confirmed}\n        />\n        <ModelsChart \n          data={data} \n          orgs={orgs}\n          confirmed={confirmed}\n          aggregate={aggregate} \n        />\n      </div>\n    );\n  }\n}\n\nexport default ChartContainer;\n","import React from 'react';\nimport LineChart from '../../components/LineChart';\nimport ModelsChart from '../../components/ModelsChart';\nimport { cleanConfirmedData, organizeData } from '../../utils/data';\n\nfunction LineCharts({ dataSet, orgs, userPrediction, confirmed }) {\n  return dataSet.map((data, index) => {\n    return (\n      <LineChart data={data} org={orgs[index]} userPrediction={userPrediction} confirmed={confirmed} />\n     );\n  })\n}\n\nclass newDeathsContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n      orgs: null,\n      confirmed: null,\n      userPrediction: null,\n      aggregate: null\n    };\n  }\n\n  componentDidMount() {\n    fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n      const [results, orgs] = organizeData(data);\n      this.setState({ data: results, orgs });\n    });\n    fetch('/user-prediction').then(res => res.json()).then(data => {\n      this.setState({ userPrediction: data });\n    });\n    fetch('/us-inc-deaths-confirmed').then(res => res.json()).then(data => {\n      this.setState({ confirmed: data });\n    });\n    fetch('/us-agg-inc-deaths').then(res => res.json()).then(data => {\n      this.setState({ aggregate: data });\n    });\n  }\n\n  render() {\n    const { data, orgs, userPrediction, confirmed, aggregate } = this.state;\n\n    if (!data || !orgs || !userPrediction || !confirmed || !aggregate) return 'Loading...';\n\n    return (\n      <div className=\"chartContainer\">\n        <LineCharts\n          dataSet={data}\n          orgs={orgs}\n          userPrediction={userPrediction}\n          confirmed={confirmed}\n        />\n        <ModelsChart \n          data={data} \n          orgs={orgs}\n          confirmed={confirmed} \n          aggregate={aggregate}\n        />\n      </div>\n    );\n  }\n}\n\nexport default newDeathsContainer;\n","import React, { Component } from 'react';\n\nconst pstyle = {\n    textAlign: 'left',\n    marginLeft: '20px',\n    fontSize: '20px'\n  }\n\nconst h1style = {\n    textAlign: 'left',\n    marginLeft: '20px',\n    fontSize: '40px'\n\n}\n\nclass AboutPage extends Component {\n\n    \n\n    render() {\n        return(\n            <div >\n        <h1 style={h1style}>About</h1>\n        <h3></h3>\n        <p style={pstyle}> \n\n            This Aggregate COVID-19 site aims to show various past data readings of coronavirus data, as well as future predictions from various sources. \n                 Different forecasts relating to the COVID-19 pandemic are displayed, and users can \n            make their own predictions about the future trajectory of factors relating to the pandemic such as daily deaths,\n            hospitalizations and cases.\n\n        \n        Our mission is to deliver future projections and collected data by providing the best information on the COVID-19 pandemic.</p>\n        <h3>How we Score</h3>\n        <p></p>\n        </div>\n            );\n        \n    }\n}\n\nexport default AboutPage;","import React, { Component } from 'react';\n\nclass LandingPage extends Component {\n\n    render() {\n        return (\n            <div>\n                <div class=\"container landing\">\n                    <h1 class=\"logo\">COVID-19 Prediction</h1>\n                </div>\n                <div class=\"landing\">\n                    <div class=\"title\"> Welcome<br/>\n                        <button class=\"button\"><b><a href=\"#\">Start</a></b></button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LandingPage;","import React from 'react';\n\nclass Leaderboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: null\n    }\n  }\n\n  componentDidMount() {\n    fetch('/user-data').then(res => res.json()).then(data => {\n      this.setState({ users: data });\n    });\n  }\n\n\n  renderTable() {\n    return this.state.users.map((user, index) => {\n      return (\n         <tr>\n            <td>{user['name']}</td>\n            <td>{user['score']}</td>\n         </tr>\n      );\n   });\n  }\n\n  render() {\n    const tableStyle = {\n      width: \"50%\",\n      textAlign: \"center\",\n      margin: \"0 25%\"\n    };\n\n    const { users } = this.state;\n    if (!users) return 'Loading...';\n\n    return (\n      <div>\n        <h2>Leaderboard</h2>\n        <table style={tableStyle} className=\"table table-bordered table-hover table-sm\">\n          <thead className=\"thead-dark\">\n            <tr>\n              <th>User</th>\n              <th>Score</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.renderTable()}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n  \nexport default Leaderboard;","import React from 'react';\nimport Chart from 'chart.js';\n\n\nclass MarketChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.chartRef = React.createRef();\n        this.state = {\n            data: null,\n            orgs: null,\n        };\n    }\n\n    componentDidMount() {\n        fetch('/total').then(res => res.json()).then(data => {\n            this.setState({data: Object.values(data), orgs: Object.keys(data)});\n            this.renderChart();\n        });\n    }\n\n    renderChart() {\n        var colors = {\n            'Columbia': 'rgb(172, 204, 230)',\n            'Georgia Tech': 'rgb(179, 163, 105)',\n            'UCLA': 'rgb(39, 116, 174)',\n            'IHME': 'rgb(87, 175, 85)',\n            'Youyang Gu': 'rgb(196, 129, 14)'\n        };\n        var colorArr = [];\n        for (var i = 0; i < this.state.orgs.length; i++) {\n            colorArr.push(colors[this.state.orgs[i]]);\n        }\n        var data = {\n            datasets: [{\n                data: this.state.data,\n                backgroundColor: colorArr,\n            }],\n            labels: this.state.orgs\n        };\n\n        this.myChart = new Chart(this.chartRef.current, {\n            type: 'doughnut',\n            data: data,\n            options: {\n                responsive: true\n            }\n        })\n    }\n\n    render() {\n        const { data, orgs } = this.state;\n        if (!data || !orgs) return 'Loading...';\n\n        return (\n            <div className=\"chart-container\" style={{position: \"relative\", width: \"80vw\", margin: \"0 10%\"}}>\n                <canvas ref={this.chartRef} />\n            </div>\n        );\n    }\n}\n\nexport default MarketChart;\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './UserPredictionChart.css';\nimport { getMostRecentPrediction, getAllDataPoints, sortDictByDate, sortStringDates } from '../../utils/data';\n\nclass UserPredictionChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\" };\n        this.chartRef = React.createRef();\n    }\n\n    componentDidMount() {\n        const userStatus = this.props.userStatus;\n        console.log(userStatus)\n        if (userStatus['logged in']) {\n            this.renderChart();\n        }\n        else {\n            this.chartRef.current.innerHTML = \"Please log in\"\n        }\n    }\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = {};//where we will store formatted userPrediction\n        const category = this.state.category;\n        var compiledData = [];\n\n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n\n        //store userPrediction in predictionData if it exists; parse dates and store as d3 date objects\n        if(Object.keys(userPrediction).length > 0) {\n            Object.keys(userPrediction).map(p => {\n                predictionData[p]= userPrediction[p].map(d => ({\n                    date: d3.timeParse(\"%Y-%m-%d\")((d.date).substring(0,10)),\n                    value: d.value,\n                    defined: d.defined\n                }))\n            })\n        }\n        predictionData = sortDictByDate(predictionData);\n        console.log(predictionData)\n        //get most recent prediction\n        var dates = sortStringDates(Object.keys(userPrediction))\n        const mostRecentPred = predictionData[dates[dates.length - 1]]\n        console.log(mostRecentPred)\n        //push to compiledData\n        compiledData = [confirmedData, mostRecentPred]\n        console.log(dates[0])\n        console.log(d3.timeFormat(\"%B %d, %Y\")(dates[0]))\n    \n\n        //IMPORTANT BOUNDARIES// \n        const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\");\n        const predEndDate = mostRecentPred[mostRecentPred.length - 1].date;\n        const valueMax = 5000;\n        \n\n        /*dateList.map(d => {\n            dates.push({\n                date: d\n            })\n        })*/\n\n        /////////////////////////////////////////////////DRAW CHART//////////////////////////////\n        //set up margin, width, height of chart\n        const legendWidth = 180;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", width/2)\n            .attr(\"y\", height + 2*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - margin.left)\n            .attr(\"x\", 0 - (height/2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n\n        var x = d3\n                    .scaleTime()\n                    .domain([confirmedStartDate, predEndDate])\n                    .range([0, width]);\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        var y = d3\n                    .scaleLinear()\n                    .domain([0, valueMax])\n                    .range([height, 0]);\n        var yAxis = svg\n                        .append(\"g\")\n                        .call(d3.axisLeft(y));\n        \n        //DRAW LEGEND//\n        const legendString = [\"Daily Confirmed Deaths\", \"User Prediction\"];\n        const color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n        const legend = svg\n                            .append('g')\n                            .attr(\"id\", \"legend\");\n        legend\n                .selectAll(\"rect\")\n                .data(legendString)\n                .enter()\n                .append(\"circle\")\n                    .attr('cx', width + 30)\n                    .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .attr(\"r\", 6)\n                    //.attr(\"width\", size)\n                    //.attr(\"height\", size)\n                    .style(\"fill\", function(d){ return color(d)})\n        legend\n                .selectAll(\"labels\")\n                .data(legendString)\n                .enter()\n                .append(\"text\")\n                    .attr(\"x\", width + 45)\n                    .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .style(\"fill\", function(d){ return color(d)})\n                    .text(function(d){ return d})\n                        .attr(\"text-anchor\", \"left\")\n                        .style(\"alignment-baseline\", \"middle\")\n        \n        //DRAW TODAY LINE//\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        console.log(today);\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n\n        //SET UP CLIP PATH//\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n        const mainArea = svg.append(\"g\")\n                            .attr(\"clip-path\", \"url(#main-clip)\");\n        \n        //SET UP CURVES//\n        const lineGenerator = d3.line()\n                                .curve(d3.curveCatmullRom);\n        const predLineGenerator = d3.line()\n                                    .curve(d3.curveBasis);\n        const line = lineGenerator\n                        .x(function(d) { return x(d.date) })\n                        .y(function(d) { return y(d.value) })\n        const predLine = predLineGenerator\n                            .defined(d => d.defined)\n                            .x(function(d) { return x(d.date) })\n                            .y(function(d) { return y(d.value) })\n        //DRAW CURVES//\n        var confirmedCurve = mainArea\n                                    .append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")\n                                    .datum(confirmedData)\n                                    .attr(\"d\", line)\n                                    .attr(\"stroke\", color(legendString[0]))\n        var predCurve = mainArea\n                                .append(\"path\")\n                                .attr(\"id\", \"prediction\")\n                                .attr(\"class\", \"line\")\n                                .datum(mostRecentPred.filter(predLine.defined()))\n                                .attr(\"d\", predLine)\n                                .attr(\"stroke\",  color(legendString[1]))\n        \n        //SET UP TOOLTIP//\n        const tooltip = svg \n                            .append(\"g\")\n                            .attr(\"class\", \"tooltip\")\n        tooltip\n                .append(\"path\")\n                .attr(\"id\", \"tooltip-line\")\n                .style(\"stroke\", \"black\")\n                .style(\"stroke-width\", \"0.5px\")\n                .style(\"display\", \"none\");\n        var mousePerLine = tooltip\n                                    .selectAll(\".mouse-per-line\")\n                                    .data(compiledData)\n                                    .enter()\n                                    .append(\"g\")\n                                    .attr(\"class\", \"mouse-per-line\");\n        mousePerLine.append(\"circle\")\n                    .attr(\"r\", 2)\n                    .style(\"stroke\", function(d, index) {\n                        return color(legendString[index]);\n                    })\n                    .attr(\"id\", \"circle\")\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke-width\", \"1px\")\n                    .style(\"display\", \"none\");\n        mousePerLine.append(\"text\")\n                    .attr(\"id\", \"value\")\n                    .attr(\"transform\", \"translate(10,3)\"); \n        mousePerLine.append(\"text\")\n                    .attr(\"id\", \"date\")\n                    .attr(\"text-anchor\", \"end\")\n                    .attr(\"transform\", \"rotate(-90)\")\n        \n        svg\n                .append(\"svg:rect\")\n                    .attr('width', width)\n                    .attr('height', height)\n                    .attr(\"id\", \"interactive-area\")\n                    .attr('fill', 'none')\n                    .attr('pointer-events', 'all')\n                    .style(\"cursor\", \"pointer\")\n                    .on('mouseout', function() { // on mouse out hide line, circles and text\n                        d3.select(\"#tooltip-line\")\n                            .style(\"display\", \"none\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"display\", \"none\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"display\", \"none\")\n                    })\n                    /*.on('mouseover', function() { // on mouse in show line, circles and text\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"1\")\n                    })*/\n                    .on('mousemove', function() { // mouse moving over canvas\n                        var todayDate = new Date();\n                        todayDate = d3.timeParse(\"%Y-%m-%d\")(todayDate.toISOString().substring(0,10));\n                        var date = x.invert(d3.mouse(this)[0])\n                        if (+date > +todayDate) {\n                            date = todayDate;\n                        }\n                        const index = d3.bisectRight(dates, date);\n                        if(predictionData[date]) {\n                            console.log(\"exists\")\n                            svg\n                                .select(\"#prediction\")\n                                .datum(predictionData[date].filter(predLine.defined()))\n                                .attr(\"d\", predLine)\n                            compiledData[1] = predictionData[date];\n                        }\n                        else {\n                            if (index == 0) {\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum([])\n                                    .attr(\"d\", predLine)\n                                compiledData[1] = [];\n                            }\n                            else {\n                                var newDate = dates[index - 1];\n                                console.log(+predictionData[newDate][0].date, +date);\n                                var pred = predictionData[newDate].filter(d => +d.date >= +date)\n                                console.log(pred)\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum(pred.filter(predLine.defined()))\n                                    .attr(\"d\", predLine);\n                                compiledData[1] = pred;\n                            }\n                        }\n                        mousePerLine.data(compiledData);\n                        ////////////////////\n\n\n\n                        var mouse = d3.mouse(this);\n                        var xCoord = mouse[0];\n                        d3\n                            .select(\"#tooltip-line\")\n                            .attr(\"d\", function() {\n                                var d = \"M\" + xCoord + \",\" + height;\n                                d += \" \" + xCoord + \",\" + 0;\n                                return d;\n                            });\n                        d3\n                            .selectAll(\".mouse-per-line\")\n                            .attr(\"transform\", function(d, i) {\n                                if (d.length == 0) {return;}\n                                var date = x.invert(xCoord);\n                                const index = d3.bisector(f => f.date).left(d, date);\n                                var a = null;\n                                if (index > 0) {\n                                    a = d[index - 1];\n                                }\n                                const b = d[index];\n                                //d = the data object corresponding to date and value pointed by the cursors\n                                var data = null;\n                                if (!a) {\n                                    data = b;\n                                }\n                                else if (!b) {\n                                    data = a;\n                                }\n                                else {\n                                    data = b && (date - a.date > b.date - date) ? b : a;\n                                }\n                                if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n                                    if (data.defined != 0) {\n                                        var element = d3.select(this)\n                                        element\n                                                .select('#value')\n                                                .style(\"display\", \"block\")\n                                                .text(Math.round(data.value))\n                                                .attr(\"transform\", `translate(${mouse[0]}, ${y(data.value)})`);\n                                            \n                                        element\n                                                .select(\"#date\")\n                                                .style(\"display\", \"block\")\n                                                .attr(\"transform\", `translate(${mouse[0] + 15}, 0) rotate(-90)`)\n                                                .text(d3.timeFormat(\"%B %d, %Y\")(data.date));\n                                        element\n                                                .select(\"circle\")\n                                                .style(\"display\", \"block\")\n                                                .attr(\"transform\", `translate(${mouse[0]}, ${y(data.value)})`);\n                                        return \"translate(0,0)\";\n                                    }\n                                }\n                                var element = d3.select(this)\n                                element                \n                                    .selectAll(\"text\")\n                                        .style(\"display\", \"none\")\n                                element\n                                        .select(\"circle\")\n                                        .style(\"display\", \"none\");\n                            });\n                    })\n                    .on(\"click\", function() {\n                        var date = x.invert(d3.mouse(this)[0])\n                        const index = d3.bisectRight(dates, date);\n                        console.log(dates)\n                        console.log(date)\n                        console.log(index)\n                        if(predictionData[date]) {\n                            console.log(\"exists\")\n                            svg\n                                .select(\"#prediction\")\n                                .datum(predictionData[date].filter(predLine.defined()))\n                                .attr(\"d\", predLine)\n                            compiledData[1] = predictionData[date];\n                        }\n                        else {\n                            if (index == 0) {\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum([])\n                                    .attr(\"d\", predLine)\n                                compiledData[1] = [];\n                            }\n                            else {\n                                var newDate = dates[index - 1];\n                                console.log(+predictionData[newDate][0].date, +date);\n                                var pred = predictionData[newDate].filter(d => +d.date >= +date)\n                                console.log(pred)\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum(pred.filter(predLine.defined()))\n                                    .attr(\"d\", predLine);\n                                compiledData[1] = pred;\n                            }\n                        }\n                        mousePerLine.data(compiledData);\n                    })\n                \n    }\n\n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default UserPredictionChart;\n","import React, { Component } from 'react';\nimport UserPredictionChart from '../../components/UserPredictionChart';\nimport { cleanConfirmedData, organizeData } from '../../utils/data';\n\nclass UserPredictionChartContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            forecast: null,\n            orgs: null,\n            confirmed: null,\n            userPrediction: null,\n            aggregate: null,\n            userStatus: null\n        };\n    }\n\n    componentDidMount() {\n        fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n            const [results, orgs] = organizeData(data);\n            this.setState({ forecast: results, orgs });\n        });\n            fetch('/user-prediction?category=us_daily_deaths').then(res => res.json()).then(data => {\n            this.setState({ userPrediction: data });\n        });\n        fetch('/us-inc-deaths-confirmed-wk-avg').then(res => res.json()).then(data => {\n            //const result = JSON.parse(data);\n            this.setState({ confirmed: data });\n        });\n        fetch('/us-agg-inc-deaths').then(res => res.json()).then(data => {\n            this.setState({ aggregate: data });\n        });\n        fetch('/login-status/').then(res => res.json()).then(data => {\n            this.setState({ userStatus: data });\n            console.log(data);\n        });\n    }\n    render() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate, userStatus } = this.state;\n        if (!forecast || !orgs || !userPrediction || !confirmed || !aggregate || !userStatus) return 'Loading...';\n\n        return (\n            <div className=\"chartContainer\">\n                <UserPredictionChart\n                    forecast={forecast}\n                    orgs={orgs}\n                    userPrediction={userPrediction}\n                    confirmed={confirmed}\n                    aggregate={aggregate}\n                    userStatus={userStatus}\n                />\n            </div>\n        );\n    }\n}\n\nexport default UserPredictionChartContainer;","import React from 'react';\nimport UserPredictionChartContainer from '../../containers/UserPredictionChartContainer';\n\nclass ProfilePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null\n    }\n  }\n\n  componentDidMount() {\n    /*fetch('/user').then(res => res.json()).then(data => {\n      this.setState({ user: data });\n    });*/\n  }\n\n  \n\n  renderUser() {\n    return (\n      <div>\n        <h3>My Predictions</h3>\n        <UserPredictionChartContainer/>\n      </div>\n\n        /*<div>\n            <p><b>Name: </b>{ this.state.user['name'] }</p>\n            <p><b>Poll score: </b>{ this.state.user['score'] }</p>\n            <p><b>Country/Location: </b></p>\n            <p><b>Bio: </b></p>\n\n            <p>Edit your page:</p>\n            <form action='/action' method='POST'>\n            <input type=\"text\" name=\"bio\" placeholder=\"Bio...\" />\n            <input type=\"text\" name=\"location\" placeholder=\"Location...\" />\n            <button type='submit'>Create</button>\n            </form>\n          \n        </div>*/\n    );\n  }\n\n  render() {\n    const { user } = this.state;\n    //if (!user) return 'Loading...';\n\n    return (\n        <div>\n            {this.renderUser()}\n        </div>\n    );\n  }\n}\n  \nexport default ProfilePage;","import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport './InteractiveChart.css';\nimport { clamp, findYatX, getAllDataPoints, getDataPointsFromPath, reformatData, reformatPredData, getMostRecentPrediction } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\nimport { rectangle } from 'leaflet';\n\n\nclass InteractiveChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\" };\n        this.chartRef = React.createRef();\n    }\n    componentDidMount() {\n        const loginStatus = this.props.loginStatus;\n        if (loginStatus['logged in']) {\n            this.renderChart();\n        }\n        else {\n            this.renderChartUnregistered()\n        }\n    }\n\n    //move to utils\n    savePrediction(data, category) {\n        fetch('/update/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"data\": data, \"category\": category}),\n        });\n    }\n    deletePrediction(category) {\n        console.log(category)\n        fetch('/delete/',{\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\"category\": category}),\n          });\n        console.log(\"deleted\")\n    }\n\n    createDefaultPrediction(predStartDate, predEndDate) {\n        var defaultData = [];\n        var currDate = predStartDate;\n        //var defined = true;\n        //var value = confirmedData[confirmedData.length - 1].value;\n        \n        //create defaultPredictionData\n        while(+currDate <= +predEndDate) {\n            defaultData.push({date: currDate, value: 0, defined: 0});\n            currDate = d3.timeDay.offset(currDate, 1);\n        }\n        return defaultData;\n    }\n    \n    appendModal() {\n        const signinRedirect = () => {window.location.href='/signin'}\n        const signupRedirect = () => {window.location.href='/signup'}\n        var modal = document.createElement(\"div\");\n        modal.id = \"modal\";\n        var modalContent = document.createElement(\"div\");\n        modalContent.id = \"modal-content\";\n        var text = document.createElement(\"p\");\n        text.innerText = \"Please log in to save your prediction.\";\n        var signinBtn = document.createElement(\"button\");\n        signinBtn.id = \"signin-btn\";\n        signinBtn.innerText = \"Sign In\";\n        signinBtn.onclick= signinRedirect;\n        var signupBtn = document.createElement(\"button\");\n        signupBtn.id = \"signup-btn\";\n        signupBtn.onclick= signupRedirect;\n        signupBtn.innerText = \"Sign Up\";\n        modalContent.appendChild(text);\n        modalContent.appendChild(signinBtn);\n        modalContent.appendChild(signupBtn);\n        modal.appendChild(modalContent);\n        this.chartRef.current.appendChild(modal);\n    }\n\n    renderChartUnregistered() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = [];//where we will store formatted userPrediction\n        var defaultPredictionData = []\n        const savePrediction = this.savePrediction;\n        const createDefaultPrediction = this.createDefaultPrediction;\n        this.appendModal();\n        const category = this.state.category;\n        var compiledData = [];\n        //set up margin, width, height of chart\n        const legendWidth = 380;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                    .append(\"g\")\n                    .attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`);\n        \n                    // add title\n        svg.append(\"text\")\n            .attr(\"x\", (width / 2))             \n            .attr(\"y\", -20)\n            .attr(\"text-anchor\", \"middle\")  \n            .style(\"font-size\", \"16px\") \n            .style(\"text-decoration\", \"underline\")  \n            .style(\"font-weight\", \"bold\")\n            .text(\"COVID-19 Forecasts of Daily Deaths in the US Over Time\");\n\n        const w = 710 - margin.left - margin.right;\n        const h = 360 - margin.top - margin.bottom;\n            \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", w/2 + margin.right)\n            .attr(\"y\", h + 4*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0-margin.left)\n            .attr(\"x\",0 - (h / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n        \n        var forecastData = forecast.map(f => {\n            return Object.keys(f).map(key => ({\n                date: d3.timeParse(\"%Y-%m-%d\")(key),\n                value: f[key]\n            }))\n        });\n\n        var aggregateData = Object.keys(aggregate).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: aggregate[key]\n        }));\n  \n        //set other dates\n        const confirmedStartDate = confirmedData[4].date;\n        const predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n        const predLength = 155;\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis     \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        //var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n        var legendString = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(orgs);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n\n         //draw legend\n        var legend = svg.append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        const legendMarginL = 30;\n        legend.selectAll(\"rect\")\n            .data(legendString)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', width + legendMarginL)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", function(d){ return color(d)})\n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", width + 45)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .style(\"fill\", function(d){ return color(d)})\n                .text(function(d){ return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            //.curve(d3.curveBasis);\n            .curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //area where the confirmed curve will be drawn\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n\n        // Create the confirmed area variable\n        const mainArea = svg\n                                .append('g')\n                                .attr(\"clip-path\", \"url(#main-clip)\");\n\n        //display confirmed data\n        var confirmedLine = mainArea.append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")    \n                                    .datum(confirmedData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(legendString[0]))\n                                    .style(\"stroke-width\", \"3px\")\n        var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n        var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value);\n\n        //append clip-path for prediction curve\n        var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\")\n                                .attr(\"id\", \"prediction-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width - confirmedAreaEndX )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", confirmedAreaEndX)\n                                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n                            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        \n        //make sure aggregateData curve stems from confiremData curve\n        var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate);\n        //check if predStartDate exists in AD\n        if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date == +predStartDate) {\n            aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n        }\n        else {\n            aggregateData.splice(idxOfStartDate, 0, {\n                date: predStartDate,\n                value: confirmedData[confirmedData.length - 1].value\n            });\n        }\n        aggregateData = aggregateData.splice(idxOfStartDate, aggregateData.length);\n\n\n        //display aggregate data\n        var aggregateLine = predictionArea.append(\"path\")\n                                    .attr(\"id\", \"aggregate\")\n                                    .attr(\"class\", \"line\")        \n                                    .datum(aggregateData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(legendString[1]))\n                                    .style(\"stroke-width\", \"2px\")\n        \n        //display forecast data\n        forecastData.map((f, index) => {\n            //make sure they all stem from the confirmed curve!\n            //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n            var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate);\n            //check if predStartDate exists in f\n            if (f.length > 0 && +f[idxOfStartDate].date == +predStartDate) {\n                f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n            }\n            else {//add data point to forecastData array\n                f.splice(idxOfStartDate, 0, {\n                    date: predStartDate,\n                    value: confirmedData[confirmedData.length - 1].value\n                });\n                f = f.slice(idxOfStartDate, f.length);\n            }\n            forecastData[index] = f;\n            predictionArea.append(\"path\")\n                        .attr(\"class\", \"forecast line\")\n                        .attr(\"id\", orgs[index])\n                        .style(\"stroke\", color(orgs[index]))\n                        .datum(f)\n                            .attr(\"d\", line);\n        })\n        \n        var lines = document.getElementsByClassName('line');\n\n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = predictionArea\n                                        .append(\"path\")\n                                        .attr(\"id\", \"your-line\");\n        \n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n        \n\n        predictionData = createDefaultPrediction(predStartDate, predEndDate);\n        predictionData[0].value = confirmedLastVal;\n        predictionData[0].defined = true;        \n\n        var filteredData = null;\n        //var totalData = confirmedData.concat(predictionData);\n\n//!!    //add forecast data to compiledData\nconst forecastPaths = document.querySelectorAll(\".forecast\");\n        const confirmedPath = document.querySelector(\"#confirmed\");\n        const aggregatePath = document.querySelector(\"#aggregate\");\n        console.log(aggregatePath)\n        console.log(forecastPaths);\n        console.log(orgs);\n        orgs.map((o, index) => {\n            var lastDate = forecastData[index][forecastData[index].length - 1].date;\n            forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, lastDate);\n            compiledData.push({\n                name: o,\n                data: forecastData[index]\n            })\n        })\n        //confirmedData = getAllDataPoints(confirmedPath, x, y, confirmedStartDate, predStartDate);\n        compiledData.push({\n            name: \"Daily Confirmed Deaths\",\n            data: confirmedData\n        })\n        var lastDate = aggregateData[aggregateData.length - 1].date;\n        aggregateData = getAllDataPoints(aggregatePath, x, y, aggregateData[0].date, lastDate)\n        console.log(aggregateData);\n        compiledData.push({\n            name: \"Aggregate Forecast\",\n            data: aggregateData\n        })\n        compiledData.push({\n            name: \"User Prediction\",\n            data: predictionData\n        })\n        //join data to yourLine\n        filteredData = predictionData.filter(predLine.defined())\n        yourLine.datum(filteredData)\n                .attr('d', predLine)\n                .style(\"stroke\", color(legendString[2]))\n                .style(\"stroke-width\", \"2px\")\n\n        //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        /*svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");*/\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append draw your guess text\n        const drawingInstruction = svg\n                                        .append(\"g\")\n                                        .attr(\"id\", \"drawing-instruction\")\n                                        .style(\"opacity\", \"1\");\n        drawingInstruction\n                            .append(\"text\")\n                            .attr(\"id\", \"draw-guess\")\n                            .attr(\"x\", confirmedAreaEndX + (width - confirmedAreaEndX) / 2)             \n                            .attr(\"y\", height - 100)\n                            .attr(\"text-anchor\", \"middle\")  \n                            .text(\"Draw your guess\")\n                            .style(\"font-size\", \"16px\");\n        //append circle at the end of confirmed curve\n        var selectCircle = drawingInstruction\n                                                .append(\"g\")\n                                                .attr(\"id\", \"pointer\");\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n        selectCircle.append(\"circle\")\n            .attr(\"class\", c)\n            .attr(\"cx\", confirmedAreaEndX)\n            .attr(\"cy\", confirmedAreaEndY)\n        })\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        //hide \"draw your guess\" text\n                        svg\n                            .select(\"#drawing-instruction\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"0\")\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        //update totalData everytime predictionData is updated\n                        compiledData[compiledData.length - 1].data = predictionData;\n                        //console.log(compiledData)\n                        /*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/\n                        var filteredData = predictionData.filter(predLine.defined())\n\n                        yourLine.datum(filteredData)\n                                .attr('d', predLine)\n                                .style(\"stroke\", color(legendString[2]))\n                                .style(\"stroke-width\", \"2px\")\n                        });\n                    })\n                    .on(\"end\", function () {\n                        d3\n                            .select(\"#modal\")\n                            .style(\"display\", \"block\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"1\")\n                    });\n        \n        svg.call(drag)\n        var modal = document.getElementById(\"modal\");\n\n        window.onclick = function(event) {\n            if (event.target == modal) {\n              modal.style.display = \"none\";\n            }\n          }\n\n        //finds the datapoint closest to the mouse (along x)\n        /*var bisect = () => {\n            const bisectDate = d3.bisector(d => d.date).left;\n            return mx => {\n                const date = x.invert(mx);\n                const index = bisectDate(totalData, date, 1);\n                const a = totalData[index - 1];\n                const b = totalData[index];\n                return b && (date - a.date > b.date - date) ? b : a;\n            };\n        }*/\n\n\n        const tooltipArea = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n                    .attr(\"id\", \"tooltip-line\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"0.5px\")\n                    .style(\"opacity\", \"0\");\n        //console.log(compiledData)\n        var mousePerLine = tooltipArea\n                                        .selectAll(\".mouse-per-line\")\n                                        .data(compiledData)\n                                        .enter()\n                                        .append(\"g\")\n                                        .attr(\"class\", \"mouse-per-line\");\n        \n        mousePerLine.append(\"circle\")\n                        .attr(\"r\", 2)\n                        .style(\"stroke\", function(d) {\n                            return color(d.name);\n                        })\n                        .style(\"fill\", \"none\")\n                        .style(\"stroke-width\", \"1px\")\n                        .style(\"opacity\", \"0\");\n        mousePerLine.append(\"text\")\n                    .attr(\"transform\", \"translate(10,3)\"); \n                    \n        var chart = tooltipArea\n                    .append(\"svg:rect\")\n                    .attr('width', width)\n                    .attr('height', height)\n                    .attr('fill', 'none')\n                    .attr('pointer-events', 'all')\n                    //.style(\"cursor\", \"pointer\")\n                    .on('mouseout', function() { // on mouse out hide line, circles and text\n                        d3.select(\"#tooltip-line\")\n                        .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                        .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line text\")\n                        .style(\"opacity\", \"0\")\n                    })\n                    .on('mouseover', function() { // on mouse in show line, circles and text\n                        d3.select(\"#tooltip-line\")\n                        .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                        .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                        .style(\"opacity\", \"1\")\n\n                    })\n                    .on('mousemove', function() { // mouse moving over canvas\n                        var mouse = d3.mouse(this);\n                        var xCoord = mouse[0];\n                        var yCoord = mouse[1];\n                        const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n                        if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n                            chart.attr(\"cursor\", \"pointer\");\n                        }\n                        else {\n                            chart.attr(\"cursor\", \"default\");\n                        }\n                        d3\n                            .select(\"#tooltip-line\")\n                            .attr(\"d\", function() {\n                                var d = \"M\" + xCoord + \",\" + height;\n                                d += \" \" + xCoord + \",\" + 0;\n                                return d;\n                            });\n                        d3\n                            .selectAll(\".mouse-per-line\")\n                            .attr(\"transform\", function(d, i) {\n                                if (d.data.length == 0) {return;}\n                                var date = x.invert(xCoord);\n                                const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n                                var a = null;\n                                if (index > 0) {\n                                    a = d.data[index - 1];\n                                }\n                                const b = d.data[index];\n                                //d = the data object corresponding to date and value pointed by the cursors\n                                var data = null;\n                                if (!a) {\n                                    data = b;\n                                }\n                                else if (!b) {\n                                    data = a;\n                                }\n                                else {\n                                    data = b && (date - a.date > b.date - date) ? b : a;\n                                }\n                                if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n                                    if (data.defined != 0) {\n                                        var element = d3.select(this)\n                                                        .select('text')\n                                                            .style(\"opacity\", \"1\")\n                                                            .text(Math.round(data.value));\n                                        element.select(\"circle\")\n                                                .style(\"opacity\", \"1\");\n                                        return \"translate(\" + mouse[0] + \",\" + y(data.value)+\")\";\n                                    }\n                                }\n                                var element = d3.select(this)\n                                                .select(\"text\")\n                                                .style(\"opacity\", \"0\")\n                                element\n                                        .select(\"circle\")\n                                        .style(\"opacity\", \"0\");\n                                \n                        });\n                    })\n\n        /////////////////////////////////////////////////////////////////////////////////////////////\n        const focusHeight = 100;\n        const contextMargin = 50;\n        var context = svg\n                            .append(\"g\")\n                                .attr(\"viewBox\", [0, 0, width, focusHeight])\n                                .attr(\"transform\", `translate(0,${height + contextMargin} )`)\n                                //.attr(\"width\", width + 100)\n                                //.attr(\"height\", height)\n                                .style(\"display\", \"block\")\n\n\n\n        /*const xAxis = (g, x, height) => g\n                                            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                            .call(d3.axisBottom(x))*/\n\n        var contextX = d3\n                            .scaleTime()\n                            .domain([confirmedStartDate, predEndDate])\n                            .range([0, width]);\n        \n        var contextXAxis = context\n                                    .append(\"g\")\n                                    .attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`)\n                                    .call(d3.axisBottom(contextX));\n        const brush = d3.brushX()\n                        .extent([[0, 0], [width, focusHeight - margin.bottom]])\n                        .on(\"brush\", brushed)\n                        .on(\"end\", brushended);\n\n        const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    \n        /*context.append(\"g\")\n                .call(xAxis, x, focusHeight);*/\n    \n        /*svg.append(\"path\")\n            .datum(confirmedData)\n            .attr(\"fill\", \"steelblue\")\n            .attr(\"d\", line(x, y.copy().range([focusHeight - margin.bottom, 4])));*/\n        function brushed() {\n            if (d3.event.selection) {\n                var extent = d3.event.selection;\n                //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                x.domain([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                xAxis\n                        //.transition()\n                        //.duration(1000)\n                        .call(d3.axisBottom(x))\n                var newX = x(confirmedData[confirmedData.length - 1].date);\n                newX = newX < 0 ? 0 : newX;\n                d3\n                    .select(\"#prediction-clip\")\n                    .select(\"rect\")\n                        .attr(\"width\", width - newX)\n                        .attr(\"x\", newX);\n\n                svg\n                    .selectAll(\".line\")\n                    //.transition()\n                    //.duration(1000)\n                    .attr('d', line)\n\n                svg\n                    .select(\"#your-line\")\n                    .attr(\"d\", predLine)\n                \n                //reposition draw your guess text and pointer\n                svg\n                    .select(\"#draw-guess\")\n                    .attr(\"x\", newX + (width - newX) / 2);\n                svg\n                    .select(\"#pointer\")\n                    .selectAll(\"circle\")\n                        .attr(\"cx\", newX);\n            }\n        }\n        \n        function brushended() {\n            if (!d3.event.selection) {\n                gb.call(brush.move, defaultSelection);\n            }\n\n        }\n        const gb = context\n                        .call(brush)\n                        .call(brush.move, defaultSelection);   \n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        var deleteButton = document.createElement(\"button\")\n        deleteButton.className = 'btn primary-btn'\n        deleteButton.id = 'delete-btn'\n        deleteButton.innerText = \"Reset\";\n        d3.select(\"#delete-btn\")\n        deleteButton.onclick = () => {\n            this.deletePrediction(category)\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            //update yourLine\n            var filtered = predictionData.filter(predLine.defined())\n            yourLine.datum(filtered)\n                    .attr('d', predLine)\n                    \n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        };\n        document.querySelector(\"body\").appendChild(deleteButton);\n        ////ADD TODAY LINE/////////////////////////////////////////////////////\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n    }\n\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = [];//where we will store formatted userPrediction\n        var defaultPredictionData = []\n        const savePrediction = this.savePrediction;\n        const createDefaultPrediction = this.createDefaultPrediction;\n        const category = this.state.category;\n        var compiledData = [];\n        //set up margin, width, height of chart\n        const legendWidth = 180;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        const titleHeight = 20;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                    .append(\"g\")\n                        .attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`);\n        \n        // add title\n        svg.append(\"text\")\n            .attr(\"x\", (width / 2))             \n            .attr(\"y\", -20)\n            .attr(\"text-anchor\", \"middle\")  \n            .style(\"font-size\", \"16px\") \n            .style(\"text-decoration\", \"underline\")  \n            .style(\"font-weight\", \"bold\")\n            .text(\"COVID-19 Forecasts of Daily Deaths in the US Over Time\");\n\n        const w = 710 - margin.left - margin.right;\n        const h = 360 - margin.top - margin.bottom;\n            \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", w/2 + margin.right)\n            .attr(\"y\", h + 4*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - margin.left)\n            .attr(\"x\", 0 - (h/2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = reformatData(confirmed);\n        var forecastData = forecast.map(f => {\n            return reformatData(f);\n        });\n        var aggregateData = reformatData(aggregate);\n\n        //store userPrediction in predictionData if it exists\n        if(Object.keys(userPrediction).length > 0) {\n            const mostRecentPred = getMostRecentPrediction(userPrediction);\n            predictionData = reformatPredData(mostRecentPred);\n        }\n  \n        //set other dates\n        const confirmedStartDate = confirmedData[4].date;\n        const predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n        const predLength = 155;\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis     \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        //var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n        var legendString = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(orgs);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n\n         //draw legend\n        var legend = svg.append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        const legendMarginL = 30;\n        legend.selectAll(\"rect\")\n            .data(legendString)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', width + legendMarginL)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", function(d){ return color(d)})\n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", width + 45)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .style(\"fill\", function(d){ return color(d)})\n                .text(function(d){ return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            //.curve(d3.curveBasis);\n            .curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //area where the confirmed curve will be drawn\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n\n        // Create the confirmed area variable\n        const mainArea = svg\n                                .append('g')\n                                .attr(\"clip-path\", \"url(#main-clip)\");\n\n        //display confirmed data\n        var confirmedLine = mainArea.append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")    \n                                    .datum(confirmedData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(legendString[0]))\n                                    .style(\"stroke-width\", \"3px\")\n        var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n        var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value);\n\n        //append clip-path for prediction curve\n        var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\")\n                                .attr(\"id\", \"prediction-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"id\", \"prediction-rect\")\n                                    .attr(\"width\", width - confirmedAreaEndX )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", confirmedAreaEndX)\n                                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n                            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        \n        //make sure aggregateData curve stems from confiremData curve\n        var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate);\n        //check if predStartDate exists in AD\n        if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date == +predStartDate) {\n            aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n        }\n        else {\n            aggregateData.splice(idxOfStartDate, 0, {\n                date: predStartDate,\n                value: confirmedData[confirmedData.length - 1].value\n            });\n        }\n        aggregateData = aggregateData.splice(idxOfStartDate, aggregateData.length);\n\n        //display aggregate data\n        var aggregateLine = predictionArea.append(\"path\")\n                                    .attr(\"id\", \"aggregate\")\n                                    .attr(\"class\", \"line\")        \n                                    .datum(aggregateData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(legendString[1]))\n                                    .style(\"stroke-width\", \"2px\")\n        \n        //display forecast data\n        forecastData.map((f, index) => {\n            //make sure they all stem from the confirmed curve!\n            //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n            var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate);\n            //check if predStartDate exists in f\n            if (f.length > 0 && +f[idxOfStartDate].date == +predStartDate) {\n                f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n            }\n            else {//add data point to forecastData array\n                f.splice(idxOfStartDate, 0, {\n                    date: predStartDate,\n                    value: confirmedData[confirmedData.length - 1].value\n                });\n                f = f.slice(idxOfStartDate, f.length);\n            }\n            forecastData[index] = f;\n            predictionArea.append(\"path\")\n                        .attr(\"class\", \"forecast line\")\n                        .attr(\"id\", orgs[index])\n                        .style(\"stroke\", color(orgs[index]))\n                        .datum(f)\n                            .attr(\"d\", line);\n        })\n        \n        var lines = document.getElementsByClassName('line');\n\n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = predictionArea\n                                        .append(\"path\")\n                                        .attr(\"id\", \"your-line\");\n        \n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n        \n        //check if userPrediction already exists in db\n        if (Object.keys(userPrediction).length > 0) {\n            predictionData = predictionData.filter(d => (+d.date >= +predStartDate) && (+d.date <= +predEndDate));\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            currDate = d3.timeDay.offset(predictionData[predictionData.length - 1].date, 1);\n            predictionData.concat(createDefaultPrediction(currDate, predEndDate));\n        }\n        else {\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n        }\n\n        var filteredData = null;\n//!!    //add forecast data to compiledData\n        //get complete dataset from paths\n        const forecastPaths = document.querySelectorAll(\".forecast\");\n        const confirmedPath = document.querySelector(\"#confirmed\");\n        const aggregatePath = document.querySelector(\"#aggregate\");\n        console.log(aggregatePath)\n        console.log(forecastPaths);\n        console.log(orgs);\n        orgs.map((o, index) => {\n            var lastDate = forecastData[index][forecastData[index].length - 1].date;\n            forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, lastDate);\n            compiledData.push({\n                name: o,\n                data: forecastData[index]\n            })\n        })\n        //confirmedData = getAllDataPoints(confirmedPath, x, y, confirmedStartDate, predStartDate);\n        compiledData.push({\n            name: \"Daily Confirmed Deaths\",\n            data: confirmedData\n        })\n        var lastDate = aggregateData[aggregateData.length - 1].date;\n        console.log(aggregateData);\n        console.log(lastDate);\n        aggregateData = getAllDataPoints(aggregatePath, x, y, aggregateData[0].date, lastDate)\n        console.log(aggregateData);\n        compiledData.push({\n            name: \"Aggregate Forecast\",\n            data: aggregateData\n        })\n        compiledData.push({\n            name: \"User Prediction\",\n            data: predictionData\n        })\n        //join data to yourLine\n        filteredData = predictionData.filter(predLine.defined())\n        yourLine.datum(filteredData)\n                .attr('d', predLine)\n                .style(\"stroke\", color(legendString[2]))\n                .style(\"stroke-width\", \"2px\")\n        //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append draw your guess text\n        const drawingInstruction = svg\n                                        .append(\"g\")\n                                        .attr(\"id\", \"drawing-instruction\")\n                                        .style(\"opacity\", \"0\");\n        drawingInstruction\n                            .append(\"text\")\n                            .attr(\"id\", \"draw-guess\")\n                            .attr(\"x\", confirmedAreaEndX + (width - confirmedAreaEndX) / 2)             \n                            .attr(\"y\", height - 100)\n                            .attr(\"text-anchor\", \"middle\")  \n                            .text(\"Draw your guess\")\n                            .style(\"font-size\", \"16px\");\n        //append circle at the end of confirmed curve\n        var selectCircle = drawingInstruction\n                                                .append(\"g\")\n                                                .attr(\"id\", \"pointer\");\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n        selectCircle.append(\"circle\")\n            .attr(\"class\", c)\n            .attr(\"cx\", confirmedAreaEndX)\n            .attr(\"cy\", confirmedAreaEndY)\n        })\n\n        if(Object.keys(userPrediction).length == 0) {\n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        }\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        //hide \"draw your guess\" text\n                        svg\n                            .select(\"#drawing-instruction\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"0\")\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        //update totalData everytime predictionData is updated\n                        compiledData[compiledData.length - 1].data = predictionData;\n                        //console.log(compiledData)\n                        /*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/\n                        filteredData = predictionData.filter(predLine.defined())\n                        yourLine.datum(filteredData)\n                                .attr('d', predLine)\n                                .style(\"stroke\", color(legendString[2]))\n                                .style(\"stroke-width\", \"2px\")\n                        });\n                    })\n                    .on(\"end\", function () {\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"1\")\n                        var lastPredDate = filteredData[filteredData.length - 1].date;\n                        getDataPointsFromPath(predictionData, yourLine.node(), x, y, lastPredDate);\n                        console.log(predictionData);\n                        savePrediction(predictionData, category);\n                    });\n        \n        svg.call(drag)\n\n        const tooltipArea = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n                    .attr(\"id\", \"tooltip-line\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"0.5px\")\n                    .style(\"opacity\", \"0\");\n        //console.log(compiledData)\n        var mousePerLine = tooltipArea\n                                        .selectAll(\".mouse-per-line\")\n                                        .data(compiledData)\n                                        .enter()\n                                        .append(\"g\")\n                                        .attr(\"class\", \"mouse-per-line\");\n        \n        mousePerLine.append(\"circle\")\n                        .attr(\"r\", 2)\n                        .style(\"stroke\", function(d) {\n                            return color(d.name);\n                        })\n                        .style(\"fill\", \"none\")\n                        .style(\"stroke-width\", \"1px\")\n                        .style(\"opacity\", \"0\");\n        mousePerLine.append(\"text\")\n                    .attr(\"transform\", \"translate(10,3)\"); \n        var chart = tooltipArea\n                            .append(\"svg:rect\")\n                            .attr('width', width)\n                            .attr('height', height)\n                            .attr('fill', 'none')\n                            .attr('pointer-events', 'all')\n                            //.style(\"cursor\", \"pointer\")\n                            .on('mouseout', function() { // on mouse out hide line, circles and text\n                                d3.select(\"#tooltip-line\")\n                                .style(\"opacity\", \"0\");\n                                d3.selectAll(\".mouse-per-line circle\")\n                                .style(\"opacity\", \"0\");\n                                d3.selectAll(\".mouse-per-line text\")\n                                .style(\"opacity\", \"0\")\n                            })\n                            .on('mouseover', function() { // on mouse in show line, circles and text\n                                d3.select(\"#tooltip-line\")\n                                .style(\"opacity\", \"1\");\n                                d3.selectAll(\".mouse-per-line circle\")\n                                .style(\"opacity\", \"1\");\n                                d3.selectAll(\".mouse-per-line text\")\n                                .style(\"opacity\", \"1\")\n\n                            })\n                            .on('mousemove', function() { // mouse moving over canvas\n                                var mouse = d3.mouse(this);\n                                var xCoord = mouse[0];\n                                var yCoord = mouse[1];\n                                const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n                                if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n                                    chart.attr(\"cursor\", \"pointer\");\n                                }\n                                else {\n                                    chart.attr(\"cursor\", \"default\");\n                                }\n                                d3\n                                    .select(\"#tooltip-line\")\n                                    .attr(\"d\", function() {\n                                        var d = \"M\" + xCoord + \",\" + height;\n                                        d += \" \" + xCoord + \",\" + 0;\n                                        return d;\n                                    });\n                                d3\n                                    .selectAll(\".mouse-per-line\")\n                                    .attr(\"transform\", function(d, i) {\n                                        if (d.data.length == 0) {return;}\n                                        var date = x.invert(xCoord);\n                                        const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n                                        var a = null;\n                                        if (index > 0) {\n                                            a = d.data[index - 1];\n                                        }\n                                        const b = d.data[index];\n                                        //d = the data object corresponding to date and value pointed by the cursors\n                                        var data = null;\n                                        if (!a) {\n                                            data = b;\n                                        }\n                                        else if (!b) {\n                                            data = a;\n                                        }\n                                        else {\n                                            data = b && (date - a.date > b.date - date) ? b : a;\n                                        }\n                                        if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n                                            if (data.defined != 0) {\n                                                var element = d3.select(this)\n                                                                .select('text')\n                                                                    .style(\"opacity\", \"1\")\n                                                                    .text(Math.round(data.value));\n                                                element.select(\"circle\")\n                                                        .style(\"opacity\", \"1\");\n                                                return \"translate(\" + mouse[0] + \",\" + y(data.value)+\")\";\n                                            }\n                                        }\n                                        var element = d3.select(this)\n                                                        .select(\"text\")\n                                                        .style(\"opacity\", \"0\")\n                                        element\n                                                .select(\"circle\")\n                                                .style(\"opacity\", \"0\");\n                                        \n                                });\n                            })\n                            // .on('mousemove', function() { // mouse moving over canvas\n                            //     var mouse = d3.mouse(this);\n                            //     var xCoord = mouse[0];\n                            //     var yCoord = mouse[1];\n                            //     const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n                            //     if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n                            //         chart.attr(\"cursor\", \"pointer\");\n                            //     }\n                            //     else {\n                            //         chart.attr(\"cursor\", \"default\");\n                            //     }\n                            //     d3\n                            //         .select(\"#tooltip-line\")\n                            //         .attr(\"d\", function() {\n                            //             var d = \"M\" + xCoord + \",\" + height;\n                            //             d += \" \" + xCoord + \",\" + 0;\n                            //             return d;\n                            //         });\n                            //     d3\n                            //         .selectAll(\".mouse-per-line\")\n                            //         .attr(\"transform\", function(d, i) {\n                            //             if (d.data.length == 0) {return;}\n                            //             var date = x.invert(xCoord);\n                            //             const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n                            //             var a = null;\n                            //             if (index > 0) {\n                            //                 a = d.data[index - 1];\n                            //             }\n                            //             const b = d.data[index];\n                            //             //d = the data object corresponding to date and value pointed by the cursors\n                            //             var data = null;\n                            //             if (!a) {\n                            //                 data = b;\n                            //             }\n                            //             else if (!b) {\n                            //                 data = a;\n                            //             }\n                            //             else {\n                            //                 data = b && (date - a.date > b.date - date) ? b : a;\n                            //             }\n                            //             if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n                            //                 if (data.defined != 0) {\n                            //                     var element = d3.select(this)\n                            //                                     .select('text')\n                            //                                         .style(\"opacity\", \"1\")\n                            //                                         .text(Math.round(data.value));\n                            //                     element.select(\"circle\")\n                            //                             .style(\"opacity\", \"1\");\n                            //                     return \"translate(\" + mouse[0] + \",\" + y(data.value)+\")\";\n                            //                 }\n                            //             }\n                            //             var element = d3.select(this)\n                            //                             .select(\"text\")\n                            //                             .style(\"opacity\", \"0\")\n                            //             element\n                            //                     .select(\"circle\")\n                            //                     .style(\"opacity\", \"0\");\n                                        \n                            //     });\n                            // })\n\n        /////////////////////////////////////////////////////////////////////////////////////////////\n        const focusHeight = 100;\n        const contextMargin = 50;\n        var context = svg\n                            .append(\"g\")\n                                .attr(\"viewBox\", [0, 0, width, focusHeight])\n                                .attr(\"transform\", `translate(0,${height + contextMargin} )`)\n                                //.attr(\"width\", width + 100)\n                                //.attr(\"height\", height)\n                                .style(\"display\", \"block\")\n\n\n\n        /*const xAxis = (g, x, height) => g\n                                            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                            .call(d3.axisBottom(x))*/\n\n        var contextX = d3\n                            .scaleTime()\n                            .domain([confirmedStartDate, predEndDate])\n                            .range([0, width]);\n        \n        var contextXAxis = context\n                                    .append(\"g\")\n                                    .attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`)\n                                    .call(d3.axisBottom(contextX));\n        const brush = d3.brushX()\n                        .extent([[0, 0], [width, focusHeight - margin.bottom]])\n                        .on(\"brush\", brushed)\n                        .on(\"end\", brushended);\n\n        const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    \n        /*context.append(\"g\")\n                .call(xAxis, x, focusHeight);*/\n    \n        /*svg.append(\"path\")\n            .datum(confirmedData)\n            .attr(\"fill\", \"steelblue\")\n            .attr(\"d\", line(x, y.copy().range([focusHeight - margin.bottom, 4])));*/\n        function brushed() {\n            if (d3.event.selection) {\n                var extent = d3.event.selection;\n                //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                x.domain([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                xAxis\n                        //.transition()\n                        //.duration(1000)\n                        .call(d3.axisBottom(x))\n                var newX = x(confirmedData[confirmedData.length - 1].date);\n                newX = newX < 0 ? 0 : newX;\n                d3\n                    .select(\"#prediction-clip\")\n                    .select(\"rect\")\n                        .attr(\"width\", width - newX)\n                        .attr(\"x\", newX);\n\n                svg\n                    .selectAll(\".line\")\n                    //.transition()\n                    //.duration(1000)\n                    .attr('d', line)\n\n                svg\n                    .select(\"#your-line\")\n                    .attr(\"d\", predLine)\n                \n                //reposition draw your guess text and pointer\n                svg\n                    .select(\"#draw-guess\")\n                    .attr(\"x\", newX + (width - newX) / 2);\n                svg\n                    .select(\"#pointer\")\n                    .selectAll(\"circle\")\n                        .attr(\"cx\", newX);\n            }\n        }\n        \n        function brushended() {\n            if (!d3.event.selection) {\n                gb.call(brush.move, defaultSelection);\n            }\n\n        }\n        const gb = context\n                        .call(brush)\n                        .call(brush.move, defaultSelection);   \n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        var deleteButton = document.createElement(\"button\")\n        deleteButton.className = 'btn primary-btn'\n        deleteButton.id = 'delete-btn'\n        deleteButton.innerText = \"Reset\";\n        d3.select(\"#delete-btn\")\n        deleteButton.onclick = () => {\n            this.deletePrediction(category)\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            //update yourLine\n            var filtered = predictionData.filter(predLine.defined())\n            yourLine.datum(filtered)\n                    .attr('d', predLine)\n                    \n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        };\n        document.querySelector(\"body\").appendChild(deleteButton);\n        ////ADD TODAY LINE/////////////////////////////////////////////////////\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n\n    }\n        \n    render() {\n        return(<div>\n            <h2>US Daily Deaths</h2>\n            <p>Daily deaths is the best indicator of the progression of the pandemic.</p>\n            {/*<p>Current total: {this.confirmedData.value}</p>*/}\n            <div ref={this.chartRef}></div>\n            </div>);\n    }\n}\n\nexport default InteractiveChart;","import React, { Component } from 'react';\nimport InteractiveChart from '../../components/InteractiveChart';\nimport { cleanConfirmedData, organizeData } from '../../utils/data';\n\n/*function InteractiveCharts({ dataSet, orgs, userPrediction, confirmed }) {\n    return dataSet.map((data, index) => {\n      return (\n        <InteractiveChart forecast={data} org={orgs[index]} userPrediction={userPrediction} confirmed={confirmed} />\n       );\n    })\n  }*/\n\nclass InteractiveChartContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            forecast: null,\n            orgs: null,\n            confirmed: null,\n            userPrediction: null,\n            aggregate: null,\n            loginStatus: null\n        };\n    }\n\n    componentDidMount() {\n        fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n            const [results, orgs] = organizeData(data);\n            this.setState({ forecast: results, orgs });\n        });\n        fetch('/user-prediction?category=us_daily_deaths').then(res => res.json()).then(data => {\n            this.setState({ userPrediction: data });\n        });\n        fetch('/us-inc-deaths-confirmed-wk-avg').then(res => res.json()).then(data => {\n            this.setState({ confirmed: data });\n        });\n        fetch('/us-agg-inc-deaths').then(res => res.json()).then(data => {\n            this.setState({ aggregate: data });\n            console.log(data);\n        });\n        fetch('/login-status/').then(res => res.json()).then(data => {\n            this.setState({ loginStatus: data });\n        });\n    }\n    render() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate, loginStatus } = this.state;\n        if (!forecast || !orgs || !userPrediction || !confirmed || !aggregate || !loginStatus) return 'Loading...';\n\n        return (\n            <div className=\"chartContainer\">\n                <InteractiveChart\n                    forecast={forecast}\n                    orgs={orgs}\n                    userPrediction={userPrediction}\n                    confirmed={confirmed}\n                    aggregate={aggregate}\n                    loginStatus={loginStatus}\n                    //userStatus={userStatus}\n                />\n            </div>\n        );\n    }\n}\n\nexport default InteractiveChartContainer;","import React from \"react\";\nimport L from \"leaflet\";\nimport statesData from './us-states.json';\nimport countriesData from './countries.json';\n//import './map.css'\n\nconst style = {\n  width: \"100%\",\n  height: \"600px\"\n};\n\nconst mapStyle = (feature) => {\n  return ({\n    weight: 2,\n    opacity: 1,\n    color: \"white\",\n    dashArray: \"3\",\n    fillOpacity: 0.7,\n    fillColor: \"#FFEDA0\"\n\n  });\n}\n\nclass Mapportal extends React.Component {\n  componentDidMount() {\n    // create map\n    this.map = L.map(\"map\", {\n      center: [37.8, -96],\n      zoom: 4,\n      layers: [\n        L.tileLayer(\"https://api.mapbox.com/styles/v1/mapbox/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoicmFjaGVsb21ib2siLCJhIjoiY2tjODZ6c3UzMTh3ZTJyb2JndHN0dXhlOSJ9.h8aubFClamI3kiUsjIgNTg\",\n        {\n          maxZoom: 18,\n          attribution:\n            'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"http://mapbox.com\">Mapbox</a>',\n          id: \"dark-v10\"\n        })\n      ]\n    });\n\n    this.geojson = L.geoJson(statesData, {\n      style: mapStyle,\n      onEachFeature: this.onEachFeature\n    }).addTo(this.map);\n\n    this.countries = L.geoJson(countriesData, {\n\t\tstyle: mapStyle,\n\t\tonEachFeature: this.onEachFeature\n    }).addTo(this.map);\n    \n    var overlay = {\n\t\t\t\"Countries\": this.countries,\n\t\t\t\"States\" : this.geojson\n\t};\n  L.control.layers(overlay).addTo(this.map);\n\n\n    // add layer\n    this.layer = L.layerGroup().addTo(this.map);\n  }\n  onEachFeature = (feature, layer) => {\n\tlayer.bindTooltip(feature.properties.name.toString(),{noHide:true}).openTooltip();\n    layer.on({\n      mouseover: this.highlightFeature,\n      mouseout: this.resetHighlight\n    });\n    layer.on(\"click\",function(e){\n      // this gets the id for each country, and we can use that to redirect to different pages since each \n      // json layer has different ids. the states are 1-50, and the countries are their official code\n      window.alert(layer.feature.id);\n  });\n  }\n  highlightFeature = (e) => {\n    var layer = e.target;\n\n    layer.setStyle({\n      fillColor: \"#FFEDA0\",\n      weight: 5,\n      color: \"#666\",\n      dashArray: \"\",\n      fillOpacity: 0.7\n    });\n\n    if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n      layer.bringToFront();\n    }\n    //layer.bringToFront();\n\n  \n  }\n  resetHighlight = (event) => {\n\tthis.geojson.resetStyle(event.target);\n\tthis.countries.resetStyle(event.target);\n  }\n\n  render() {\n    return <div id=\"map\" style={style} />;\n  }\n}\n\nexport default Mapportal;\n","import React, { Component } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport ReactDOM from 'react-dom';\nimport './Login.css';\nimport { Redirect } from \"react-router\";\n\n\nclass Login extends React.Component{\n    constructor(props) {\n        super(props)\n        this.state = { username: '', password: '', loggedinstate: '', loginStatus: false }\n      }  \n      \n      componentDidMount(){\n        //this.isLoggedIn();\n        \n      }\n\n    saveLogin(username, password) {\n      return new Promise((resolve, reject) => {\n        fetch('/login/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"username\": username, \"password\": password}),\n        });\n        resolve();\n      })\n        \n    }\n\n    wasSucess = () => {\n      return new Promise((resolve, reject) => {\n        fetch('/login/',{ method: 'GET'})\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data)\n          this.setState({loginStatus: data['status']})\n          resolve(data);\n        });\n      })\n  }\n    \n\n  updateLoginState = () => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        fetch('/login-status/')\n        .then((response) => response.json())\n        .then((data) => {\n          this.setState({loginStatus: data['logged in']});\n          console.log(data['logged in']);\n          resolve(data['logged in']);\n        });\n      }, 200)\n    })\n\t\t\n}\n\n    handleChange(event) {\n      let name = event.target.name;\n      if (name == 'username'){\n        this.setState({ username: event.target.value})\n      }\n      if (name == 'password'){\n        this.setState({ password: event.target.value})\n      }\n  \n    }\n    \n    async handleSubmit(event) {\n      console.log(\"submitting\")\n        event.preventDefault()\n        await this.saveLogin(this.state.username, this.state.password)\n        /*await this.wasSucess().then(status => {\n          console.log(status);\n        });*/\n        await this.updateLoginState();\n      }\n\n\n\n    \n      render() {\n        if (this.state.loginStatus) {\n          //return <Redirect to=\"/\" />\n          window.location.href ='/'\n        }\n        return (\n          <form onSubmit={this.handleSubmit.bind(this)} className='form-group'>\n            <h1>Sign In</h1>\n            <label>Username</label>\n            <input\n              type=\"text\"\n              value={this.state.username}\n              onChange={this.handleChange.bind(this)}\n              name='username'\n            /><br></br>\n            <span>Password</span>\n            <input\n              type=\"password\"\n              value={this.state.password}\n              onChange={this.handleChange.bind(this)}\n              name='password'\n              required\n            />\n            \n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n        )\n      }\n}\n\nexport default Login;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Redirect } from \"react-router\";\n\n\nclass SignUp extends React.Component{\n    constructor(props) {\n        super(props)\n        this.state = { nam:'', email: '', username: '', password: '', loginStatus: false }\n      }\n\n    saveLogin(nam, email, username, password) {\n      return new Promise((resolve, reject) => {\n        fetch('/signup/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"name\": nam, \"email\": email, \"username\": username, \"password\": password}),\n        });\n        resolve();\n      })\n    }\n\n    handleChange(event) {\n      let name = event.target.name;\n      if (name == 'nam'){\n        this.setState({ nam: event.target.value})\n      }\n      if (name == 'email'){\n        this.setState({ email: event.target.value})\n      }\n      if (name == 'username'){\n        this.setState({ username: event.target.value})\n      }\n      if (name == 'password'){\n        this.setState({ password: event.target.value})\n      }\n\n    }\n\n    updateLoginState = () => {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          fetch('/login-status/')\n          .then((response) => response.json())\n          .then((data) => {\n            this.setState({loginStatus: data['logged in']});\n            console.log(data['logged in']);\n            resolve(data['logged in']);\n          });\n        }, 300)\n      })\n    }\n    \n    async handleSubmit(event) {\n      event.preventDefault()\n      await this.saveLogin(this.state.nam, this.state.email, this.state.username, this.state.password)\n      this.updateLoginState();\n      }\n    \n      render() {\n        if (this.state.loginStatus) {\n          //return <Redirect to=\"/\" />\n          window.location.href ='/'\n        }\n        return (\n          <form onSubmit={this.handleSubmit.bind(this)}>\n            <h1>Sign Up</h1>\n            <span>Name</span>\n            <input\n              type=\"text\"\n              value={this.state.nam}\n              onChange={this.handleChange.bind(this)}\n              name='nam'\n            />\n            <span>Email</span>\n            <input\n              type=\"text\"\n              value={this.state.email}\n              onChange={this.handleChange.bind(this)}\n              name='email'\n            />\n            <span>Username</span>\n            <input\n              type=\"text\"\n              value={this.state.username}\n              onChange={this.handleChange.bind(this)}\n              name='username'\n            />\n            <span>Password</span>\n            <input\n              type=\"text\"\n              value={this.state.password}\n              onChange={this.handleChange.bind(this)}\n              name='password'\n            />\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n        )\n      }\n}\n\nexport default SignUp;","import React from 'react';\nimport './App.css';\n//import '/node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom'\nimport Navbar from './components/Navbar';\nimport ChartContainer from './containers/ChartContainer';\nimport newDeathsContainer from './containers/newDeathsContainer';\nimport LandingPage from './pages/LandingPage';\nimport AboutPage from './pages/AboutPage';\nimport Leaderboard from './components/Leaderboard';\nimport MarketChart from './components/MarketChart';\nimport ProfilePage from './pages/ProfilePage';\nimport InteractiveChartContainer from './containers/InteractiveChartContainer';\nimport UserPredictionChartContainer from './containers/UserPredictionChartContainer';\nimport * as ROUTES from \"./constants/routes\";\nimport 'leaflet/dist/leaflet.css';\nimport Mapportal from './components/Mapportal';\nimport Login from './components/LogIn';\nimport SignUp from './components/SignUp';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path={ROUTES.LANDING} component={InteractiveChartContainer} />\n            <Route exact path={ROUTES.US_NATIONAL_CUM} component={ChartContainer} />\n            <Route exact path={ROUTES.US_NATIONAL_INC} component={newDeathsContainer} />\n            <Route exact path={ROUTES.MAP_PORTAL} component={Mapportal} />\n            <Route exact path={ROUTES.LEADERBOARD} component={Leaderboard} />\n            <Route exact path={ROUTES.MARKET} component={MarketChart} />\n            <Route exact path={ROUTES.PROFILE} component={ProfilePage} />\n            <Route exact path={ROUTES.SIGN_IN} component={Login} />\n            <Route exact path={ROUTES.SIGN_UP} component={SignUp} />\n            <Route exact path={ROUTES.ABOUT} component={AboutPage} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}