{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/LineChart/index.js\";\nimport React from 'react';\nimport Chart from 'chart.js';\nimport 'chartjs-plugin-dragdata';\nimport 'chartjs-plugin-zoom';\nimport PropTypes from 'prop-types';\nimport { cleanConfirmedData } from '../../utils/data';\n\nclass LineChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userPrediction: null\n    };\n    this.chartRef = React.createRef(); // create reference for chart in class\n  }\n\n  componentDidMount() {\n    this.renderChart();\n  }\n\n  savePrediction(model, data) {\n    fetch('/update/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"model\": model,\n        \"data\": data\n      })\n    });\n  }\n\n  renderChart() {\n    const {\n      data,\n      org,\n      userPrediction,\n      confirmed\n    } = this.props;\n    const model = org;\n    const confirmedResult = cleanConfirmedData(confirmed, Object.keys(data));\n    const savePrediction = this.savePrediction;\n    this.myChart = new Chart(this.chartRef.current, {\n      type: 'line',\n      data: {\n        labels: Object.keys(data),\n        datasets: [// Settings for user prediction graph\n        {\n          label: \"User's Prediciton\",\n          data: userPrediction[model].value,\n          backgroundColor: ['rgba(64, 64, 64, 0.2)'],\n          borderWidth: 1,\n          dragData: true,\n          // User's predictions are draggable\n          radius: 2.5\n        }, // Settings for graph of forecasted deaths\n        {\n          label: 'Estimated Deaths',\n          data: Object.values(data),\n          backgroundColor: ['rgba(255, 99, 130, 0.2)'],\n          borderWidth: 0.2,\n          dragData: false,\n          pointStyle: 'cross',\n          rotation: 45,\n          pointBorderColor: 'black'\n        }, // Settings for graph of confirmed deaths\n        {\n          label: 'Confirmed Deaths',\n          data: Object.values(confirmedResult),\n          backgroundColor: ['rgba(130, 99, 255, 0.2)'],\n          borderWidth: 0.2,\n          dragData: false,\n          pointStyle: 'cross',\n          rotation: 45,\n          pointBorderColor: 'black'\n        }]\n      },\n      options: {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        },\n        title: {\n          display: true,\n          text: this.props.org,\n          fontSize: 30\n        },\n        dragData: true,\n        dragDataRound: 1,\n        dragOptions: {\n          showTooltip: true\n        },\n        onDragStart: function (e) {// console.log(e)\n        },\n        onDrag: function (e, datasetIndex, index, value) {\n          e.target.style.cursor = 'grabbing';\n        },\n        onDragEnd: function (e, datasetIndex, index, value) {\n          e.target.style.cursor = 'default';\n          savePrediction(model, userPrediction[model]);\n        },\n        hover: {\n          onHover: function (e) {\n            const point = this.getElementAtEvent(e);\n            if (point.length) e.target.style.cursor = 'grab';else e.target.style.cursor = 'default';\n          }\n        },\n        responsive: true,\n        plugins: {\n          zoom: {\n            // Pan options\n            pan: {\n              enabled: true,\n              // Panning directions\n              mode: 'x'\n            },\n            // Zoom options\n            zoom: {\n              enabled: true,\n              // Zooming directions,\n              mode: 'x'\n            }\n          }\n        }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chart-container\",\n      style: {\n        position: \"relative\",\n        width: \"80vw\",\n        margin: \"0 10%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nLineChart.propTypes = {\n  data: PropTypes.object.isRequired,\n  org: PropTypes.string.isRequired,\n  userPrediction: PropTypes.object.isRequired,\n  confirmed: PropTypes.object.isRequired\n};\nexport default LineChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/LineChart/index.js"],"names":["React","Chart","PropTypes","cleanConfirmedData","LineChart","Component","constructor","props","state","userPrediction","chartRef","createRef","componentDidMount","renderChart","savePrediction","model","data","fetch","method","headers","body","JSON","stringify","org","confirmed","confirmedResult","Object","keys","myChart","current","type","labels","datasets","label","value","backgroundColor","borderWidth","dragData","radius","values","pointStyle","rotation","pointBorderColor","options","scales","yAxes","ticks","beginAtZero","title","display","text","fontSize","dragDataRound","dragOptions","showTooltip","onDragStart","e","onDrag","datasetIndex","index","target","style","cursor","onDragEnd","hover","onHover","point","getElementAtEvent","length","responsive","plugins","zoom","pan","enabled","mode","render","position","width","margin","propTypes","object","isRequired","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Chart from 'chart.js';\nimport 'chartjs-plugin-dragdata';\nimport 'chartjs-plugin-zoom';\nimport PropTypes from 'prop-types';\nimport { cleanConfirmedData } from '../../utils/data';\n\nclass LineChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { userPrediction: null };\n    this.chartRef = React.createRef(); // create reference for chart in class\n  }\n\n  componentDidMount() {\n    this.renderChart();\n  }\n\n  savePrediction(model, data) {\n    fetch('/update/',{\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\"model\": model, \"data\": data}),\n    });\n  }\n\n  renderChart() {\n    const { data, org, userPrediction, confirmed } = this.props;\n    const model = org;\n    const confirmedResult = cleanConfirmedData(confirmed, Object.keys(data));\n    const savePrediction = this.savePrediction;\n    \n    this.myChart = new Chart(this.chartRef.current, {\n      type: 'line',\n      data: {\n        labels: Object.keys(data),\n        datasets: [ // Settings for user prediction graph\n          {\n              label: \"User's Prediciton\",\n              data: userPrediction[model].value,\n              backgroundColor: [\n                'rgba(64, 64, 64, 0.2)',\n              ],\n              borderWidth: 1,\n              dragData: true, // User's predictions are draggable\n              radius: 2.5\n          },\n          // Settings for graph of forecasted deaths\n          {\n              label: 'Estimated Deaths',\n              data: Object.values(data),\n              backgroundColor: [\n                  'rgba(255, 99, 130, 0.2)',\n              ],\n              borderWidth: 0.2,\n              dragData: false,\n              pointStyle: 'cross',\n              rotation: 45,\n              pointBorderColor: 'black'\n          }, \n          // Settings for graph of confirmed deaths\n          {\n              label: 'Confirmed Deaths',\n              data: Object.values(confirmedResult),\n              backgroundColor: [\n                'rgba(130, 99, 255, 0.2)',\n              ],\n              borderWidth: 0.2,\n              dragData: false,\n              pointStyle: 'cross',\n              rotation: 45,\n              pointBorderColor: 'black'\n          }\n        ]\n      },\n      options: {\n          scales: {\n              yAxes: [{\n                  ticks: {\n                      beginAtZero: true\n                  }\n              }]\n          },\n          title: {\n            display: true,\n            text: this.props.org,\n            fontSize: 30\n          },\n          dragData: true,\n          dragDataRound: 1,\n          dragOptions: {\n            showTooltip: true\n          },\n          onDragStart: function(e) {\n            // console.log(e)\n          },\n          onDrag: function(e, datasetIndex, index, value) {\n            e.target.style.cursor = 'grabbing'\n          },\n          onDragEnd: function(e, datasetIndex, index, value) {\n            e.target.style.cursor = 'default';\n            savePrediction(model, userPrediction[model]);\n          },\n          hover: {\n            onHover: function(e) {\n              const point = this.getElementAtEvent(e)\n              if (point.length) e.target.style.cursor = 'grab'\n              else e.target.style.cursor = 'default'\n            }\n          },\n          responsive: true,\n          plugins: {\n            zoom: {\n              // Pan options\n              pan: {\n                enabled: true,\n                // Panning directions\n                mode: 'x',\n              },\n          \n              // Zoom options\n              zoom: {\n                enabled: true,\n                // Zooming directions,\n                mode: 'x',\n              }\n            }\n          }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"chart-container\" style={{position: \"relative\", width: \"80vw\", margin: \"0 10%\"}}>\n        <canvas ref={this.chartRef} />\n        <br></br>\n      </div>\n    );\n  }\n}\n\nLineChart.propTypes = {\n  data: PropTypes.object.isRequired,\n  org: PropTypes.string.isRequired,\n  userPrediction: PropTypes.object.isRequired,\n  confirmed: PropTypes.object.isRequired,\n};\n\nexport default LineChart;\n"]},"metadata":{},"sourceType":"module"}