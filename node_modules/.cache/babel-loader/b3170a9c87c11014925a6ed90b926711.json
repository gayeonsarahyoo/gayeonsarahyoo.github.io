{"ast":null,"code":"import * as d3 from 'd3';\nexport const cleanConfirmedData = (data, dates) => {\n  var result = {};\n\n  for (var i = 0; i < dates.length; i++) {\n    result[dates[i]] = data[dates[i]];\n  }\n\n  return result;\n};\nexport const organizeData = data => {\n  var orgs = Object.keys(data);\n  var results = [];\n\n  for (var i = 0; i < orgs.length; i++) {\n    var forecast = data[orgs[i]];\n    var dates = forecast.target_end_date;\n    var values = forecast.value;\n    var result = {};\n    dates.forEach((key, i) => result[key] = values[i]);\n    results.push(result);\n  }\n\n  return [results, orgs];\n};\n\nfunction addDays(date, days) {\n  var result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\nexport const getDates = () => {\n  var current = new Date(2020, 2, 28);\n  var end = new Date();\n  var dateArray = [];\n\n  while (current <= end) {\n    dateArray.push(new Date(current).toISOString().slice(0, 10));\n    current = addDays(current, 1);\n  }\n\n  return dateArray;\n};\nexport const clamp = (a, b, c) => {\n  return Math.max(a, Math.min(b, c));\n};\nexport const formatValue = value => {\n  return value.toLocaleString(\"en\", {\n    style: \"currency\",\n    currency: \"USD\"\n  });\n};\nexport const callout = (g, value) => {\n  if (!value) return g.style(\"display\", \"none\");\n  g.style(\"display\", null).style(\"pointer-events\", \"none\").style(\"font\", \"10px sans-serif\");\n  const path = g.selectAll(\"path\").data([null]).join(\"path\").attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n  const text = g.selectAll(\"text\").data([null]).join(\"text\").call(text => text.selectAll(\"tspan\").data((value + \"\").split(/\\n/)).join(\"tspan\").attr(\"x\", 0).attr(\"y\", (d, i) => `${i * 1.1}em`).style(\"font-weight\", (_, i) => i ? null : \"bold\").text(d => d));\n  const {\n    x,\n    y,\n    width: w,\n    height: h\n  } = text.node().getBBox();\n  text.attr(\"transform\", `translate(${-w / 2},${15 - y})`);\n  path.attr(\"d\", `M${-w / 2 - 10},5H-5l5,-5l5,5H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n};\nexport const sortDictByDate = data => {\n  var sortedDict = {};\n  const sortedDates = Object.keys(data).sort((a, b) => new Date(a) - new Date(b));\n  sortedDates.map(d => {\n    const dateObj = d3.timeParse(\"%Y-%m-%d\")(d);\n    sortedDict[dateObj] = data[d];\n  });\n  return sortedDict;\n}; //pass in list of string dates, return string dates y-m-d\n\nexport const sortStringDates = data => {\n  var sortedDates = data.sort((a, b) => new Date(a) - new Date(b));\n  sortedDates = sortedDates.map(d => d3.timeParse(\"%Y-%m-%d\")(d));\n  return sortedDates;\n};\nexport const getMostRecentPrediction = data => {\n  const sortedDates = Object.keys(data).sort((a, b) => new Date(b) - new Date(a));\n  const mostRecentDate = sortedDates[0];\n  console.log(mostRecentDate);\n  return data[mostRecentDate];\n};\nexport const reformatData = data => {\n  return Object.keys(data).map(key => ({\n    date: d3.timeParse(\"%Y-%m-%d\")(key),\n    value: data[key]\n  }));\n};\nexport const reformatPredData = data => {\n  return data.map(d => ({\n    date: d3.timeParse(\"%Y-%m-%d\")(d.date.substring(0, 10)),\n    value: d.value,\n    defined: d.defined\n  }));\n};\nexport const findYatX = (x, path) => {\n  if (x > path.getTotalLength()) {\n    return null;\n  }\n\n  const getXY = len => {\n    var point = path.getPointAtLength(len);\n    return [point.x, point.y];\n  };\n\n  var start = 0;\n  var end = path.getTotalLength();\n  var result = 0;\n\n  while (start < end) {\n    var mid = (start + end) / 2;\n    var currPoint = getXY(mid);\n    var currPointX = currPoint[0];\n\n    if (x < currPointX) {\n      end = mid - 0.01; //does it have to be 0.01?\n    } else if (x > currPointX) {\n      start = mid + 0.01;\n    } else {\n      console.log(currPointX);\n      result = currPointX;\n      break;\n    }\n  }\n\n  if (result == 0) {\n    console.log(start, end);\n    return getXY(start);\n  }\n\n  return result;\n};\nexport const findYatXE = (x, path, startX) => {\n  console.log(\"in\");\n\n  if (x > path.getTotalLength()) {\n    console.log(\"no more\");\n    return null;\n  }\n\n  const getXY = len => {\n    var point = path.getPointAtLength(len);\n    return [point.x, point.y, len];\n  };\n\n  var curlen = startX;\n\n  while (getXY(curlen)[0] < x) {\n    curlen += 0.01;\n  }\n\n  return getXY(curlen);\n}; //get daily data from d3 curve (after interpolation)\n\nexport const getDataPointsFromPath = (pathNode, xAxis, yAxis, startDate, endDate, lastPredDate) => {\n  var data = [];\n  var date = startDate;\n  var startX = 0;\n\n  while (true) {\n    console.log(date);\n    var x = xAxis(date);\n\n    if (+date >= +lastPredDate) {\n      console.log(\"too big\");\n      break;\n    }\n\n    const point = findYatXE(x, pathNode, startX);\n\n    if (!point) {\n      //null point -> break\n      console.log(\"out\");\n      break;\n    }\n\n    data.push({\n      date: date,\n      value: yAxis.invert(point[1]),\n      defined: true\n    });\n    date = d3.timeDay.offset(date, 1);\n    startX = point[2];\n  }\n\n  console.log(\"to be continued\");\n  console.log(date);\n\n  while (+date <= +endDate) {\n    console.log(date);\n    data.push({\n      date: date,\n      value: 0,\n      defined: 0\n    });\n    date = d3.timeDay.offset(date, 1);\n  }\n\n  console.log(\"done\");\n  return data;\n};","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/utils/data.js"],"names":["d3","cleanConfirmedData","data","dates","result","i","length","organizeData","orgs","Object","keys","results","forecast","target_end_date","values","value","forEach","key","push","addDays","date","days","Date","setDate","getDate","getDates","current","end","dateArray","toISOString","slice","clamp","a","b","c","Math","max","min","formatValue","toLocaleString","style","currency","callout","g","path","selectAll","join","attr","text","call","split","d","_","x","y","width","w","height","h","node","getBBox","sortDictByDate","sortedDict","sortedDates","sort","map","dateObj","timeParse","sortStringDates","getMostRecentPrediction","mostRecentDate","console","log","reformatData","reformatPredData","substring","defined","findYatX","getTotalLength","getXY","len","point","getPointAtLength","start","mid","currPoint","currPointX","findYatXE","startX","curlen","getDataPointsFromPath","pathNode","xAxis","yAxis","startDate","endDate","lastPredDate","invert","timeDay","offset"],"mappings":"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","sourcesContent":["import * as d3 from 'd3'\n\nexport const cleanConfirmedData = (data, dates) => {\n  var result = {};\n  for (var i = 0; i < dates.length; i++) {\n    result[dates[i]] = data[dates[i]];\n  }\n  return result;\n};\n\nexport const organizeData = (data) => {\n  var orgs = Object.keys(data);\n  var results = [];\n  for (var i = 0; i < orgs.length; i++) {\n    var forecast = data[orgs[i]];\n    var dates = forecast.target_end_date;\n    var values = forecast.value;\n\n    var result = {};\n    dates.forEach((key, i) => result[key] = values[i]);\n    results.push(result);\n  }\n\n  return [results, orgs];\n}\n\n\nfunction addDays(date, days) {\n  var result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n\nexport const getDates = () => {\n  var current = new Date(2020, 2, 28);\n  var end = new Date();\n  var dateArray = [];\n  while (current <= end) {\n      dateArray.push(new Date(current).toISOString().slice(0,10));\n      current = addDays(current, 1);\n  }\n  return dateArray;\n}\n\nexport const clamp = (a, b, c) => { \n  return Math.max(a, Math.min(b, c)) \n}\n\nexport const formatValue = (value) => {\n  return value.toLocaleString(\"en\", {\n    style: \"currency\",\n    currency: \"USD\"\n  });\n}\nexport const callout = (g, value) => {\n  if (!value) return g.style(\"display\", \"none\");\n\n  g\n      .style(\"display\", null)\n      .style(\"pointer-events\", \"none\")\n      .style(\"font\", \"10px sans-serif\");\n\n  const path = g.selectAll(\"path\")\n    .data([null])\n    .join(\"path\")\n      .attr(\"fill\", \"white\")\n      .attr(\"stroke\", \"black\");\n\n  const text = g.selectAll(\"text\")\n    .data([null])\n    .join(\"text\")\n    .call(text => text\n      .selectAll(\"tspan\")\n      .data((value + \"\").split(/\\n/))\n      .join(\"tspan\")\n        .attr(\"x\", 0)\n        .attr(\"y\", (d, i) => `${i * 1.1}em`)\n        .style(\"font-weight\", (_, i) => i ? null : \"bold\")\n        .text(d => d));\n\n  const {x, y, width: w, height: h} = text.node().getBBox();\n\n  text.attr(\"transform\", `translate(${-w / 2},${15 - y})`);\n  path.attr(\"d\", `M${-w / 2 - 10},5H-5l5,-5l5,5H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n}\n\nexport const sortDictByDate = (data) => {\n  var sortedDict = {};\n  const sortedDates = Object.keys(data).sort((a, b) => new Date(a) - new Date(b));\n  sortedDates.map(d => {\n    const dateObj = d3.timeParse(\"%Y-%m-%d\")(d);\n    sortedDict[dateObj] = data[d]\n  })\n  return sortedDict;\n}\n//pass in list of string dates, return string dates y-m-d\nexport const sortStringDates = (data) => {\n  var sortedDates = data.sort((a, b) => new Date(a) - new Date(b));\n  sortedDates = sortedDates.map(d => d3.timeParse(\"%Y-%m-%d\")(d));\n  return sortedDates;\n}\n\nexport const getMostRecentPrediction = (data) => {\n  const sortedDates = Object.keys(data).sort((a, b) => new Date(b) - new Date(a));\n  const mostRecentDate = sortedDates[0];\n  console.log(mostRecentDate);\n  return data[mostRecentDate]\n}\n\nexport const reformatData = (data) => {\n  return Object.keys(data).map(key => ({\n    date: d3.timeParse(\"%Y-%m-%d\")(key),\n    value: data[key]\n}));\n}\n\nexport const reformatPredData = (data) => {\n  return data.map(d => ({\n      date: d3.timeParse(\"%Y-%m-%d\")((d.date).substring(0,10)),\n      value: d.value,\n      defined: d.defined\n      })\n  );\n}\n\nexport const findYatX = (x, path) => {\n  if (x > path.getTotalLength()) {return null}\n  const getXY = (len) => {\n      var point = path.getPointAtLength(len);\n      return [point.x, point.y];\n  }\n  var start = 0;\n  var end = path.getTotalLength();\n  var result = 0;\n  while (start < end) { \n    var mid = (start + end) / 2;\n    var currPoint = getXY(mid);\n    var currPointX = currPoint[0];\n    if (x < currPointX) {\n      end = mid - 0.01; //does it have to be 0.01?\n    }\n    else if (x > currPointX) {\n      start = mid + 0.01;\n    }\n    else {\n      console.log(currPointX);\n      result = currPointX;\n      break;\n    }\n  }\n  if (result == 0) {\n    console.log(start, end);\n    return getXY(start);\n  }\n  return result;\n}\n\nexport const findYatXE = (x, path, startX) => {\n  console.log(\"in\")\n  if (x > path.getTotalLength()) {\n    console.log(\"no more\")\n    return null\n  }\n  const getXY = (len) => {\n      var point = path.getPointAtLength(len);\n      return [point.x, point.y, len];\n  }\n  var curlen = startX;\n  while (getXY(curlen)[0] < x) { \n    curlen += 0.01;\n  }\n  return getXY(curlen);\n}\n\n//get daily data from d3 curve (after interpolation)\nexport const getDataPointsFromPath = (pathNode, xAxis, yAxis, startDate, endDate, lastPredDate) => {\n  var data = [];\n  var date = startDate;\n  var startX = 0;\n  while (true) {\n    console.log(date);\n    var x = xAxis(date);\n    if (+date >= +lastPredDate) {\n      console.log(\"too big\")\n      break;\n    }\n    const point = findYatXE(x, pathNode, startX);\n    if(!point) {//null point -> break\n      console.log(\"out\")\n      break;\n    }\n    data.push({\n      date: date,\n      value: yAxis.invert(point[1]),\n      defined: true\n    })\n    date = d3.timeDay.offset(date, 1);\n    startX = point[2];\n  }\n  console.log(\"to be continued\");\n  console.log(date);\n  while (+date <= +endDate) {\n    console.log(date);\n    data.push({\n      date: date,\n      value: 0,\n      defined: 0\n    })\n    date = d3.timeDay.offset(date, 1);\n  }\n  console.log(\"done\");\n  return data;\n}"]},"metadata":{},"sourceType":"module"}