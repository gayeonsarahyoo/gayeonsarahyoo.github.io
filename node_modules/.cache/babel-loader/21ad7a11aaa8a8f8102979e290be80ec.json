{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './InteractiveChart.css';\nimport { clamp, findYatX, getAllDataPoints, getDataPointsFromPath, reformatData, reformatPredData, getMostRecentPrediction } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\nimport { rectangle } from 'leaflet';\n\nclass InteractiveChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      category: \"us_daily_deaths\"\n    };\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const loginStatus = this.props.loginStatus;\n\n    if (loginStatus['logged in']) {\n      this.renderChart();\n    } else {\n      this.renderChartUnregistered();\n    }\n  } //move to utils\n\n\n  savePrediction(data, category) {\n    fetch('/update/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"data\": data,\n        \"category\": category\n      })\n    });\n  }\n\n  deletePrediction(category) {\n    console.log(category);\n    fetch('/delete/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"category\": category\n      })\n    });\n    console.log(\"deleted\");\n  }\n\n  createDefaultPrediction(predStartDate, predEndDate) {\n    var defaultData = [];\n    var currDate = predStartDate; //var defined = true;\n    //var value = confirmedData[confirmedData.length - 1].value;\n    //create defaultPredictionData\n\n    while (+currDate <= +predEndDate) {\n      defaultData.push({\n        date: currDate,\n        value: 0,\n        defined: 0\n      });\n      currDate = d3.timeDay.offset(currDate, 1);\n    }\n\n    return defaultData;\n  }\n\n  appendModal() {\n    const signinRedirect = () => {\n      window.location.href = '/signin';\n    };\n\n    const signupRedirect = () => {\n      window.location.href = '/signup';\n    };\n\n    var modal = document.createElement(\"div\");\n    modal.id = \"modal\";\n    var modalContent = document.createElement(\"div\");\n    modalContent.id = \"modal-content\";\n    var text = document.createElement(\"p\");\n    text.innerText = \"Please log in to save your prediction.\";\n    var signinBtn = document.createElement(\"button\");\n    signinBtn.id = \"signin-btn\";\n    signinBtn.innerText = \"Sign In\";\n    signinBtn.onclick = signinRedirect;\n    var signupBtn = document.createElement(\"button\");\n    signupBtn.id = \"signup-btn\";\n    signupBtn.onclick = signupRedirect;\n    signupBtn.innerText = \"Sign Up\";\n    modalContent.appendChild(text);\n    modalContent.appendChild(signinBtn);\n    modalContent.appendChild(signupBtn);\n    modal.appendChild(modalContent);\n    this.chartRef.current.appendChild(modal);\n  }\n\n  renderChartUnregistered() {\n    const {\n      forecast,\n      orgs,\n      userPrediction,\n      confirmed,\n      aggregate\n    } = this.props;\n    var predictionData = []; //where we will store formatted userPrediction\n\n    var defaultPredictionData = [];\n    const savePrediction = this.savePrediction;\n    const createDefaultPrediction = this.createDefaultPrediction;\n    this.appendModal();\n    const category = this.state.category;\n    var compiledData = []; //set up margin, width, height of chart\n\n    const legendWidth = 180;\n    const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n\n    const contextHeight = 100;\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        width = 800 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    var svg = d3.select(this.chartRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right + legendWidth).attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight).append(\"g\").attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`); // add title\n\n    svg.append(\"text\").attr(\"x\", width / 2).attr(\"y\", -20).attr(\"text-anchor\", \"middle\").style(\"font-size\", \"16px\").style(\"text-decoration\", \"underline\").style(\"font-weight\", \"bold\").text(\"COVID-19 Forecasts of Daily Deaths in the US Over Time\");\n    const w = 710 - margin.left - margin.right;\n    const h = 360 - margin.top - margin.bottom; //Create X axis label   \n\n    svg.append(\"text\").attr(\"x\", w / 2 + margin.right).attr(\"y\", h + 4 * margin.bottom).style(\"text-anchor\", \"middle\").text(\"Date\"); //Create Y axis label\n\n    svg.append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 0 - margin.left).attr(\"x\", 0 - h / 2).attr(\"dy\", \"1em\").style(\"text-anchor\", \"middle\").text(\"Daily Deaths\"); //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n\n    var confirmedData = Object.keys(confirmed).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: confirmed[key]\n    }));\n    var forecastData = forecast.map(f => {\n      return Object.keys(f).map(key => ({\n        date: d3.timeParse(\"%Y-%m-%d\")(key),\n        value: f[key]\n      }));\n    });\n    var aggregateData = Object.keys(aggregate).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: aggregate[key]\n    })); //set other dates\n\n    const confirmedStartDate = confirmedData[4].date;\n    const predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n\n    const predLength = 155;\n    const predEndDate = d3.timeDay.offset(predStartDate, predLength); //get confirmedData starting from confirmedStartDate\n\n    confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate); //draw x-axis     \n\n    var x = d3.scaleTime().domain([confirmedStartDate, predEndDate]).range([0, width]); //.nice(); //rounds up/down the max and mind of x axis\n\n    var xAxis = svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); //find max val in confirmedData and forecastData to determine the max of y-axis\n\n    var confirmedMax = d3.max(confirmedData, function (d) {\n      return +d.value;\n    });\n    var forecastMax = 0;\n    forecastData.map(f => {\n      var currMax = d3.max(f, d => {\n        return d.value;\n      });\n      forecastMax = currMax > forecastMax ? currMax : forecastMax;\n    });\n    var yAxisMax = Math.max(confirmedMax, forecastMax); //draw y-axis\n\n    var y = d3.scaleLinear().domain([0, yAxisMax]).range([height, 0]).nice();\n    svg.append(\"g\").call(d3.axisLeft(y)); //list of data displayed in graph - for legend\n    //var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n\n    var legendString = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(orgs); //color function that assigns random colors to each data\n\n    var color = d3.scaleOrdinal().domain(legendString).range(d3.schemeTableau10); //draw legend\n\n    var legend = svg.append('g').attr(\"id\", \"legend\");\n    var size = 10;\n    const legendMarginL = 30;\n    legend.selectAll(\"rect\").data(legendString).enter().append(\"circle\").attr('cx', width + legendMarginL).attr(\"cy\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .attr(\"r\", 6) //.attr(\"width\", size)\n    //.attr(\"height\", size)\n    .style(\"fill\", function (d) {\n      return color(d);\n    });\n    legend.selectAll(\"labels\").data(legendString).enter().append(\"text\").attr(\"x\", width + 45).attr(\"y\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .style(\"fill\", function (d) {\n      return color(d);\n    }).text(function (d) {\n      return d;\n    }).attr(\"text-anchor\", \"left\").style(\"alignment-baseline\", \"middle\"); //create line generator for confirmed/forecast data and prediction data\n\n    var lineGenerator = d3.line() //.curve(d3.curveBasis);\n    .curve(d3.curveCatmullRom); //curve that goes through all data points\n\n    var predLineGenerator = d3.line().curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n    //d3.curveMonotoneX\n    //d3.curveBasis\n    //d3.curveCardinal\n    //function that draws curve\n\n    var line = lineGenerator.x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }); //area where the confirmed curve will be drawn\n\n    var mainClip = svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\", \"main-clip\").append(\"svg:rect\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", 0).attr(\"y\", 0); // Create the confirmed area variable\n\n    const mainArea = svg.append('g').attr(\"clip-path\", \"url(#main-clip)\"); //display confirmed data\n\n    var confirmedLine = mainArea.append(\"path\").attr(\"id\", \"confirmed\").attr(\"class\", \"line\").datum(confirmedData).attr('d', line).attr(\"stroke\", color(legendString[0])).style(\"stroke-width\", \"3px\");\n    var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n    var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value); //append clip-path for prediction curve\n\n    var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\", \"prediction-clip\").append(\"svg:rect\").attr(\"width\", width - confirmedAreaEndX).attr(\"height\", height).attr(\"x\", confirmedAreaEndX).attr(\"y\", 0);\n    const predictionArea = svg.append('g').attr(\"clip-path\", \"url(#prediction-clip)\"); //make sure aggregateData curve stems from confiremData curve\n\n    var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate); //check if predStartDate exists in AD\n\n    if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date == +predStartDate) {\n      aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n    } else {\n      aggregateData.splice(idxOfStartDate, 0, {\n        date: predStartDate,\n        value: confirmedData[confirmedData.length - 1].value\n      });\n    }\n\n    aggregateData = aggregateData.splice(idxOfStartDate, aggregateData.length); //display aggregate data\n\n    var aggregateLine = predictionArea.append(\"path\").attr(\"id\", \"aggregate\").attr(\"class\", \"line\").datum(aggregateData).attr('d', line).attr(\"stroke\", color(legendString[1])).style(\"stroke-width\", \"2px\"); //display forecast data\n\n    forecastData.map((f, index) => {\n      //make sure they all stem from the confirmed curve!\n      //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n      var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate); //check if predStartDate exists in f\n\n      if (f.length > 0 && +f[idxOfStartDate].date == +predStartDate) {\n        f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n      } else {\n        //add data point to forecastData array\n        f.splice(idxOfStartDate, 0, {\n          date: predStartDate,\n          value: confirmedData[confirmedData.length - 1].value\n        });\n        f = f.slice(idxOfStartDate, f.length);\n      }\n\n      forecastData[index] = f;\n      predictionArea.append(\"path\").attr(\"class\", \"forecast line\").attr(\"id\", orgs[index]).style(\"stroke\", color(orgs[index])).datum(f).attr(\"d\", line);\n    });\n    var lines = document.getElementsByClassName('line'); //function that generates the prediction curve\n\n    var predLine = predLineGenerator.defined(d => d.defined).x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }); //append path for prediction data\n\n    var yourLine = predictionArea.append(\"path\").attr(\"id\", \"your-line\"); //variables used to initialize user prediction data if it doesn't exist in the db\n\n    var currDate = predStartDate;\n    var defined = true;\n    var value = confirmedData[confirmedData.length - 1].value;\n    const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n\n    predictionData = createDefaultPrediction(predStartDate, predEndDate);\n    predictionData[0].value = confirmedLastVal;\n    predictionData[0].defined = true;\n    var filteredData = null; //var totalData = confirmedData.concat(predictionData);\n    //!!    //add forecast data to compiledData\n\n    const forecastPaths = document.querySelectorAll(\".forecast\");\n    const confirmedPath = document.querySelector(\"#confirmed\");\n    const aggregatePath = document.querySelector(\"#aggregate\");\n    console.log(aggregatePath);\n    console.log(forecastPaths);\n    console.log(orgs);\n    orgs.map((o, index) => {\n      var lastDate = forecastData[index][forecastData[index].length - 1].date;\n      forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, lastDate);\n      compiledData.push({\n        name: o,\n        data: forecastData[index]\n      });\n    });\n    confirmedData = getAllDataPoints(confirmedPath, x, y, confirmedStartDate, predStartDate);\n    compiledData.push({\n      name: \"Daily Confirmed Deaths\",\n      data: confirmedData\n    });\n    var lastDate = aggregateData[aggregateData.length - 1].date;\n    aggregateData = getAllDataPoints(aggregatePath, x, y, aggregateData[0].date, lastDate);\n    console.log(aggregateData);\n    compiledData.push({\n      name: \"Aggregate Forecast\",\n      data: aggregateData\n    });\n    compiledData.push({\n      name: \"User Prediction\",\n      data: predictionData\n    }); //join data to yourLine\n\n    filteredData = predictionData.filter(predLine.defined());\n    yourLine.datum(filteredData).attr('d', predLine).style(\"stroke\", color(legendString[2])).style(\"stroke-width\", \"2px\"); //append new rect  \n\n    const mouseArea = svg.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"none\").attr(\"id\", \"mouse-area\").style(\"pointer-events\", \"visible\"); //append click area rect\n\n    var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n\n    var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n\n    /*svg.append(\"rect\")\n       .attr(\"id\", \"click-area\")\n       .attr(\"width\", clickAreaWidth)\n       .attr(\"height\",height)\n       .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n       .attr(\"fill\", \"none\")\n       .style(\"pointer-events\",\"visible\");*/\n    //var clickArea = d3.select(\"#click-area\");\n    //append draw your guess text\n\n    const drawingInstruction = svg.append(\"g\").attr(\"id\", \"drawing-instruction\").style(\"opacity\", \"1\");\n    drawingInstruction.append(\"text\").attr(\"id\", \"draw-guess\").attr(\"x\", confirmedAreaEndX + (width - confirmedAreaEndX) / 2).attr(\"y\", height - 100).attr(\"text-anchor\", \"middle\").text(\"Draw your guess\").style(\"font-size\", \"16px\"); //append circle at the end of confirmed curve\n\n    var selectCircle = drawingInstruction.append(\"g\").attr(\"id\", \"pointer\");\n    var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n    pointerCircles.map(c => {\n      selectCircle.append(\"circle\").attr(\"class\", c).attr(\"cx\", confirmedAreaEndX).attr(\"cy\", confirmedAreaEndY);\n    });\n    var drag = d3.drag().on(\"drag\", function () {\n      //hide \"draw your guess\" text\n      svg.select(\"#drawing-instruction\").style(\"opacity\", \"0\");\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"0\");\n      var pos = d3.mouse(this);\n      var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n      var value = clamp(0, yAxisMax, y.invert(pos[1]));\n      predictionData.forEach(function (d) {\n        if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)) {\n          d.value = value;\n          d.defined = true;\n        }\n\n        predictionData[0].value = confirmedLastVal; //make sure the prediction curve is always connected to the confirmed curve\n        //update totalData everytime predictionData is updated\n\n        compiledData[compiledData.length - 1].data = predictionData; //console.log(compiledData)\n\n        /*yourLine.datum(predictionData)\n                .attr('d', predLine)*/\n\n        var filteredData = predictionData.filter(predLine.defined());\n        yourLine.datum(filteredData).attr('d', predLine).style(\"stroke\", color(legendString[2])).style(\"stroke-width\", \"2px\");\n      });\n    }).on(\"end\", function () {\n      d3.select(\"#modal\").style(\"display\", \"block\");\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"1\");\n    });\n    svg.call(drag);\n    var modal = document.getElementById(\"modal\");\n\n    window.onclick = function (event) {\n      if (event.target == modal) {\n        modal.style.display = \"none\";\n      }\n    }; //finds the datapoint closest to the mouse (along x)\n\n    /*var bisect = () => {\n        const bisectDate = d3.bisector(d => d.date).left;\n        return mx => {\n            const date = x.invert(mx);\n            const index = bisectDate(totalData, date, 1);\n            const a = totalData[index - 1];\n            const b = totalData[index];\n            return b && (date - a.date > b.date - date) ? b : a;\n        };\n    }*/\n\n\n    const tooltipArea = svg.append(\"g\").attr(\"class\", \"tooltip\");\n    tooltipArea.append(\"path\") //vertical line\n    .attr(\"id\", \"tooltip-line\").style(\"stroke\", \"black\").style(\"stroke-width\", \"0.5px\").style(\"opacity\", \"0\"); //console.log(compiledData)\n\n    var mousePerLine = tooltipArea.selectAll(\".mouse-per-line\").data(compiledData).enter().append(\"g\").attr(\"class\", \"mouse-per-line\");\n    mousePerLine.append(\"circle\").attr(\"r\", 2).style(\"stroke\", function (d) {\n      return color(d.name);\n    }).style(\"fill\", \"none\").style(\"stroke-width\", \"1px\").style(\"opacity\", \"0\");\n    mousePerLine.append(\"text\").attr(\"transform\", \"translate(10,3)\");\n    var chart = tooltipArea.append(\"svg:rect\").attr('width', width).attr('height', height).attr('fill', 'none').attr('pointer-events', 'all') //.style(\"cursor\", \"pointer\")\n    .on('mouseout', function () {\n      // on mouse out hide line, circles and text\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"0\");\n    }).on('mouseover', function () {\n      // on mouse in show line, circles and text\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"1\");\n    }).on('mousemove', function () {\n      // mouse moving over canvas\n      var mouse = d3.mouse(this);\n      var xCoord = mouse[0];\n      var yCoord = mouse[1];\n      const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date);\n\n      if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n        chart.attr(\"cursor\", \"pointer\");\n      } else {\n        chart.attr(\"cursor\", \"default\");\n      }\n\n      d3.select(\"#tooltip-line\").attr(\"d\", function () {\n        var d = \"M\" + xCoord + \",\" + height;\n        d += \" \" + xCoord + \",\" + 0;\n        return d;\n      });\n      d3.selectAll(\".mouse-per-line\").attr(\"transform\", function (d, i) {\n        if (d.data.length == 0) {\n          return;\n        }\n\n        var date = x.invert(xCoord);\n        const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n        var a = null;\n\n        if (index > 0) {\n          a = d.data[index - 1];\n        }\n\n        const b = d.data[index]; //d = the data object corresponding to date and value pointed by the cursors\n\n        var data = null;\n\n        if (!a) {\n          data = b;\n        } else if (!b) {\n          data = a;\n        } else {\n          data = b && date - a.date > b.date - date ? b : a;\n        }\n\n        if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n          if (data.defined != 0) {\n            var element = d3.select(this).select('text').style(\"opacity\", \"1\").text(Math.round(data.value));\n            element.select(\"circle\").style(\"opacity\", \"1\");\n            return \"translate(\" + mouse[0] + \",\" + y(data.value) + \")\";\n          }\n        }\n\n        var element = d3.select(this).select(\"text\").style(\"opacity\", \"0\");\n        element.select(\"circle\").style(\"opacity\", \"0\");\n      });\n    }); /////////////////////////////////////////////////////////////////////////////////////////////\n\n    const focusHeight = 100;\n    const contextMargin = 50;\n    var context = svg.append(\"g\").attr(\"viewBox\", [0, 0, width, focusHeight]).attr(\"transform\", `translate(0,${height + contextMargin} )`) //.attr(\"width\", width + 100)\n    //.attr(\"height\", height)\n    .style(\"display\", \"block\");\n    /*const xAxis = (g, x, height) => g\n                                        .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                        .call(d3.axisBottom(x))*/\n\n    var contextX = d3.scaleTime().domain([confirmedStartDate, predEndDate]).range([0, width]);\n    var contextXAxis = context.append(\"g\").attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`).call(d3.axisBottom(contextX));\n    const brush = d3.brushX().extent([[0, 0], [width, focusHeight - margin.bottom]]).on(\"brush\", brushed).on(\"end\", brushended);\n    const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    /*context.append(\"g\")\n            .call(xAxis, x, focusHeight);*/\n\n    /*svg.append(\"path\")\n        .datum(confirmedData)\n        .attr(\"fill\", \"steelblue\")\n        .attr(\"d\", line(x, y.copy().range([focusHeight - margin.bottom, 4])));*/\n\n    function brushed() {\n      if (d3.event.selection) {\n        var extent = d3.event.selection; //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n\n        x.domain([contextX.invert(extent[0]), contextX.invert(extent[1])]);\n        xAxis //.transition()\n        //.duration(1000)\n        .call(d3.axisBottom(x));\n        var newX = x(confirmedData[confirmedData.length - 1].date);\n        newX = newX < 0 ? 0 : newX;\n        d3.select(\"#prediction-clip\").select(\"rect\").attr(\"width\", width - newX).attr(\"x\", newX);\n        svg.selectAll(\".line\") //.transition()\n        //.duration(1000)\n        .attr('d', line);\n        svg.select(\"#your-line\").attr(\"d\", predLine); //reposition draw your guess text and pointer\n\n        svg.select(\"#draw-guess\").attr(\"x\", newX + (width - newX) / 2);\n        svg.select(\"#pointer\").selectAll(\"circle\").attr(\"cx\", newX);\n      }\n    }\n\n    function brushended() {\n      if (!d3.event.selection) {\n        gb.call(brush.move, defaultSelection);\n      }\n    }\n\n    const gb = context.call(brush).call(brush.move, defaultSelection); ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    var deleteButton = document.createElement(\"button\");\n    deleteButton.className = 'btn primary-btn';\n    deleteButton.id = 'delete-btn';\n    deleteButton.innerText = \"Reset\";\n    d3.select(\"#delete-btn\");\n\n    deleteButton.onclick = () => {\n      this.deletePrediction(category);\n      predictionData = createDefaultPrediction(predStartDate, predEndDate);\n      predictionData[0].value = confirmedLastVal;\n      predictionData[0].defined = true; //update yourLine\n\n      var filtered = predictionData.filter(predLine.defined());\n      yourLine.datum(filtered).attr('d', predLine);\n      svg.select(\"#drawing-instruction\").style(\"opacity\", \"1\");\n    };\n\n    document.querySelector(\"body\").appendChild(deleteButton); ////ADD TODAY LINE/////////////////////////////////////////////////////\n\n    const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0, 10));\n    var todayMarker = svg.append(\"g\").attr(\"id\", \"today-marker\");\n    todayMarker.append(\"line\").attr(\"id\", \"today-line\").attr(\"x1\", x(today)).attr(\"x2\", x(today)).attr(\"y1\", 0).attr(\"y2\", height).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1).attr(\"stroke-dasharray\", \"8, 8\");\n    todayMarker.append(\"text\").attr(\"id\", \"today-text\").attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`).text(\"Today\").style(\"text-anchor\", \"end\");\n  }\n\n  renderChart() {\n    const {\n      forecast,\n      orgs,\n      userPrediction,\n      confirmed,\n      aggregate\n    } = this.props;\n    var predictionData = []; //where we will store formatted userPrediction\n\n    var defaultPredictionData = [];\n    const savePrediction = this.savePrediction;\n    const createDefaultPrediction = this.createDefaultPrediction;\n    const category = this.state.category;\n    var compiledData = []; //set up margin, width, height of chart\n\n    const legendWidth = 180;\n    const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n\n    const contextHeight = 100;\n    const titleHeight = 20;\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        width = 800 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    var svg = d3.select(this.chartRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right + legendWidth).attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight).append(\"g\").attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`); // add title\n\n    svg.append(\"text\").attr(\"x\", width / 2).attr(\"y\", -20).attr(\"text-anchor\", \"middle\").style(\"font-size\", \"16px\").style(\"text-decoration\", \"underline\").style(\"font-weight\", \"bold\").text(\"COVID-19 Forecasts of Daily Deaths in the US Over Time\");\n    const w = 710 - margin.left - margin.right;\n    const h = 360 - margin.top - margin.bottom; //Create X axis label   \n\n    svg.append(\"text\").attr(\"x\", w / 2 + margin.right).attr(\"y\", h + 4 * margin.bottom).style(\"text-anchor\", \"middle\").text(\"Date\"); //Create Y axis label\n\n    svg.append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 0 - margin.left).attr(\"x\", 0 - h / 2).attr(\"dy\", \"1em\").style(\"text-anchor\", \"middle\").text(\"Daily Deaths\"); //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n\n    var confirmedData = reformatData(confirmed);\n    var forecastData = forecast.map(f => {\n      return reformatData(f);\n    });\n    var aggregateData = reformatData(aggregate); //store userPrediction in predictionData if it exists\n\n    if (Object.keys(userPrediction).length > 0) {\n      const mostRecentPred = getMostRecentPrediction(userPrediction);\n      predictionData = reformatPredData(mostRecentPred);\n    } //set other dates\n\n\n    const confirmedStartDate = confirmedData[4].date;\n    const predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n\n    const predLength = 155;\n    const predEndDate = d3.timeDay.offset(predStartDate, predLength); //get confirmedData starting from confirmedStartDate\n\n    confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate); //draw x-axis     \n\n    var x = d3.scaleTime().domain([confirmedStartDate, predEndDate]).range([0, width]); //.nice(); //rounds up/down the max and mind of x axis\n\n    var xAxis = svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); //find max val in confirmedData and forecastData to determine the max of y-axis\n\n    var confirmedMax = d3.max(confirmedData, function (d) {\n      return +d.value;\n    });\n    var forecastMax = 0;\n    forecastData.map(f => {\n      var currMax = d3.max(f, d => {\n        return d.value;\n      });\n      forecastMax = currMax > forecastMax ? currMax : forecastMax;\n    });\n    var yAxisMax = Math.max(confirmedMax, forecastMax); //draw y-axis\n\n    var y = d3.scaleLinear().domain([0, yAxisMax]).range([height, 0]).nice();\n    svg.append(\"g\").call(d3.axisLeft(y)); //list of data displayed in graph - for legend\n    //var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n\n    var legendString = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(orgs); //color function that assigns random colors to each data\n\n    var color = d3.scaleOrdinal().domain(legendString).range(d3.schemeTableau10); //draw legend\n\n    var legend = svg.append('g').attr(\"id\", \"legend\");\n    var size = 10;\n    const legendMarginL = 30;\n    legend.selectAll(\"rect\").data(legendString).enter().append(\"circle\").attr('cx', width + legendMarginL).attr(\"cy\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .attr(\"r\", 6) //.attr(\"width\", size)\n    //.attr(\"height\", size)\n    .style(\"fill\", function (d) {\n      return color(d);\n    });\n    legend.selectAll(\"labels\").data(legendString).enter().append(\"text\").attr(\"x\", width + 45).attr(\"y\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .style(\"fill\", function (d) {\n      return color(d);\n    }).text(function (d) {\n      return d;\n    }).attr(\"text-anchor\", \"left\").style(\"alignment-baseline\", \"middle\"); //create line generator for confirmed/forecast data and prediction data\n\n    var lineGenerator = d3.line() //.curve(d3.curveBasis);\n    .curve(d3.curveCatmullRom); //curve that goes through all data points\n\n    var predLineGenerator = d3.line().curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n    //d3.curveMonotoneX\n    //d3.curveBasis\n    //d3.curveCardinal\n    //function that draws curve\n\n    var line = lineGenerator.x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }); //area where the confirmed curve will be drawn\n\n    var mainClip = svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\", \"main-clip\").append(\"svg:rect\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", 0).attr(\"y\", 0); // Create the confirmed area variable\n\n    const mainArea = svg.append('g').attr(\"clip-path\", \"url(#main-clip)\"); //display confirmed data\n\n    var confirmedLine = mainArea.append(\"path\").attr(\"id\", \"confirmed\").attr(\"class\", \"line\").datum(confirmedData).attr('d', line).attr(\"stroke\", color(legendString[0])).style(\"stroke-width\", \"3px\");\n    var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n    var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value); //append clip-path for prediction curve\n\n    var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\", \"prediction-clip\").append(\"svg:rect\").attr(\"id\", \"prediction-rect\").attr(\"width\", width - confirmedAreaEndX).attr(\"height\", height).attr(\"x\", confirmedAreaEndX).attr(\"y\", 0);\n    const predictionArea = svg.append('g').attr(\"clip-path\", \"url(#prediction-clip)\"); //make sure aggregateData curve stems from confiremData curve\n\n    var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate); //check if predStartDate exists in AD\n\n    if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date == +predStartDate) {\n      aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n    } else {\n      aggregateData.splice(idxOfStartDate, 0, {\n        date: predStartDate,\n        value: confirmedData[confirmedData.length - 1].value\n      });\n    }\n\n    aggregateData = aggregateData.splice(idxOfStartDate, aggregateData.length); //display aggregate data\n\n    var aggregateLine = predictionArea.append(\"path\").attr(\"id\", \"aggregate\").attr(\"class\", \"line\").datum(aggregateData).attr('d', line).attr(\"stroke\", color(legendString[1])).style(\"stroke-width\", \"2px\"); //display forecast data\n\n    forecastData.map((f, index) => {\n      //make sure they all stem from the confirmed curve!\n      //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n      var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate); //check if predStartDate exists in f\n\n      if (f.length > 0 && +f[idxOfStartDate].date == +predStartDate) {\n        f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n      } else {\n        //add data point to forecastData array\n        f.splice(idxOfStartDate, 0, {\n          date: predStartDate,\n          value: confirmedData[confirmedData.length - 1].value\n        });\n        f = f.slice(idxOfStartDate, f.length);\n      }\n\n      forecastData[index] = f;\n      predictionArea.append(\"path\").attr(\"class\", \"forecast line\").attr(\"id\", orgs[index]).style(\"stroke\", color(orgs[index])).datum(f).attr(\"d\", line);\n    });\n    var lines = document.getElementsByClassName('line'); //function that generates the prediction curve\n\n    var predLine = predLineGenerator.defined(d => d.defined).x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }); //append path for prediction data\n\n    var yourLine = predictionArea.append(\"path\").attr(\"id\", \"your-line\"); //variables used to initialize user prediction data if it doesn't exist in the db\n\n    var currDate = predStartDate;\n    var defined = true;\n    var value = confirmedData[confirmedData.length - 1].value;\n    const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n    //check if userPrediction already exists in db\n\n    if (Object.keys(userPrediction).length > 0) {\n      predictionData = predictionData.filter(d => +d.date >= +predStartDate && +d.date <= +predEndDate);\n      predictionData[0].value = confirmedLastVal;\n      predictionData[0].defined = true;\n      currDate = d3.timeDay.offset(predictionData[predictionData.length - 1].date, 1);\n      predictionData.concat(createDefaultPrediction(currDate, predEndDate));\n    } else {\n      predictionData = createDefaultPrediction(predStartDate, predEndDate);\n      predictionData[0].value = confirmedLastVal;\n      predictionData[0].defined = true;\n    }\n\n    var filteredData = null; //!!    //add forecast data to compiledData\n    //get complete dataset from paths\n\n    const forecastPaths = document.querySelectorAll(\".forecast\");\n    const confirmedPath = document.querySelector(\"#confirmed\");\n    const aggregatePath = document.querySelector(\"#aggregate\");\n    console.log(aggregatePath);\n    console.log(forecastPaths);\n    console.log(orgs);\n    orgs.map((o, index) => {\n      var lastDate = forecastData[index][forecastData[index].length - 1].date;\n      forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, lastDate);\n      compiledData.push({\n        name: o,\n        data: forecastData[index]\n      });\n    });\n    confirmedData = getAllDataPoints(confirmedPath, x, y, confirmedStartDate, predStartDate);\n    compiledData.push({\n      name: \"Daily Confirmed Deaths\",\n      data: confirmedData\n    });\n    var lastDate = aggregateData[aggregateData.length - 1].date;\n    console.log(aggregateData);\n    console.log(lastDate);\n    aggregateData = getAllDataPoints(aggregatePath, x, y, aggregateData[0].date, lastDate);\n    console.log(aggregateData);\n    compiledData.push({\n      name: \"Aggregate Forecast\",\n      data: aggregateData\n    });\n    compiledData.push({\n      name: \"User Prediction\",\n      data: predictionData\n    }); //join data to yourLine\n\n    filteredData = predictionData.filter(predLine.defined());\n    yourLine.datum(filteredData).attr('d', predLine).style(\"stroke\", color(legendString[2])).style(\"stroke-width\", \"2px\"); //append new rect  \n\n    const mouseArea = svg.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"none\").attr(\"id\", \"mouse-area\").style(\"pointer-events\", \"visible\"); //append click area rect\n\n    var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n\n    var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n\n    svg.append(\"rect\").attr(\"id\", \"click-area\").attr(\"width\", clickAreaWidth).attr(\"height\", height).attr(\"transform\", \"translate (\" + confirmedAreaWidth + \" 0)\").attr(\"fill\", \"none\").style(\"pointer-events\", \"visible\"); //var clickArea = d3.select(\"#click-area\");\n    //append draw your guess text\n\n    const drawingInstruction = svg.append(\"g\").attr(\"id\", \"drawing-instruction\").style(\"opacity\", \"0\");\n    drawingInstruction.append(\"text\").attr(\"id\", \"draw-guess\").attr(\"x\", confirmedAreaEndX + (width - confirmedAreaEndX) / 2).attr(\"y\", height - 100).attr(\"text-anchor\", \"middle\").text(\"Draw your guess\").style(\"font-size\", \"16px\"); //append circle at the end of confirmed curve\n\n    var selectCircle = drawingInstruction.append(\"g\").attr(\"id\", \"pointer\");\n    var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n    pointerCircles.map(c => {\n      selectCircle.append(\"circle\").attr(\"class\", c).attr(\"cx\", confirmedAreaEndX).attr(\"cy\", confirmedAreaEndY);\n    });\n\n    if (Object.keys(userPrediction).length == 0) {\n      svg.select(\"#drawing-instruction\").style(\"opacity\", \"1\");\n    }\n\n    var drag = d3.drag().on(\"drag\", function () {\n      //hide \"draw your guess\" text\n      svg.select(\"#drawing-instruction\").style(\"opacity\", \"0\");\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"0\");\n      var pos = d3.mouse(this);\n      var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n      var value = clamp(0, yAxisMax, y.invert(pos[1]));\n      predictionData.forEach(function (d) {\n        if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)) {\n          d.value = value;\n          d.defined = true;\n        }\n\n        predictionData[0].value = confirmedLastVal; //make sure the prediction curve is always connected to the confirmed curve\n        //update totalData everytime predictionData is updated\n\n        compiledData[compiledData.length - 1].data = predictionData; //console.log(compiledData)\n\n        /*yourLine.datum(predictionData)\n                .attr('d', predLine)*/\n\n        filteredData = predictionData.filter(predLine.defined());\n        yourLine.datum(filteredData).attr('d', predLine).style(\"stroke\", color(legendString[2])).style(\"stroke-width\", \"2px\");\n      });\n    }).on(\"end\", function () {\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"1\");\n      var lastPredDate = filteredData[filteredData.length - 1].date;\n      getDataPointsFromPath(predictionData, yourLine.node(), x, y, lastPredDate);\n      console.log(predictionData);\n      savePrediction(predictionData, category);\n    });\n    svg.call(drag);\n    const tooltipArea = svg.append(\"g\").attr(\"class\", \"tooltip\");\n    tooltipArea.append(\"path\") //vertical line\n    .attr(\"id\", \"tooltip-line\").style(\"stroke\", \"black\").style(\"stroke-width\", \"0.5px\").style(\"opacity\", \"0\"); //console.log(compiledData)\n\n    var mousePerLine = tooltipArea.selectAll(\".mouse-per-line\").data(compiledData).enter().append(\"g\").attr(\"class\", \"mouse-per-line\");\n    mousePerLine.append(\"circle\").attr(\"r\", 2).style(\"stroke\", function (d) {\n      return color(d.name);\n    }).style(\"fill\", \"none\").style(\"stroke-width\", \"1px\").style(\"opacity\", \"0\");\n    mousePerLine.append(\"text\").attr(\"transform\", \"translate(10,3)\");\n    var chart = tooltipArea.append(\"svg:rect\").attr('width', width).attr('height', height).attr('fill', 'none').attr('pointer-events', 'all') //.style(\"cursor\", \"pointer\")\n    .on('mouseout', function () {\n      // on mouse out hide line, circles and text\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"0\");\n    }).on('mouseover', function () {\n      // on mouse in show line, circles and text\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"1\");\n    }).on('mousemove', function () {\n      // mouse moving over canvas\n      var mouse = d3.mouse(this);\n      var xCoord = mouse[0];\n      var yCoord = mouse[1];\n      const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date);\n\n      if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n        chart.attr(\"cursor\", \"pointer\");\n      } else {\n        chart.attr(\"cursor\", \"default\");\n      }\n\n      d3.select(\"#tooltip-line\").attr(\"d\", function () {\n        var d = \"M\" + xCoord + \",\" + height;\n        d += \" \" + xCoord + \",\" + 0;\n        return d;\n      });\n      d3.selectAll(\".mouse-per-line\").attr(\"transform\", function (d, i) {\n        if (d.data.length == 0) {\n          return;\n        }\n\n        var date = x.invert(xCoord);\n        const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n        var a = null;\n\n        if (index > 0) {\n          a = d.data[index - 1];\n        }\n\n        const b = d.data[index]; //d = the data object corresponding to date and value pointed by the cursors\n\n        var data = null;\n\n        if (!a) {\n          data = b;\n        } else if (!b) {\n          data = a;\n        } else {\n          data = b && date - a.date > b.date - date ? b : a;\n        }\n\n        if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n          if (data.defined != 0) {\n            var element = d3.select(this).select('text').style(\"opacity\", \"1\").text(Math.round(data.value));\n            element.select(\"circle\").style(\"opacity\", \"1\");\n            return \"translate(\" + mouse[0] + \",\" + y(data.value) + \")\";\n          }\n        }\n\n        var element = d3.select(this).select(\"text\").style(\"opacity\", \"0\");\n        element.select(\"circle\").style(\"opacity\", \"0\");\n      });\n    }); // .on('mousemove', function() { // mouse moving over canvas\n    //     var mouse = d3.mouse(this);\n    //     var xCoord = mouse[0];\n    //     var yCoord = mouse[1];\n    //     const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n    //     if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n    //         chart.attr(\"cursor\", \"pointer\");\n    //     }\n    //     else {\n    //         chart.attr(\"cursor\", \"default\");\n    //     }\n    //     d3\n    //         .select(\"#tooltip-line\")\n    //         .attr(\"d\", function() {\n    //             var d = \"M\" + xCoord + \",\" + height;\n    //             d += \" \" + xCoord + \",\" + 0;\n    //             return d;\n    //         });\n    //     d3\n    //         .selectAll(\".mouse-per-line\")\n    //         .attr(\"transform\", function(d, i) {\n    //             if (d.data.length == 0) {return;}\n    //             var date = x.invert(xCoord);\n    //             const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n    //             var a = null;\n    //             if (index > 0) {\n    //                 a = d.data[index - 1];\n    //             }\n    //             const b = d.data[index];\n    //             //d = the data object corresponding to date and value pointed by the cursors\n    //             var data = null;\n    //             if (!a) {\n    //                 data = b;\n    //             }\n    //             else if (!b) {\n    //                 data = a;\n    //             }\n    //             else {\n    //                 data = b && (date - a.date > b.date - date) ? b : a;\n    //             }\n    //             if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n    //                 if (data.defined != 0) {\n    //                     var element = d3.select(this)\n    //                                     .select('text')\n    //                                         .style(\"opacity\", \"1\")\n    //                                         .text(Math.round(data.value));\n    //                     element.select(\"circle\")\n    //                             .style(\"opacity\", \"1\");\n    //                     return \"translate(\" + mouse[0] + \",\" + y(data.value)+\")\";\n    //                 }\n    //             }\n    //             var element = d3.select(this)\n    //                             .select(\"text\")\n    //                             .style(\"opacity\", \"0\")\n    //             element\n    //                     .select(\"circle\")\n    //                     .style(\"opacity\", \"0\");\n    //     });\n    // })\n    /////////////////////////////////////////////////////////////////////////////////////////////\n\n    const focusHeight = 100;\n    const contextMargin = 50;\n    var context = svg.append(\"g\").attr(\"viewBox\", [0, 0, width, focusHeight]).attr(\"transform\", `translate(0,${height + contextMargin} )`) //.attr(\"width\", width + 100)\n    //.attr(\"height\", height)\n    .style(\"display\", \"block\");\n    /*const xAxis = (g, x, height) => g\n                                        .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                        .call(d3.axisBottom(x))*/\n\n    var contextX = d3.scaleTime().domain([confirmedStartDate, predEndDate]).range([0, width]);\n    var contextXAxis = context.append(\"g\").attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`).call(d3.axisBottom(contextX));\n    const brush = d3.brushX().extent([[0, 0], [width, focusHeight - margin.bottom]]).on(\"brush\", brushed).on(\"end\", brushended);\n    const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    /*context.append(\"g\")\n            .call(xAxis, x, focusHeight);*/\n\n    /*svg.append(\"path\")\n        .datum(confirmedData)\n        .attr(\"fill\", \"steelblue\")\n        .attr(\"d\", line(x, y.copy().range([focusHeight - margin.bottom, 4])));*/\n\n    function brushed() {\n      if (d3.event.selection) {\n        var extent = d3.event.selection; //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n\n        x.domain([contextX.invert(extent[0]), contextX.invert(extent[1])]);\n        xAxis //.transition()\n        //.duration(1000)\n        .call(d3.axisBottom(x));\n        var newX = x(confirmedData[confirmedData.length - 1].date);\n        newX = newX < 0 ? 0 : newX;\n        d3.select(\"#prediction-clip\").select(\"rect\").attr(\"width\", width - newX).attr(\"x\", newX);\n        svg.selectAll(\".line\") //.transition()\n        //.duration(1000)\n        .attr('d', line);\n        svg.select(\"#your-line\").attr(\"d\", predLine); //reposition draw your guess text and pointer\n\n        svg.select(\"#draw-guess\").attr(\"x\", newX + (width - newX) / 2);\n        svg.select(\"#pointer\").selectAll(\"circle\").attr(\"cx\", newX);\n      }\n    }\n\n    function brushended() {\n      if (!d3.event.selection) {\n        gb.call(brush.move, defaultSelection);\n      }\n    }\n\n    const gb = context.call(brush).call(brush.move, defaultSelection); ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    var deleteButton = document.createElement(\"button\");\n    deleteButton.className = 'btn primary-btn';\n    deleteButton.id = 'delete-btn';\n    deleteButton.innerText = \"Reset\";\n    d3.select(\"#delete-btn\");\n\n    deleteButton.onclick = () => {\n      this.deletePrediction(category);\n      predictionData = createDefaultPrediction(predStartDate, predEndDate);\n      predictionData[0].value = confirmedLastVal;\n      predictionData[0].defined = true; //update yourLine\n\n      var filtered = predictionData.filter(predLine.defined());\n      yourLine.datum(filtered).attr('d', predLine);\n      svg.select(\"#drawing-instruction\").style(\"opacity\", \"1\");\n    };\n\n    document.querySelector(\"body\").appendChild(deleteButton); ////ADD TODAY LINE/////////////////////////////////////////////////////\n\n    const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0, 10));\n    var todayMarker = svg.append(\"g\").attr(\"id\", \"today-marker\");\n    todayMarker.append(\"line\").attr(\"id\", \"today-line\").attr(\"x1\", x(today)).attr(\"x2\", x(today)).attr(\"y1\", 0).attr(\"y2\", height).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1).attr(\"stroke-dasharray\", \"8, 8\");\n    todayMarker.append(\"text\").attr(\"id\", \"today-text\").attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`).text(\"Today\").style(\"text-anchor\", \"end\");\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1471,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default InteractiveChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js"],"names":["React","Component","d3","clamp","findYatX","getAllDataPoints","getDataPointsFromPath","reformatData","reformatPredData","getMostRecentPrediction","elementType","addDays","formatDate","rectangle","InteractiveChart","constructor","props","state","category","chartRef","createRef","componentDidMount","loginStatus","renderChart","renderChartUnregistered","savePrediction","data","fetch","method","headers","body","JSON","stringify","deletePrediction","console","log","createDefaultPrediction","predStartDate","predEndDate","defaultData","currDate","push","date","value","defined","timeDay","offset","appendModal","signinRedirect","window","location","href","signupRedirect","modal","document","createElement","id","modalContent","text","innerText","signinBtn","onclick","signupBtn","appendChild","current","forecast","orgs","userPrediction","confirmed","aggregate","predictionData","defaultPredictionData","compiledData","legendWidth","toolTipHeight","contextHeight","margin","top","right","bottom","left","width","height","svg","select","append","attr","style","w","h","confirmedData","Object","keys","map","key","timeParse","forecastData","f","aggregateData","confirmedStartDate","length","predLength","filter","d","x","scaleTime","domain","range","xAxis","call","axisBottom","confirmedMax","max","forecastMax","currMax","yAxisMax","Math","y","scaleLinear","nice","axisLeft","legendString","concat","color","scaleOrdinal","schemeTableau10","legend","size","legendMarginL","selectAll","enter","i","lineGenerator","line","curve","curveCatmullRom","predLineGenerator","curveBasis","mainClip","mainArea","confirmedLine","datum","confirmedAreaEndX","confirmedAreaEndY","predictionClip","predictionArea","idxOfStartDate","bisector","splice","aggregateLine","index","slice","lines","getElementsByClassName","predLine","yourLine","confirmedLastVal","filteredData","forecastPaths","querySelectorAll","confirmedPath","querySelector","aggregatePath","o","lastDate","name","mouseArea","confirmedAreaWidth","node","getBoundingClientRect","clickAreaWidth","drawingInstruction","selectCircle","pointerCircles","c","drag","on","pos","mouse","invert","forEach","round","getElementById","event","target","display","tooltipArea","mousePerLine","chart","xCoord","yCoord","xLowerBoundary","a","b","floor","ceil","element","focusHeight","contextMargin","context","contextX","contextXAxis","brush","brushX","extent","brushed","brushended","defaultSelection","timeMonth","selection","newX","gb","move","deleteButton","className","filtered","today","Date","toISOString","substring","todayMarker","titleHeight","mostRecentPred","lastPredDate","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport './InteractiveChart.css';\nimport { clamp, findYatX, getAllDataPoints, getDataPointsFromPath, reformatData, reformatPredData, getMostRecentPrediction } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\nimport { rectangle } from 'leaflet';\n\n\nclass InteractiveChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\" };\n        this.chartRef = React.createRef();\n    }\n    componentDidMount() {\n        const loginStatus = this.props.loginStatus;\n        if (loginStatus['logged in']) {\n            this.renderChart();\n        }\n        else {\n            this.renderChartUnregistered()\n        }\n    }\n\n    //move to utils\n    savePrediction(data, category) {\n        fetch('/update/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"data\": data, \"category\": category}),\n        });\n    }\n    deletePrediction(category) {\n        console.log(category)\n        fetch('/delete/',{\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\"category\": category}),\n          });\n        console.log(\"deleted\")\n    }\n\n    createDefaultPrediction(predStartDate, predEndDate) {\n        var defaultData = [];\n        var currDate = predStartDate;\n        //var defined = true;\n        //var value = confirmedData[confirmedData.length - 1].value;\n        \n        //create defaultPredictionData\n        while(+currDate <= +predEndDate) {\n            defaultData.push({date: currDate, value: 0, defined: 0});\n            currDate = d3.timeDay.offset(currDate, 1);\n        }\n        return defaultData;\n    }\n    \n    appendModal() {\n        const signinRedirect = () => {window.location.href='/signin'}\n        const signupRedirect = () => {window.location.href='/signup'}\n        var modal = document.createElement(\"div\");\n        modal.id = \"modal\";\n        var modalContent = document.createElement(\"div\");\n        modalContent.id = \"modal-content\";\n        var text = document.createElement(\"p\");\n        text.innerText = \"Please log in to save your prediction.\";\n        var signinBtn = document.createElement(\"button\");\n        signinBtn.id = \"signin-btn\";\n        signinBtn.innerText = \"Sign In\";\n        signinBtn.onclick= signinRedirect;\n        var signupBtn = document.createElement(\"button\");\n        signupBtn.id = \"signup-btn\";\n        signupBtn.onclick= signupRedirect;\n        signupBtn.innerText = \"Sign Up\";\n        modalContent.appendChild(text);\n        modalContent.appendChild(signinBtn);\n        modalContent.appendChild(signupBtn);\n        modal.appendChild(modalContent);\n        this.chartRef.current.appendChild(modal);\n    }\n\n    renderChartUnregistered() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = [];//where we will store formatted userPrediction\n        var defaultPredictionData = []\n        const savePrediction = this.savePrediction;\n        const createDefaultPrediction = this.createDefaultPrediction;\n        this.appendModal();\n        const category = this.state.category;\n        var compiledData = [];\n        //set up margin, width, height of chart\n        const legendWidth = 180;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                    .append(\"g\")\n                    .attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`);\n        \n                    // add title\n        svg.append(\"text\")\n            .attr(\"x\", (width / 2))             \n            .attr(\"y\", -20)\n            .attr(\"text-anchor\", \"middle\")  \n            .style(\"font-size\", \"16px\") \n            .style(\"text-decoration\", \"underline\")  \n            .style(\"font-weight\", \"bold\")\n            .text(\"COVID-19 Forecasts of Daily Deaths in the US Over Time\");\n\n        const w = 710 - margin.left - margin.right;\n        const h = 360 - margin.top - margin.bottom;\n            \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", w/2 + margin.right)\n            .attr(\"y\", h + 4*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0-margin.left)\n            .attr(\"x\",0 - (h / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n        \n        var forecastData = forecast.map(f => {\n            return Object.keys(f).map(key => ({\n                date: d3.timeParse(\"%Y-%m-%d\")(key),\n                value: f[key]\n            }))\n        });\n\n        var aggregateData = Object.keys(aggregate).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: aggregate[key]\n        }));\n  \n        //set other dates\n        const confirmedStartDate = confirmedData[4].date;\n        const predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n        const predLength = 155;\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis     \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        //var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n        var legendString = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(orgs);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n\n         //draw legend\n        var legend = svg.append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        const legendMarginL = 30;\n        legend.selectAll(\"rect\")\n            .data(legendString)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', width + legendMarginL)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", function(d){ return color(d)})\n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", width + 45)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .style(\"fill\", function(d){ return color(d)})\n                .text(function(d){ return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            //.curve(d3.curveBasis);\n            .curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //area where the confirmed curve will be drawn\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n\n        // Create the confirmed area variable\n        const mainArea = svg\n                                .append('g')\n                                .attr(\"clip-path\", \"url(#main-clip)\");\n\n        //display confirmed data\n        var confirmedLine = mainArea.append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")    \n                                    .datum(confirmedData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(legendString[0]))\n                                    .style(\"stroke-width\", \"3px\")\n        var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n        var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value);\n\n        //append clip-path for prediction curve\n        var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\")\n                                .attr(\"id\", \"prediction-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width - confirmedAreaEndX )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", confirmedAreaEndX)\n                                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n                            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        \n        //make sure aggregateData curve stems from confiremData curve\n        var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate);\n        //check if predStartDate exists in AD\n        if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date == +predStartDate) {\n            aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n        }\n        else {\n            aggregateData.splice(idxOfStartDate, 0, {\n                date: predStartDate,\n                value: confirmedData[confirmedData.length - 1].value\n            });\n        }\n        aggregateData = aggregateData.splice(idxOfStartDate, aggregateData.length);\n\n\n        //display aggregate data\n        var aggregateLine = predictionArea.append(\"path\")\n                                    .attr(\"id\", \"aggregate\")\n                                    .attr(\"class\", \"line\")        \n                                    .datum(aggregateData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(legendString[1]))\n                                    .style(\"stroke-width\", \"2px\")\n        \n        //display forecast data\n        forecastData.map((f, index) => {\n            //make sure they all stem from the confirmed curve!\n            //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n            var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate);\n            //check if predStartDate exists in f\n            if (f.length > 0 && +f[idxOfStartDate].date == +predStartDate) {\n                f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n            }\n            else {//add data point to forecastData array\n                f.splice(idxOfStartDate, 0, {\n                    date: predStartDate,\n                    value: confirmedData[confirmedData.length - 1].value\n                });\n                f = f.slice(idxOfStartDate, f.length);\n            }\n            forecastData[index] = f;\n            predictionArea.append(\"path\")\n                        .attr(\"class\", \"forecast line\")\n                        .attr(\"id\", orgs[index])\n                        .style(\"stroke\", color(orgs[index]))\n                        .datum(f)\n                            .attr(\"d\", line);\n        })\n        \n        var lines = document.getElementsByClassName('line');\n\n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = predictionArea\n                                        .append(\"path\")\n                                        .attr(\"id\", \"your-line\");\n        \n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n        \n\n        predictionData = createDefaultPrediction(predStartDate, predEndDate);\n        predictionData[0].value = confirmedLastVal;\n        predictionData[0].defined = true;        \n\n        var filteredData = null;\n        //var totalData = confirmedData.concat(predictionData);\n\n//!!    //add forecast data to compiledData\nconst forecastPaths = document.querySelectorAll(\".forecast\");\n        const confirmedPath = document.querySelector(\"#confirmed\");\n        const aggregatePath = document.querySelector(\"#aggregate\");\n        console.log(aggregatePath)\n        console.log(forecastPaths);\n        console.log(orgs);\n        orgs.map((o, index) => {\n            var lastDate = forecastData[index][forecastData[index].length - 1].date;\n            forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, lastDate);\n            compiledData.push({\n                name: o,\n                data: forecastData[index]\n            })\n        })\n        confirmedData = getAllDataPoints(confirmedPath, x, y, confirmedStartDate, predStartDate);\n        compiledData.push({\n            name: \"Daily Confirmed Deaths\",\n            data: confirmedData\n        })\n        var lastDate = aggregateData[aggregateData.length - 1].date;\n        aggregateData = getAllDataPoints(aggregatePath, x, y, aggregateData[0].date, lastDate)\n        console.log(aggregateData);\n        compiledData.push({\n            name: \"Aggregate Forecast\",\n            data: aggregateData\n        })\n        compiledData.push({\n            name: \"User Prediction\",\n            data: predictionData\n        })\n        //join data to yourLine\n        filteredData = predictionData.filter(predLine.defined())\n        yourLine.datum(filteredData)\n                .attr('d', predLine)\n                .style(\"stroke\", color(legendString[2]))\n                .style(\"stroke-width\", \"2px\")\n\n        //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        /*svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");*/\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append draw your guess text\n        const drawingInstruction = svg\n                                        .append(\"g\")\n                                        .attr(\"id\", \"drawing-instruction\")\n                                        .style(\"opacity\", \"1\");\n        drawingInstruction\n                            .append(\"text\")\n                            .attr(\"id\", \"draw-guess\")\n                            .attr(\"x\", confirmedAreaEndX + (width - confirmedAreaEndX) / 2)             \n                            .attr(\"y\", height - 100)\n                            .attr(\"text-anchor\", \"middle\")  \n                            .text(\"Draw your guess\")\n                            .style(\"font-size\", \"16px\");\n        //append circle at the end of confirmed curve\n        var selectCircle = drawingInstruction\n                                                .append(\"g\")\n                                                .attr(\"id\", \"pointer\");\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n        selectCircle.append(\"circle\")\n            .attr(\"class\", c)\n            .attr(\"cx\", confirmedAreaEndX)\n            .attr(\"cy\", confirmedAreaEndY)\n        })\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        //hide \"draw your guess\" text\n                        svg\n                            .select(\"#drawing-instruction\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"0\")\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        //update totalData everytime predictionData is updated\n                        compiledData[compiledData.length - 1].data = predictionData;\n                        //console.log(compiledData)\n                        /*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/\n                        var filteredData = predictionData.filter(predLine.defined())\n\n                        yourLine.datum(filteredData)\n                                .attr('d', predLine)\n                                .style(\"stroke\", color(legendString[2]))\n                                .style(\"stroke-width\", \"2px\")\n                        });\n                    })\n                    .on(\"end\", function () {\n                        d3\n                            .select(\"#modal\")\n                            .style(\"display\", \"block\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"1\")\n                    });\n        \n        svg.call(drag)\n        var modal = document.getElementById(\"modal\");\n\n        window.onclick = function(event) {\n            if (event.target == modal) {\n              modal.style.display = \"none\";\n            }\n          }\n\n        //finds the datapoint closest to the mouse (along x)\n        /*var bisect = () => {\n            const bisectDate = d3.bisector(d => d.date).left;\n            return mx => {\n                const date = x.invert(mx);\n                const index = bisectDate(totalData, date, 1);\n                const a = totalData[index - 1];\n                const b = totalData[index];\n                return b && (date - a.date > b.date - date) ? b : a;\n            };\n        }*/\n\n\n        const tooltipArea = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n                    .attr(\"id\", \"tooltip-line\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"0.5px\")\n                    .style(\"opacity\", \"0\");\n        //console.log(compiledData)\n        var mousePerLine = tooltipArea\n                                        .selectAll(\".mouse-per-line\")\n                                        .data(compiledData)\n                                        .enter()\n                                        .append(\"g\")\n                                        .attr(\"class\", \"mouse-per-line\");\n        \n        mousePerLine.append(\"circle\")\n                        .attr(\"r\", 2)\n                        .style(\"stroke\", function(d) {\n                            return color(d.name);\n                        })\n                        .style(\"fill\", \"none\")\n                        .style(\"stroke-width\", \"1px\")\n                        .style(\"opacity\", \"0\");\n        mousePerLine.append(\"text\")\n                    .attr(\"transform\", \"translate(10,3)\"); \n                    \n        var chart = tooltipArea\n                    .append(\"svg:rect\")\n                    .attr('width', width)\n                    .attr('height', height)\n                    .attr('fill', 'none')\n                    .attr('pointer-events', 'all')\n                    //.style(\"cursor\", \"pointer\")\n                    .on('mouseout', function() { // on mouse out hide line, circles and text\n                        d3.select(\"#tooltip-line\")\n                        .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                        .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line text\")\n                        .style(\"opacity\", \"0\")\n                    })\n                    .on('mouseover', function() { // on mouse in show line, circles and text\n                        d3.select(\"#tooltip-line\")\n                        .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                        .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                        .style(\"opacity\", \"1\")\n\n                    })\n                    .on('mousemove', function() { // mouse moving over canvas\n                        var mouse = d3.mouse(this);\n                        var xCoord = mouse[0];\n                        var yCoord = mouse[1];\n                        const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n                        if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n                            chart.attr(\"cursor\", \"pointer\");\n                        }\n                        else {\n                            chart.attr(\"cursor\", \"default\");\n                        }\n                        d3\n                            .select(\"#tooltip-line\")\n                            .attr(\"d\", function() {\n                                var d = \"M\" + xCoord + \",\" + height;\n                                d += \" \" + xCoord + \",\" + 0;\n                                return d;\n                            });\n                        d3\n                            .selectAll(\".mouse-per-line\")\n                            .attr(\"transform\", function(d, i) {\n                                if (d.data.length == 0) {return;}\n                                var date = x.invert(xCoord);\n                                const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n                                var a = null;\n                                if (index > 0) {\n                                    a = d.data[index - 1];\n                                }\n                                const b = d.data[index];\n                                //d = the data object corresponding to date and value pointed by the cursors\n                                var data = null;\n                                if (!a) {\n                                    data = b;\n                                }\n                                else if (!b) {\n                                    data = a;\n                                }\n                                else {\n                                    data = b && (date - a.date > b.date - date) ? b : a;\n                                }\n                                if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n                                    if (data.defined != 0) {\n                                        var element = d3.select(this)\n                                                        .select('text')\n                                                            .style(\"opacity\", \"1\")\n                                                            .text(Math.round(data.value));\n                                        element.select(\"circle\")\n                                                .style(\"opacity\", \"1\");\n                                        return \"translate(\" + mouse[0] + \",\" + y(data.value)+\")\";\n                                    }\n                                }\n                                var element = d3.select(this)\n                                                .select(\"text\")\n                                                .style(\"opacity\", \"0\")\n                                element\n                                        .select(\"circle\")\n                                        .style(\"opacity\", \"0\");\n                                \n                        });\n                    })\n\n        /////////////////////////////////////////////////////////////////////////////////////////////\n        const focusHeight = 100;\n        const contextMargin = 50;\n        var context = svg\n                            .append(\"g\")\n                                .attr(\"viewBox\", [0, 0, width, focusHeight])\n                                .attr(\"transform\", `translate(0,${height + contextMargin} )`)\n                                //.attr(\"width\", width + 100)\n                                //.attr(\"height\", height)\n                                .style(\"display\", \"block\")\n\n\n\n        /*const xAxis = (g, x, height) => g\n                                            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                            .call(d3.axisBottom(x))*/\n\n        var contextX = d3\n                            .scaleTime()\n                            .domain([confirmedStartDate, predEndDate])\n                            .range([0, width]);\n        \n        var contextXAxis = context\n                                    .append(\"g\")\n                                    .attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`)\n                                    .call(d3.axisBottom(contextX));\n        const brush = d3.brushX()\n                        .extent([[0, 0], [width, focusHeight - margin.bottom]])\n                        .on(\"brush\", brushed)\n                        .on(\"end\", brushended);\n\n        const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    \n        /*context.append(\"g\")\n                .call(xAxis, x, focusHeight);*/\n    \n        /*svg.append(\"path\")\n            .datum(confirmedData)\n            .attr(\"fill\", \"steelblue\")\n            .attr(\"d\", line(x, y.copy().range([focusHeight - margin.bottom, 4])));*/\n        function brushed() {\n            if (d3.event.selection) {\n                var extent = d3.event.selection;\n                //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                x.domain([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                xAxis\n                        //.transition()\n                        //.duration(1000)\n                        .call(d3.axisBottom(x))\n                var newX = x(confirmedData[confirmedData.length - 1].date);\n                newX = newX < 0 ? 0 : newX;\n                d3\n                    .select(\"#prediction-clip\")\n                    .select(\"rect\")\n                        .attr(\"width\", width - newX)\n                        .attr(\"x\", newX);\n\n                svg\n                    .selectAll(\".line\")\n                    //.transition()\n                    //.duration(1000)\n                    .attr('d', line)\n\n                svg\n                    .select(\"#your-line\")\n                    .attr(\"d\", predLine)\n                \n                //reposition draw your guess text and pointer\n                svg\n                    .select(\"#draw-guess\")\n                    .attr(\"x\", newX + (width - newX) / 2);\n                svg\n                    .select(\"#pointer\")\n                    .selectAll(\"circle\")\n                        .attr(\"cx\", newX);\n            }\n        }\n        \n        function brushended() {\n            if (!d3.event.selection) {\n                gb.call(brush.move, defaultSelection);\n            }\n\n        }\n        const gb = context\n                        .call(brush)\n                        .call(brush.move, defaultSelection);   \n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        var deleteButton = document.createElement(\"button\")\n        deleteButton.className = 'btn primary-btn'\n        deleteButton.id = 'delete-btn'\n        deleteButton.innerText = \"Reset\";\n        d3.select(\"#delete-btn\")\n        deleteButton.onclick = () => {\n            this.deletePrediction(category)\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            //update yourLine\n            var filtered = predictionData.filter(predLine.defined())\n            yourLine.datum(filtered)\n                    .attr('d', predLine)\n                    \n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        };\n        document.querySelector(\"body\").appendChild(deleteButton);\n        ////ADD TODAY LINE/////////////////////////////////////////////////////\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n    }\n\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = [];//where we will store formatted userPrediction\n        var defaultPredictionData = []\n        const savePrediction = this.savePrediction;\n        const createDefaultPrediction = this.createDefaultPrediction;\n        const category = this.state.category;\n        var compiledData = [];\n        //set up margin, width, height of chart\n        const legendWidth = 180;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        const titleHeight = 20;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                    .append(\"g\")\n                        .attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`);\n        \n        // add title\n        svg.append(\"text\")\n            .attr(\"x\", (width / 2))             \n            .attr(\"y\", -20)\n            .attr(\"text-anchor\", \"middle\")  \n            .style(\"font-size\", \"16px\") \n            .style(\"text-decoration\", \"underline\")  \n            .style(\"font-weight\", \"bold\")\n            .text(\"COVID-19 Forecasts of Daily Deaths in the US Over Time\");\n\n        const w = 710 - margin.left - margin.right;\n        const h = 360 - margin.top - margin.bottom;\n            \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", w/2 + margin.right)\n            .attr(\"y\", h + 4*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - margin.left)\n            .attr(\"x\", 0 - (h/2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = reformatData(confirmed);\n        var forecastData = forecast.map(f => {\n            return reformatData(f);\n        });\n        var aggregateData = reformatData(aggregate);\n\n        //store userPrediction in predictionData if it exists\n        if(Object.keys(userPrediction).length > 0) {\n            const mostRecentPred = getMostRecentPrediction(userPrediction);\n            predictionData = reformatPredData(mostRecentPred);\n        }\n  \n        //set other dates\n        const confirmedStartDate = confirmedData[4].date;\n        const predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n        const predLength = 155;\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis     \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        //var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n        var legendString = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(orgs);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n\n         //draw legend\n        var legend = svg.append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        const legendMarginL = 30;\n        legend.selectAll(\"rect\")\n            .data(legendString)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', width + legendMarginL)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", function(d){ return color(d)})\n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", width + 45)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .style(\"fill\", function(d){ return color(d)})\n                .text(function(d){ return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            //.curve(d3.curveBasis);\n            .curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //area where the confirmed curve will be drawn\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n\n        // Create the confirmed area variable\n        const mainArea = svg\n                                .append('g')\n                                .attr(\"clip-path\", \"url(#main-clip)\");\n\n        //display confirmed data\n        var confirmedLine = mainArea.append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")    \n                                    .datum(confirmedData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(legendString[0]))\n                                    .style(\"stroke-width\", \"3px\")\n        var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n        var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value);\n\n        //append clip-path for prediction curve\n        var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\")\n                                .attr(\"id\", \"prediction-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"id\", \"prediction-rect\")\n                                    .attr(\"width\", width - confirmedAreaEndX )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", confirmedAreaEndX)\n                                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n                            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        \n        //make sure aggregateData curve stems from confiremData curve\n        var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate);\n        //check if predStartDate exists in AD\n        if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date == +predStartDate) {\n            aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n        }\n        else {\n            aggregateData.splice(idxOfStartDate, 0, {\n                date: predStartDate,\n                value: confirmedData[confirmedData.length - 1].value\n            });\n        }\n        aggregateData = aggregateData.splice(idxOfStartDate, aggregateData.length);\n\n        //display aggregate data\n        var aggregateLine = predictionArea.append(\"path\")\n                                    .attr(\"id\", \"aggregate\")\n                                    .attr(\"class\", \"line\")        \n                                    .datum(aggregateData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(legendString[1]))\n                                    .style(\"stroke-width\", \"2px\")\n        \n        //display forecast data\n        forecastData.map((f, index) => {\n            //make sure they all stem from the confirmed curve!\n            //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n            var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate);\n            //check if predStartDate exists in f\n            if (f.length > 0 && +f[idxOfStartDate].date == +predStartDate) {\n                f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n            }\n            else {//add data point to forecastData array\n                f.splice(idxOfStartDate, 0, {\n                    date: predStartDate,\n                    value: confirmedData[confirmedData.length - 1].value\n                });\n                f = f.slice(idxOfStartDate, f.length);\n            }\n            forecastData[index] = f;\n            predictionArea.append(\"path\")\n                        .attr(\"class\", \"forecast line\")\n                        .attr(\"id\", orgs[index])\n                        .style(\"stroke\", color(orgs[index]))\n                        .datum(f)\n                            .attr(\"d\", line);\n        })\n        \n        var lines = document.getElementsByClassName('line');\n\n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = predictionArea\n                                        .append(\"path\")\n                                        .attr(\"id\", \"your-line\");\n        \n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n        \n        //check if userPrediction already exists in db\n        if (Object.keys(userPrediction).length > 0) {\n            predictionData = predictionData.filter(d => (+d.date >= +predStartDate) && (+d.date <= +predEndDate));\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            currDate = d3.timeDay.offset(predictionData[predictionData.length - 1].date, 1);\n            predictionData.concat(createDefaultPrediction(currDate, predEndDate));\n        }\n        else {\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n        }\n\n        var filteredData = null;\n//!!    //add forecast data to compiledData\n        //get complete dataset from paths\n        const forecastPaths = document.querySelectorAll(\".forecast\");\n        const confirmedPath = document.querySelector(\"#confirmed\");\n        const aggregatePath = document.querySelector(\"#aggregate\");\n        console.log(aggregatePath)\n        console.log(forecastPaths);\n        console.log(orgs);\n        orgs.map((o, index) => {\n            var lastDate = forecastData[index][forecastData[index].length - 1].date;\n            forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, lastDate);\n            compiledData.push({\n                name: o,\n                data: forecastData[index]\n            })\n        })\n        confirmedData = getAllDataPoints(confirmedPath, x, y, confirmedStartDate, predStartDate);\n        compiledData.push({\n            name: \"Daily Confirmed Deaths\",\n            data: confirmedData\n        })\n        var lastDate = aggregateData[aggregateData.length - 1].date;\n        console.log(aggregateData);\n        console.log(lastDate);\n        aggregateData = getAllDataPoints(aggregatePath, x, y, aggregateData[0].date, lastDate)\n        console.log(aggregateData);\n        compiledData.push({\n            name: \"Aggregate Forecast\",\n            data: aggregateData\n        })\n        compiledData.push({\n            name: \"User Prediction\",\n            data: predictionData\n        })\n        //join data to yourLine\n        filteredData = predictionData.filter(predLine.defined())\n        yourLine.datum(filteredData)\n                .attr('d', predLine)\n                .style(\"stroke\", color(legendString[2]))\n                .style(\"stroke-width\", \"2px\")\n        //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append draw your guess text\n        const drawingInstruction = svg\n                                        .append(\"g\")\n                                        .attr(\"id\", \"drawing-instruction\")\n                                        .style(\"opacity\", \"0\");\n        drawingInstruction\n                            .append(\"text\")\n                            .attr(\"id\", \"draw-guess\")\n                            .attr(\"x\", confirmedAreaEndX + (width - confirmedAreaEndX) / 2)             \n                            .attr(\"y\", height - 100)\n                            .attr(\"text-anchor\", \"middle\")  \n                            .text(\"Draw your guess\")\n                            .style(\"font-size\", \"16px\");\n        //append circle at the end of confirmed curve\n        var selectCircle = drawingInstruction\n                                                .append(\"g\")\n                                                .attr(\"id\", \"pointer\");\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n        selectCircle.append(\"circle\")\n            .attr(\"class\", c)\n            .attr(\"cx\", confirmedAreaEndX)\n            .attr(\"cy\", confirmedAreaEndY)\n        })\n\n        if(Object.keys(userPrediction).length == 0) {\n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        }\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        //hide \"draw your guess\" text\n                        svg\n                            .select(\"#drawing-instruction\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"0\")\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        //update totalData everytime predictionData is updated\n                        compiledData[compiledData.length - 1].data = predictionData;\n                        //console.log(compiledData)\n                        /*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/\n                        filteredData = predictionData.filter(predLine.defined())\n                        yourLine.datum(filteredData)\n                                .attr('d', predLine)\n                                .style(\"stroke\", color(legendString[2]))\n                                .style(\"stroke-width\", \"2px\")\n                        });\n                    })\n                    .on(\"end\", function () {\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"1\")\n                        var lastPredDate = filteredData[filteredData.length - 1].date;\n                        getDataPointsFromPath(predictionData, yourLine.node(), x, y, lastPredDate);\n                        console.log(predictionData);\n                        savePrediction(predictionData, category);\n                    });\n        \n        svg.call(drag)\n\n        const tooltipArea = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n                    .attr(\"id\", \"tooltip-line\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"0.5px\")\n                    .style(\"opacity\", \"0\");\n        //console.log(compiledData)\n        var mousePerLine = tooltipArea\n                                        .selectAll(\".mouse-per-line\")\n                                        .data(compiledData)\n                                        .enter()\n                                        .append(\"g\")\n                                        .attr(\"class\", \"mouse-per-line\");\n        \n        mousePerLine.append(\"circle\")\n                        .attr(\"r\", 2)\n                        .style(\"stroke\", function(d) {\n                            return color(d.name);\n                        })\n                        .style(\"fill\", \"none\")\n                        .style(\"stroke-width\", \"1px\")\n                        .style(\"opacity\", \"0\");\n        mousePerLine.append(\"text\")\n                    .attr(\"transform\", \"translate(10,3)\"); \n        var chart = tooltipArea\n                            .append(\"svg:rect\")\n                            .attr('width', width)\n                            .attr('height', height)\n                            .attr('fill', 'none')\n                            .attr('pointer-events', 'all')\n                            //.style(\"cursor\", \"pointer\")\n                            .on('mouseout', function() { // on mouse out hide line, circles and text\n                                d3.select(\"#tooltip-line\")\n                                .style(\"opacity\", \"0\");\n                                d3.selectAll(\".mouse-per-line circle\")\n                                .style(\"opacity\", \"0\");\n                                d3.selectAll(\".mouse-per-line text\")\n                                .style(\"opacity\", \"0\")\n                            })\n                            .on('mouseover', function() { // on mouse in show line, circles and text\n                                d3.select(\"#tooltip-line\")\n                                .style(\"opacity\", \"1\");\n                                d3.selectAll(\".mouse-per-line circle\")\n                                .style(\"opacity\", \"1\");\n                                d3.selectAll(\".mouse-per-line text\")\n                                .style(\"opacity\", \"1\")\n\n                            })\n                            .on('mousemove', function() { // mouse moving over canvas\n                                var mouse = d3.mouse(this);\n                                var xCoord = mouse[0];\n                                var yCoord = mouse[1];\n                                const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n                                if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n                                    chart.attr(\"cursor\", \"pointer\");\n                                }\n                                else {\n                                    chart.attr(\"cursor\", \"default\");\n                                }\n                                d3\n                                    .select(\"#tooltip-line\")\n                                    .attr(\"d\", function() {\n                                        var d = \"M\" + xCoord + \",\" + height;\n                                        d += \" \" + xCoord + \",\" + 0;\n                                        return d;\n                                    });\n                                d3\n                                    .selectAll(\".mouse-per-line\")\n                                    .attr(\"transform\", function(d, i) {\n                                        if (d.data.length == 0) {return;}\n                                        var date = x.invert(xCoord);\n                                        const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n                                        var a = null;\n                                        if (index > 0) {\n                                            a = d.data[index - 1];\n                                        }\n                                        const b = d.data[index];\n                                        //d = the data object corresponding to date and value pointed by the cursors\n                                        var data = null;\n                                        if (!a) {\n                                            data = b;\n                                        }\n                                        else if (!b) {\n                                            data = a;\n                                        }\n                                        else {\n                                            data = b && (date - a.date > b.date - date) ? b : a;\n                                        }\n                                        if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n                                            if (data.defined != 0) {\n                                                var element = d3.select(this)\n                                                                .select('text')\n                                                                    .style(\"opacity\", \"1\")\n                                                                    .text(Math.round(data.value));\n                                                element.select(\"circle\")\n                                                        .style(\"opacity\", \"1\");\n                                                return \"translate(\" + mouse[0] + \",\" + y(data.value)+\")\";\n                                            }\n                                        }\n                                        var element = d3.select(this)\n                                                        .select(\"text\")\n                                                        .style(\"opacity\", \"0\")\n                                        element\n                                                .select(\"circle\")\n                                                .style(\"opacity\", \"0\");\n                                        \n                                });\n                            })\n                            // .on('mousemove', function() { // mouse moving over canvas\n                            //     var mouse = d3.mouse(this);\n                            //     var xCoord = mouse[0];\n                            //     var yCoord = mouse[1];\n                            //     const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n                            //     if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n                            //         chart.attr(\"cursor\", \"pointer\");\n                            //     }\n                            //     else {\n                            //         chart.attr(\"cursor\", \"default\");\n                            //     }\n                            //     d3\n                            //         .select(\"#tooltip-line\")\n                            //         .attr(\"d\", function() {\n                            //             var d = \"M\" + xCoord + \",\" + height;\n                            //             d += \" \" + xCoord + \",\" + 0;\n                            //             return d;\n                            //         });\n                            //     d3\n                            //         .selectAll(\".mouse-per-line\")\n                            //         .attr(\"transform\", function(d, i) {\n                            //             if (d.data.length == 0) {return;}\n                            //             var date = x.invert(xCoord);\n                            //             const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n                            //             var a = null;\n                            //             if (index > 0) {\n                            //                 a = d.data[index - 1];\n                            //             }\n                            //             const b = d.data[index];\n                            //             //d = the data object corresponding to date and value pointed by the cursors\n                            //             var data = null;\n                            //             if (!a) {\n                            //                 data = b;\n                            //             }\n                            //             else if (!b) {\n                            //                 data = a;\n                            //             }\n                            //             else {\n                            //                 data = b && (date - a.date > b.date - date) ? b : a;\n                            //             }\n                            //             if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n                            //                 if (data.defined != 0) {\n                            //                     var element = d3.select(this)\n                            //                                     .select('text')\n                            //                                         .style(\"opacity\", \"1\")\n                            //                                         .text(Math.round(data.value));\n                            //                     element.select(\"circle\")\n                            //                             .style(\"opacity\", \"1\");\n                            //                     return \"translate(\" + mouse[0] + \",\" + y(data.value)+\")\";\n                            //                 }\n                            //             }\n                            //             var element = d3.select(this)\n                            //                             .select(\"text\")\n                            //                             .style(\"opacity\", \"0\")\n                            //             element\n                            //                     .select(\"circle\")\n                            //                     .style(\"opacity\", \"0\");\n                                        \n                            //     });\n                            // })\n\n        /////////////////////////////////////////////////////////////////////////////////////////////\n        const focusHeight = 100;\n        const contextMargin = 50;\n        var context = svg\n                            .append(\"g\")\n                                .attr(\"viewBox\", [0, 0, width, focusHeight])\n                                .attr(\"transform\", `translate(0,${height + contextMargin} )`)\n                                //.attr(\"width\", width + 100)\n                                //.attr(\"height\", height)\n                                .style(\"display\", \"block\")\n\n\n\n        /*const xAxis = (g, x, height) => g\n                                            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                            .call(d3.axisBottom(x))*/\n\n        var contextX = d3\n                            .scaleTime()\n                            .domain([confirmedStartDate, predEndDate])\n                            .range([0, width]);\n        \n        var contextXAxis = context\n                                    .append(\"g\")\n                                    .attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`)\n                                    .call(d3.axisBottom(contextX));\n        const brush = d3.brushX()\n                        .extent([[0, 0], [width, focusHeight - margin.bottom]])\n                        .on(\"brush\", brushed)\n                        .on(\"end\", brushended);\n\n        const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    \n        /*context.append(\"g\")\n                .call(xAxis, x, focusHeight);*/\n    \n        /*svg.append(\"path\")\n            .datum(confirmedData)\n            .attr(\"fill\", \"steelblue\")\n            .attr(\"d\", line(x, y.copy().range([focusHeight - margin.bottom, 4])));*/\n        function brushed() {\n            if (d3.event.selection) {\n                var extent = d3.event.selection;\n                //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                x.domain([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                xAxis\n                        //.transition()\n                        //.duration(1000)\n                        .call(d3.axisBottom(x))\n                var newX = x(confirmedData[confirmedData.length - 1].date);\n                newX = newX < 0 ? 0 : newX;\n                d3\n                    .select(\"#prediction-clip\")\n                    .select(\"rect\")\n                        .attr(\"width\", width - newX)\n                        .attr(\"x\", newX);\n\n                svg\n                    .selectAll(\".line\")\n                    //.transition()\n                    //.duration(1000)\n                    .attr('d', line)\n\n                svg\n                    .select(\"#your-line\")\n                    .attr(\"d\", predLine)\n                \n                //reposition draw your guess text and pointer\n                svg\n                    .select(\"#draw-guess\")\n                    .attr(\"x\", newX + (width - newX) / 2);\n                svg\n                    .select(\"#pointer\")\n                    .selectAll(\"circle\")\n                        .attr(\"cx\", newX);\n            }\n        }\n        \n        function brushended() {\n            if (!d3.event.selection) {\n                gb.call(brush.move, defaultSelection);\n            }\n\n        }\n        const gb = context\n                        .call(brush)\n                        .call(brush.move, defaultSelection);   \n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        var deleteButton = document.createElement(\"button\")\n        deleteButton.className = 'btn primary-btn'\n        deleteButton.id = 'delete-btn'\n        deleteButton.innerText = \"Reset\";\n        d3.select(\"#delete-btn\")\n        deleteButton.onclick = () => {\n            this.deletePrediction(category)\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            //update yourLine\n            var filtered = predictionData.filter(predLine.defined())\n            yourLine.datum(filtered)\n                    .attr('d', predLine)\n                    \n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        };\n        document.querySelector(\"body\").appendChild(deleteButton);\n        ////ADD TODAY LINE/////////////////////////////////////////////////////\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n\n    }\n        \n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default InteractiveChart;"]},"metadata":{},"sourceType":"module"}