{"ast":null,"code":"import _classCallCheck from\"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import Chart from'chart.js';import'chartjs-plugin-dragdata';import'chartjs-plugin-zoom';import{cleanConfirmedData}from'../../utils/data';var LineChart=/*#__PURE__*/function(_React$Component){_inherits(LineChart,_React$Component);var _super=_createSuper(LineChart);function LineChart(props){var _this;_classCallCheck(this,LineChart);_this=_super.call(this,props);_this.state={userPrediction:null};_this.chartRef=React.createRef();// create reference for chart in class\nreturn _this;}_createClass(LineChart,[{key:\"componentDidMount\",value:function componentDidMount(){this.renderChart();}},{key:\"savePrediction\",value:function savePrediction(model,data){fetch('/update/',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({\"model\":model,\"data\":data})});}},{key:\"renderChart\",value:function renderChart(){var _this$props=this.props,data=_this$props.data,org=_this$props.org,userPrediction=_this$props.userPrediction,confirmed=_this$props.confirmed;var model=org;var confirmedResult=cleanConfirmedData(confirmed,Object.keys(data));var savePrediction=this.savePrediction;this.myChart=new Chart(this.chartRef.current,{type:'line',data:{labels:Object.keys(data),datasets:[// Settings for user prediction graph\n{label:\"User's Prediciton\",data:userPrediction.value,backgroundColor:['rgba(64, 64, 64, 0.2)'],borderWidth:1,dragData:true,// User's predictions are draggable\nradius:2.5},// Settings for graph of forecasted deaths\n{label:'Estimated Deaths',data:Object.values(data),backgroundColor:['rgba(255, 99, 130, 0.2)'],borderWidth:0.2,dragData:false,pointStyle:'cross',rotation:45,pointBorderColor:'black'},// Settings for graph of confirmed deaths\n{label:'Confirmed Deaths',data:Object.values(confirmedResult),backgroundColor:['rgba(130, 99, 255, 0.2)'],borderWidth:0.2,dragData:false,pointStyle:'cross',rotation:45,pointBorderColor:'black'}]},options:{scales:{yAxes:[{ticks:{beginAtZero:true}}]},title:{display:true,text:this.props.org,fontSize:30},dragData:true,dragDataRound:1,dragOptions:{showTooltip:true},onDragStart:function onDragStart(e){// console.log(e)\n},onDrag:function onDrag(e,datasetIndex,index,value){e.target.style.cursor='grabbing';},onDragEnd:function onDragEnd(e,datasetIndex,index,value){e.target.style.cursor='default';savePrediction(model,userPrediction[model]);},hover:{onHover:function onHover(e){var point=this.getElementAtEvent(e);if(point.length)e.target.style.cursor='grab';else e.target.style.cursor='default';}},responsive:true,plugins:{zoom:{// Pan options\npan:{enabled:true,// Panning directions\nmode:'x'},// Zoom options\nzoom:{enabled:true,// Zooming directions,\nmode:'x'}}}}});}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"chart-container\",style:{position:\"relative\",width:\"80vw\",margin:\"0 10%\"}},/*#__PURE__*/React.createElement(\"canvas\",{ref:this.chartRef}),/*#__PURE__*/React.createElement(\"br\",null));}}]);return LineChart;}(React.Component);export default LineChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/LineChart/index.js"],"names":["React","Chart","cleanConfirmedData","LineChart","props","state","userPrediction","chartRef","createRef","renderChart","model","data","fetch","method","headers","body","JSON","stringify","org","confirmed","confirmedResult","Object","keys","savePrediction","myChart","current","type","labels","datasets","label","value","backgroundColor","borderWidth","dragData","radius","values","pointStyle","rotation","pointBorderColor","options","scales","yAxes","ticks","beginAtZero","title","display","text","fontSize","dragDataRound","dragOptions","showTooltip","onDragStart","e","onDrag","datasetIndex","index","target","style","cursor","onDragEnd","hover","onHover","point","getElementAtEvent","length","responsive","plugins","zoom","pan","enabled","mode","position","width","margin","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Chart from 'chart.js';\nimport 'chartjs-plugin-dragdata';\nimport 'chartjs-plugin-zoom';\nimport PropTypes from 'prop-types';\nimport { cleanConfirmedData } from '../../utils/data';\n\nclass LineChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { userPrediction: null };\n    this.chartRef = React.createRef(); // create reference for chart in class\n  }\n\n  componentDidMount() {\n    this.renderChart();\n  }\n\n  savePrediction(model, data) {\n    fetch('/update/',{\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\"model\": model, \"data\": data}),\n    });\n  }\n\n  renderChart() {\n    const { data, org, userPrediction, confirmed } = this.props;\n    const model = org;\n    const confirmedResult = cleanConfirmedData(confirmed, Object.keys(data));\n    const savePrediction = this.savePrediction;\n    \n    this.myChart = new Chart(this.chartRef.current, {\n      type: 'line',\n      data: {\n        labels: Object.keys(data),\n        datasets: [ // Settings for user prediction graph\n          {\n              label: \"User's Prediciton\",\n              data: userPrediction.value,\n              backgroundColor: [\n                'rgba(64, 64, 64, 0.2)',\n              ],\n              borderWidth: 1,\n              dragData: true, // User's predictions are draggable\n              radius: 2.5\n          },\n          // Settings for graph of forecasted deaths\n          {\n              label: 'Estimated Deaths',\n              data: Object.values(data),\n              backgroundColor: [\n                  'rgba(255, 99, 130, 0.2)',\n              ],\n              borderWidth: 0.2,\n              dragData: false,\n              pointStyle: 'cross',\n              rotation: 45,\n              pointBorderColor: 'black'\n          }, \n          // Settings for graph of confirmed deaths\n          {\n              label: 'Confirmed Deaths',\n              data: Object.values(confirmedResult),\n              backgroundColor: [\n                'rgba(130, 99, 255, 0.2)',\n              ],\n              borderWidth: 0.2,\n              dragData: false,\n              pointStyle: 'cross',\n              rotation: 45,\n              pointBorderColor: 'black'\n          }\n        ]\n      },\n      options: {\n          scales: {\n              yAxes: [{\n                  ticks: {\n                      beginAtZero: true\n                  }\n              }]\n          },\n          title: {\n            display: true,\n            text: this.props.org,\n            fontSize: 30\n          },\n          dragData: true,\n          dragDataRound: 1,\n          dragOptions: {\n            showTooltip: true\n          },\n          onDragStart: function(e) {\n            // console.log(e)\n          },\n          onDrag: function(e, datasetIndex, index, value) {\n            e.target.style.cursor = 'grabbing'\n          },\n          onDragEnd: function(e, datasetIndex, index, value) {\n            e.target.style.cursor = 'default';\n            savePrediction(model, userPrediction[model]);\n          },\n          hover: {\n            onHover: function(e) {\n              const point = this.getElementAtEvent(e)\n              if (point.length) e.target.style.cursor = 'grab'\n              else e.target.style.cursor = 'default'\n            }\n          },\n          responsive: true,\n          plugins: {\n            zoom: {\n              // Pan options\n              pan: {\n                enabled: true,\n                // Panning directions\n                mode: 'x',\n              },\n          \n              // Zoom options\n              zoom: {\n                enabled: true,\n                // Zooming directions,\n                mode: 'x',\n              }\n            }\n          }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"chart-container\" style={{position: \"relative\", width: \"80vw\", margin: \"0 10%\"}}>\n        <canvas ref={this.chartRef} />\n        <br></br>\n      </div>\n    );\n  }\n}\n\nLineChart.propTypes = {\n  data: PropTypes.object.isRequired,\n  org: PropTypes.string.isRequired,\n  userPrediction: PropTypes.object.isRequired,\n  confirmed: PropTypes.object.isRequired,\n};\n\nexport default LineChart;\n"]},"metadata":{},"sourceType":"module"}