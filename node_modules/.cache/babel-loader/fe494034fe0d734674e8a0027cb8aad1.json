{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/containers/InteractiveChartContainer/index.js\";\nimport React, { Component } from 'react';\nimport InteractiveChart from '../../components/InteractiveChart';\nimport { cleanConfirmedData, organizeData } from '../../utils/data';\n\nfunction InteractiveCharts({\n  dataSet,\n  orgs,\n  userPrediction,\n  confirmed\n}) {\n  return dataSet.map((data, index) => {\n    return /*#__PURE__*/React.createElement(InteractiveChart, {\n      forecast: data,\n      org: orgs[index],\n      userPrediction: userPrediction,\n      confirmed: confirmed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }\n    });\n  });\n}\n\nclass InteractiveChartContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      forecast: null,\n      orgs: null,\n      confirmed: null,\n      userPrediction: null\n    };\n  }\n\n  componentDidMount() {\n    fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n      const [results, orgs] = organizeData(data);\n      this.setState({\n        forecast: results,\n        orgs\n      });\n    });\n    fetch('/user-prediction').then(res => res.json()).then(data => {\n      this.setState({\n        userPrediction: data\n      });\n    });\n    fetch('/us-inc-deaths-confirmed').then(res => res.json()).then(data => {\n      console.log(typeof data); //const result = JSON.parse(data);\n\n      this.setState({\n        confirmed: data\n      });\n    });\n  }\n\n  render() {\n    const {\n      forecast,\n      orgs,\n      userPrediction,\n      confirmed\n    } = this.state;\n    if (!forecast || !orgs || !userPrediction || !confirmed) return 'Loading...';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chartContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LineCharts, {\n      dataSet: forecast,\n      orgs: orgs,\n      userPrediction: userPrediction,\n      confirmed: confirmed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default InteractiveChartContainer;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/containers/InteractiveChartContainer/index.js"],"names":["React","Component","InteractiveChart","cleanConfirmedData","organizeData","InteractiveCharts","dataSet","orgs","userPrediction","confirmed","map","data","index","InteractiveChartContainer","constructor","props","state","forecast","componentDidMount","fetch","then","res","json","results","setState","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,gBAAP,MAA6B,mCAA7B;AACA,SAASC,kBAAT,EAA6BC,YAA7B,QAAiD,kBAAjD;;AAEA,SAASC,iBAAT,CAA2B;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA,cAAjB;AAAiCC,EAAAA;AAAjC,CAA3B,EAAyE;AACrE,SAAOH,OAAO,CAACI,GAAR,CAAY,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAClC,wBACE,oBAAC,gBAAD;AAAkB,MAAA,QAAQ,EAAED,IAA5B;AAAkC,MAAA,GAAG,EAAEJ,IAAI,CAACK,KAAD,CAA3C;AAAoD,MAAA,cAAc,EAAEJ,cAApE;AAAoF,MAAA,SAAS,EAAEC,SAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD,GAJM,CAAP;AAKD;;AAEH,MAAMI,yBAAN,SAAwCZ,SAAxC,CAAkD;AAC9Ca,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,IADD;AAETV,MAAAA,IAAI,EAAE,IAFG;AAGTE,MAAAA,SAAS,EAAE,IAHF;AAITD,MAAAA,cAAc,EAAE;AAJP,KAAb;AAMH;;AAEDU,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAAC,0BAAD,CAAL,CAAkCC,IAAlC,CAAuCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA9C,EAA0DF,IAA1D,CAA+DT,IAAI,IAAI;AACnE,YAAM,CAACY,OAAD,EAAUhB,IAAV,IAAkBH,YAAY,CAACO,IAAD,CAApC;AACA,WAAKa,QAAL,CAAc;AAAEP,QAAAA,QAAQ,EAAEM,OAAZ;AAAqBhB,QAAAA;AAArB,OAAd;AACH,KAHD;AAIIY,IAAAA,KAAK,CAAC,kBAAD,CAAL,CAA0BC,IAA1B,CAA+BC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAtC,EAAkDF,IAAlD,CAAuDT,IAAI,IAAI;AAC/D,WAAKa,QAAL,CAAc;AAAEhB,QAAAA,cAAc,EAAEG;AAAlB,OAAd;AACH,KAFG;AAGJQ,IAAAA,KAAK,CAAC,0BAAD,CAAL,CAAkCC,IAAlC,CAAuCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA9C,EAA0DF,IAA1D,CAA+DT,IAAI,IAAI;AACnEc,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAOf,IAAnB,EADmE,CAEnE;;AACA,WAAKa,QAAL,CAAc;AAAEf,QAAAA,SAAS,EAAEE;AAAb,OAAd;AACH,KAJD;AAKH;;AACDgB,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEV,MAAAA,QAAF;AAAYV,MAAAA,IAAZ;AAAkBC,MAAAA,cAAlB;AAAkCC,MAAAA;AAAlC,QAAgD,KAAKO,KAA3D;AACA,QAAI,CAACC,QAAD,IAAa,CAACV,IAAd,IAAsB,CAACC,cAAvB,IAAyC,CAACC,SAA9C,EAAyD,OAAO,YAAP;AAEzD,wBACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AACI,MAAA,OAAO,EAAEQ,QADb;AAEI,MAAA,IAAI,EAAEV,IAFV;AAGI,MAAA,cAAc,EAAEC,cAHpB;AAII,MAAA,SAAS,EAAEC,SAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAUH;;AAvC6C;;AA0ClD,eAAeI,yBAAf","sourcesContent":["import React, { Component } from 'react';\nimport InteractiveChart from '../../components/InteractiveChart';\nimport { cleanConfirmedData, organizeData } from '../../utils/data';\n\nfunction InteractiveCharts({ dataSet, orgs, userPrediction, confirmed }) {\n    return dataSet.map((data, index) => {\n      return (\n        <InteractiveChart forecast={data} org={orgs[index]} userPrediction={userPrediction} confirmed={confirmed} />\n       );\n    })\n  }\n\nclass InteractiveChartContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            forecast: null,\n            orgs: null,\n            confirmed: null,\n            userPrediction: null\n        };\n    }\n\n    componentDidMount() {\n        fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n            const [results, orgs] = organizeData(data);\n            this.setState({ forecast: results, orgs });\n        });\n            fetch('/user-prediction').then(res => res.json()).then(data => {\n            this.setState({ userPrediction: data });\n        });\n        fetch('/us-inc-deaths-confirmed').then(res => res.json()).then(data => {\n            console.log(typeof data)\n            //const result = JSON.parse(data);\n            this.setState({ confirmed: data });\n        });\n    }\n    render() {\n        const { forecast, orgs, userPrediction, confirmed } = this.state;\n        if (!forecast || !orgs || !userPrediction || !confirmed) return 'Loading...';\n\n        return (\n            <div className=\"chartContainer\">\n                <LineCharts\n                    dataSet={forecast}\n                    orgs={orgs}\n                    userPrediction={userPrediction}\n                    confirmed={confirmed}\n                />\n            </div>\n        );\n    }\n}\n\nexport default InteractiveChartContainer;"]},"metadata":{},"sourceType":"module"}