{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './InteractiveChart.css';\nimport { cleanConfirmedData } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays } from '../../utils/date';\n\nclass InteractiveChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userPrediction: null\n    };\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    //console.log(this.props);\n    this.renderChart();\n  }\n\n  savePrediction(model, data) {\n    fetch('/update/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"model\": model,\n        \"data\": data\n      })\n    });\n  }\n\n  renderChart() {\n    const {\n      forecast,\n      org,\n      userPrediction,\n      confirmed\n    } = this.props;\n    console.log(confirmed);\n    const model = org; //console.log(model);\n\n    const confirmedResult = cleanConfirmedData(confirmed, Object.keys(forecast));\n    const savePrediction = this.savePrediction; //set up margin, width, height of chart\n\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        width = 800 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    var svg = d3.select(this.chartRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); //console.log(svg);\n    //line function        \n\n    /*var drawLine = d3.line()\n        .x(function(d) { return x(d.year) })\n        .y(function(d) { return y(d.debt) })*/\n    //process data\n\n    var confirmedData = Object.keys(confirmed).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: confirmed[key]\n    })); //get data starting 2020-02-01\n\n    confirmedData = confirmedData.filter(d => +d.date >= +new Date(\"2020-02-01\")); //draw x-axis\n\n    var predStartDate = confirmedData[0].date;\n    var predLength = 63;\n    var endDate = addDays(new Date(), predLength);\n    var x = d3.scaleTime().domain([predStartDate, endDate]).range([0, width]).nice();\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Add Y axis\n\n    var y = d3.scaleLinear().domain([0, d3.max(confirmedData, function (d) {\n      return +d.value;\n    })]).range([height, 0]).nice();\n    svg.append(\"g\").call(d3.axisLeft(y));\n    var line = d3.line().x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    });\n    var path = svg.append(\"path\").attr(\"id\", \"confirmed\").datum(confirmedData).attr('d', line);\n    var predictionData = [];\n    var currDate = confirmedData[confirmedData.length - 1].date;\n    var defined = true;\n    var value = confirmedData[confirmedData.length - 1].value;\n    var confirmedLastVal = value;\n\n    for (var i = 0; i < predLength; i++) {\n      predictionData.push({\n        date: currDate,\n        value: value,\n        defined: defined\n      });\n      currDate = addDays(currDate, 1);\n      defined = 0;\n      value = 0;\n    } //append click area rect\n\n\n    var confirmedAreaWidth = path.node().getBoundingClientRect().width;\n    var clickAreaWidth = width - confirmedAreaWidth;\n    console.log(path.node().getBoundingClientRect().left);\n    svg.append(\"rect\").attr(\"id\", \"click-area\").attr(\"width\", clickAreaWidth).attr(\"height\", height).attr(\"transform\", \"translate (\" + confirmedAreaWidth + \" 0)\").attr(\"fill\", \"none\").style(\"pointer-events\", \"visible\");\n    var clickArea = d3.select(\"#click-area\");\n    var predLine = d3.line().defined(d => d.defined).x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    });\n    var yourLine = svg.append(\"path\").attr(\"id\", \"your-line\");\n    var drag = d3.drag().on(\"drag\", function () {\n      var pos = d3.mouse(this);\n      var date = x.invert(pos[0]);\n      var value = y.invert(pos[1]);\n      console.log(value);\n      predictionData.forEach(function (d) {\n        if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date) && +d3.timeDay.round(d.date) != +predStartDate) {\n          d.value = value;\n          d.defined = true;\n        }\n\n        predictionData[0].value = confirmedLastVal;\n        yourLine.datum(predictionData).attr('d', predLine);\n      });\n    });\n    svg.call(drag);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default InteractiveChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js"],"names":["React","Component","d3","cleanConfirmedData","elementType","addDays","InteractiveChart","constructor","props","state","userPrediction","chartRef","createRef","componentDidMount","renderChart","savePrediction","model","data","fetch","method","headers","body","JSON","stringify","forecast","org","confirmed","console","log","confirmedResult","Object","keys","margin","top","right","bottom","left","width","height","svg","select","current","append","attr","confirmedData","map","key","date","timeParse","value","filter","d","Date","predStartDate","predLength","endDate","x","scaleTime","domain","range","nice","call","axisBottom","y","scaleLinear","max","axisLeft","line","path","datum","predictionData","currDate","length","defined","confirmedLastVal","i","push","confirmedAreaWidth","node","getBoundingClientRect","clickAreaWidth","style","clickArea","predLine","yourLine","drag","on","pos","mouse","invert","forEach","timeDay","round","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport './InteractiveChart.css';\nimport { cleanConfirmedData } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays } from '../../utils/date';\n\n\nclass InteractiveChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { userPrediction: null };\n        this.chartRef = React.createRef();\n    }\n    componentDidMount() {\n        //console.log(this.props);\n        this.renderChart();\n    }\n\n    savePrediction(model, data) {\n        fetch('/update/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"model\": model, \"data\": data}),\n        });\n    }\n\n    renderChart() {\n        const { forecast, org, userPrediction, confirmed } = this.props;\n        console.log(confirmed);\n        const model = org;\n        //console.log(model);\n        const confirmedResult = cleanConfirmedData(confirmed, Object.keys(forecast));\n        const savePrediction = this.savePrediction;\n        \n        //set up margin, width, height of chart\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right)\n                        .attr(\"height\", height + margin.top + margin.bottom)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\")\n        //console.log(svg);\n\n        //line function        \n        /*var drawLine = d3.line()\n            .x(function(d) { return x(d.year) })\n            .y(function(d) { return y(d.debt) })*/\n        //process data\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }))\n\n        //get data starting 2020-02-01\n        confirmedData = confirmedData.filter(d => +d.date >= +new Date(\"2020-02-01\"));\n\n        //draw x-axis\n        var predStartDate = confirmedData[0].date;\n        var predLength = 63;\n        var endDate = addDays(new Date(), predLength);\n        var x = d3.scaleTime()\n            .domain([predStartDate, endDate])\n            .range([ 0, width ])\n            .nice();\n         svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x));\n      // Add Y axis\n        var y = d3.scaleLinear()\n            .domain([0, d3.max(confirmedData, function(d) { return +d.value; })])\n            .range([ height, 0 ])\n            .nice();\n         svg.append(\"g\")\n            .call(d3.axisLeft(y));\n        \n        var line = d3.line()\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        var path = svg\n            .append(\"path\")\n            .attr(\"id\", \"confirmed\")    \n            .datum(confirmedData)    \n            .attr('d', line);\n\n        var predictionData = [];\n        var currDate = confirmedData[confirmedData.length - 1].date;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        var confirmedLastVal = value;\n        for (var i = 0; i < predLength; i++) {            \n            predictionData.push({date: currDate, value: value, defined: defined});\n            currDate = addDays(currDate, 1);\n            defined = 0;\n            value = 0;\n        }\n\n        //append click area rect\n        var confirmedAreaWidth = path.node().getBoundingClientRect().width;\n        var clickAreaWidth = width - confirmedAreaWidth;\n        console.log(path.node().getBoundingClientRect().left);\n        svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");\n        var clickArea = d3.select(\"#click-area\");\n        \n        var predLine = d3.line()\n                    .defined(d => d.defined)\n                    .x(function(d) { return x(d.date) })\n                    .y(function(d) { return y(d.value) })\n       \n        var yourLine = svg.append(\"path\")\n                      .attr(\"id\", \"your-line\");\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        var pos = d3.mouse(this);\n                        var date = x.invert(pos[0]);\n                        var value = y.invert(pos[1]);\n                        console.log(value);\n                \n                        predictionData.forEach(function(d){\n                        if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date) && (+d3.timeDay.round(d.date) != +predStartDate)){\n                            d.value = value;\n                            d.defined = true\n                        }\n                        predictionData[0].value = confirmedLastVal;\n\n                        yourLine.datum(predictionData)\n                                .attr('d', predLine)\n                    });\n        })\n        \n        svg.call(drag)\n        \n        \n    }\n        \n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default InteractiveChart;"]},"metadata":{},"sourceType":"module"}