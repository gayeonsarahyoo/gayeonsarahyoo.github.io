{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/UserPredictionChart/index.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './UserPredictionChart.css';\nimport { getMostRecentPrediction, sortDictByDate } from '../../utils/data';\n\nclass UserPredictionChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      category: \"us_daily_deaths\"\n    };\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    //console.log(this.props);\n    this.renderChart();\n  }\n\n  renderChart() {\n    const {\n      forecast,\n      orgs,\n      userPrediction,\n      confirmed,\n      aggregate\n    } = this.props;\n    var predictionData = {}; //where we will store formatted userPrediction\n\n    const category = this.state.category;\n    var compiledData = []; //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n\n    var confirmedData = Object.keys(confirmed).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: confirmed[key]\n    })); //store userPrediction in predictionData if it exists; parse dates and store as d3 date objects\n\n    if (Object.keys(userPrediction).length > 0) {\n      Object.keys(userPrediction).map(p => {\n        predictionData[p] = userPrediction[p].map(d => ({\n          date: d3.timeParse(\"%Y-%m-%d\")(d.date.substring(0, 10)),\n          value: d.value,\n          defined: d.defined\n        }));\n      });\n    }\n\n    predictionData = sortDictByDate(predictionData);\n    console.log(predictionData); //get most recent prediction\n\n    var dateList = Object.keys(predictionData);\n    const mostRecentPred = predictionData[dateList[dateList.length - 1]];\n    console.log(mostRecentPred); //push to compiledData\n\n    compiledData = [confirmedData, mostRecentPred];\n    console.log(compiledData); //IMPORTANT BOUNDARIES// \n\n    const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\");\n    const predEndDate = mostRecentPred[mostRecentPred.length - 1].date;\n    const valueMax = 5000;\n    var dates = [];\n    dates.push(d3.timeParse(\"%Y-%m-%d\")(\"2020-02-19\"));\n    dates.push(d3.timeParse(\"%Y-%m-%d\")(\"2020-03-01\"));\n    dates.push(d3.timeParse(\"%Y-%m-%d\")(\"2020-05-01\"));\n    console.log(d3.timeParse(\"%Y-%m-%d\")(dateList[0]));\n    /*dateList.map(d => {\n        dates.push({\n            date: d\n        })\n    })*/\n    /////////////////////////////////////////////////DRAW CHART//////////////////////////////\n    //set up margin, width, height of chart\n\n    const legendWidth = 180;\n    const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n\n    const contextHeight = 100;\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        width = 800 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    var svg = d3.select(this.chartRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right + legendWidth).attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    var x = d3.scaleTime().domain([confirmedStartDate, predEndDate]).range([0, width]);\n    var xAxis = svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x));\n    var y = d3.scaleLinear().domain([0, valueMax]).range([height, 0]);\n    var yAxis = svg.append(\"g\").call(d3.axisLeft(y)); //DRAW LEGEND//\n\n    const legendString = [\"Daily Confirmed Deaths\", \"User Prediction\"];\n    const color = d3.scaleOrdinal().domain(legendString).range(d3.schemeTableau10);\n    const legend = svg.append('g').attr(\"id\", \"legend\");\n    legend.selectAll(\"rect\").data(legendString).enter().append(\"circle\").attr('cx', width + 30).attr(\"cy\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .attr(\"r\", 6) //.attr(\"width\", size)\n    //.attr(\"height\", size)\n    .style(\"fill\", function (d) {\n      return color(d);\n    });\n    legend.selectAll(\"labels\").data(legendString).enter().append(\"text\").attr(\"x\", width + 45).attr(\"y\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .style(\"fill\", function (d) {\n      return color(d);\n    }).text(function (d) {\n      return d;\n    }).attr(\"text-anchor\", \"left\").style(\"alignment-baseline\", \"middle\"); //SET UP CLIP PATH//\n\n    var mainClip = svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\", \"main-clip\").append(\"svg:rect\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", 0).attr(\"y\", 0);\n    const mainArea = svg.append(\"g\").attr(\"clip-path\", \"url(#main-clip)\"); //SET UP CURVES//\n\n    const lineGenerator = d3.line().curve(d3.curveCatmullRom);\n    const predLineGenerator = d3.line().curve(d3.curveBasis);\n    const line = lineGenerator.x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    });\n    const predLine = predLineGenerator.defined(d => d.defined).x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }); //DRAW CURVES//\n\n    var confirmedCurve = mainArea.append(\"path\").attr(\"id\", \"confirmed\").attr(\"class\", \"line\").datum(confirmedData).attr(\"d\", line).attr(\"stroke\", color(legendString[0]));\n    var predCurve = mainArea.append(\"path\").attr(\"id\", \"prediction\").attr(\"class\", \"line\").datum(mostRecentPred.filter(predLine.defined())).attr(\"d\", predLine).attr(\"stroke\", color(legendString[1])); //SET UP TOOLTIP//\n\n    const tooltip = svg.append(\"g\").attr(\"class\", \"tooltip\");\n    tooltip.append(\"path\").attr(\"id\", \"tooltip-line\").style(\"stroke\", \"black\").style(\"stroke-width\", \"0.5px\").style(\"opacity\", \"0\");\n    var mousePerLine = tooltip.selectAll(\".mouse-per-line\").data(compiledData).enter().append(\"g\").attr(\"class\", \"mouse-per-line\");\n    mousePerLine.append(\"circle\").attr(\"r\", 2).style(\"stroke\", function (d, index) {\n      console.log(index);\n      return color(legendString[index]);\n    }).style(\"fill\", \"none\").style(\"stroke-width\", \"1px\").style(\"opacity\", \"0\");\n    mousePerLine.append(\"text\").attr(\"transform\", \"translate(10,3)\");\n    svg.append(\"svg:rect\").attr('width', width).attr('height', height).attr(\"id\", \"interactive-area\").attr('fill', 'none').attr('pointer-events', 'all').style(\"cursor\", \"pointer\").on('mouseout', function () {\n      // on mouse out hide line, circles and text\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"0\");\n    }).on('mouseover', function () {\n      // on mouse in show line, circles and text\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"1\");\n    }).on('mousemove', function () {\n      // mouse moving over canvas\n      var mouse = d3.mouse(this);\n      var xCoord = mouse[0];\n      d3.select(\"#tooltip-line\").attr(\"d\", function () {\n        var d = \"M\" + xCoord + \",\" + height;\n        d += \" \" + xCoord + \",\" + 0;\n        return d;\n      });\n      d3.selectAll(\".mouse-per-line\").attr(\"transform\", function (d, i) {\n        if (d.length == 0) {\n          return;\n        }\n\n        var date = x.invert(xCoord);\n        const index = d3.bisector(f => f.date).left(compiledData[i], date);\n        var a = null;\n\n        if (index > 0) {\n          a = d[index - 1];\n        }\n\n        const b = d[index]; //d = the data object corresponding to date and value pointed by the cursors\n\n        var data = null;\n\n        if (!a) {\n          data = b;\n        } else if (!b) {\n          data = a;\n        } else {\n          data = b && date - a.date > b.date - date ? b : a;\n        }\n\n        if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n          if (data.defined != 0) {\n            var element = d3.select(this).select('text').style(\"opacity\", \"1\").text(Math.round(data.value).toFixed(2));\n            element.select(\"circle\").style(\"opacity\", \"1\");\n            return \"translate(\" + mouse[0] + \",\" + y(data.value) + \")\";\n          }\n        }\n\n        var element = d3.select(this).select(\"text\").style(\"opacity\", \"0\");\n        element.select(\"circle\").style(\"opacity\", \"0\");\n      });\n    }).on(\"click\", function () {\n      var date = x.invert(d3.mouse(this)[0]);\n      const index = d3.bisectRight(dates, date);\n\n      if (predictionData[date]) {\n        console.log(\"exists\");\n        svg.select(\"#prediction\").datum(predictionData[date].filter(predLine.defined())).attr(\"d\", predLine);\n      } else {\n        if (index == 0) {\n          svg.select(\"#prediction\").datum([]).attr(\"d\", predLine);\n        } else {\n          date = dates[index - 1];\n          svg.select(\"#prediction\").datum(predictionData[date].filter(predLine.defined())).attr(\"d\", predLine);\n        }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default UserPredictionChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/UserPredictionChart/index.js"],"names":["React","Component","d3","getMostRecentPrediction","sortDictByDate","UserPredictionChart","constructor","props","state","category","chartRef","createRef","componentDidMount","renderChart","forecast","orgs","userPrediction","confirmed","aggregate","predictionData","compiledData","confirmedData","Object","keys","map","key","date","timeParse","value","length","p","d","substring","defined","console","log","dateList","mostRecentPred","confirmedStartDate","predEndDate","valueMax","dates","push","legendWidth","toolTipHeight","contextHeight","margin","top","right","bottom","left","width","height","svg","select","current","append","attr","x","scaleTime","domain","range","xAxis","call","axisBottom","y","scaleLinear","yAxis","axisLeft","legendString","color","scaleOrdinal","schemeTableau10","legend","selectAll","data","enter","i","style","text","mainClip","mainArea","lineGenerator","line","curve","curveCatmullRom","predLineGenerator","curveBasis","predLine","confirmedCurve","datum","predCurve","filter","tooltip","mousePerLine","index","on","mouse","xCoord","invert","bisector","f","a","b","timeDay","floor","ceil","element","Math","round","toFixed","bisectRight","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './UserPredictionChart.css';\nimport { getMostRecentPrediction, sortDictByDate } from '../../utils/data';\n\nclass UserPredictionChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\" };\n        this.chartRef = React.createRef();\n    }\n\n    componentDidMount() {\n        //console.log(this.props);\n        this.renderChart();\n    }\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = {};//where we will store formatted userPrediction\n        const category = this.state.category;\n        var compiledData = [];\n\n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n\n        //store userPrediction in predictionData if it exists; parse dates and store as d3 date objects\n        if(Object.keys(userPrediction).length > 0) {\n            Object.keys(userPrediction).map(p => {\n                predictionData[p]= userPrediction[p].map(d => ({\n                    date: d3.timeParse(\"%Y-%m-%d\")((d.date).substring(0,10)),\n                    value: d.value,\n                    defined: d.defined\n                }))\n            })\n        }\n        predictionData = sortDictByDate(predictionData);\n        console.log(predictionData)\n        //get most recent prediction\n        var dateList = Object.keys(predictionData)\n        const mostRecentPred = predictionData[dateList[dateList.length - 1]]\n        console.log(mostRecentPred)\n        //push to compiledData\n        compiledData = [confirmedData, mostRecentPred]\n        console.log(compiledData)\n\n        //IMPORTANT BOUNDARIES// \n        const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\");\n        const predEndDate = mostRecentPred[mostRecentPred.length - 1].date;\n        const valueMax = 5000;\n        var dates = [];\n        dates.push(d3.timeParse(\"%Y-%m-%d\")(\"2020-02-19\"))\n        dates.push(d3.timeParse(\"%Y-%m-%d\")(\"2020-03-01\"))\n        dates.push(d3.timeParse(\"%Y-%m-%d\")(\"2020-05-01\"))\n        console.log(d3.timeParse(\"%Y-%m-%d\")(dateList[0]))\n        \n\n        /*dateList.map(d => {\n            dates.push({\n                date: d\n            })\n        })*/\n\n        /////////////////////////////////////////////////DRAW CHART//////////////////////////////\n        //set up margin, width, height of chart\n        const legendWidth = 180;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        var x = d3\n                    .scaleTime()\n                    .domain([confirmedStartDate, predEndDate])\n                    .range([0, width]);\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        var y = d3\n                    .scaleLinear()\n                    .domain([0, valueMax])\n                    .range([height, 0]);\n        var yAxis = svg\n                        .append(\"g\")\n                        .call(d3.axisLeft(y));\n        \n        //DRAW LEGEND//\n        const legendString = [\"Daily Confirmed Deaths\", \"User Prediction\"];\n        const color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n        const legend = svg\n                            .append('g')\n                            .attr(\"id\", \"legend\");\n        legend\n                .selectAll(\"rect\")\n                .data(legendString)\n                .enter()\n                .append(\"circle\")\n                    .attr('cx', width + 30)\n                    .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .attr(\"r\", 6)\n                    //.attr(\"width\", size)\n                    //.attr(\"height\", size)\n                    .style(\"fill\", function(d){ return color(d)})\n        legend\n                .selectAll(\"labels\")\n                .data(legendString)\n                .enter()\n                .append(\"text\")\n                    .attr(\"x\", width + 45)\n                    .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .style(\"fill\", function(d){ return color(d)})\n                    .text(function(d){ return d})\n                        .attr(\"text-anchor\", \"left\")\n                        .style(\"alignment-baseline\", \"middle\")\n        \n        //SET UP CLIP PATH//\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n        const mainArea = svg.append(\"g\")\n                            .attr(\"clip-path\", \"url(#main-clip)\");\n        \n        //SET UP CURVES//\n        const lineGenerator = d3.line()\n                                .curve(d3.curveCatmullRom);\n        const predLineGenerator = d3.line()\n                                    .curve(d3.curveBasis);\n        const line = lineGenerator\n                        .x(function(d) { return x(d.date) })\n                        .y(function(d) { return y(d.value) })\n        const predLine = predLineGenerator\n                            .defined(d => d.defined)\n                            .x(function(d) { return x(d.date) })\n                            .y(function(d) { return y(d.value) })\n        //DRAW CURVES//\n        var confirmedCurve = mainArea\n                                    .append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")\n                                    .datum(confirmedData)\n                                    .attr(\"d\", line)\n                                    .attr(\"stroke\", color(legendString[0]))\n        var predCurve = mainArea\n                                .append(\"path\")\n                                .attr(\"id\", \"prediction\")\n                                .attr(\"class\", \"line\")\n                                .datum(mostRecentPred.filter(predLine.defined()))\n                                .attr(\"d\", predLine)\n                                .attr(\"stroke\",  color(legendString[1]))\n        \n        //SET UP TOOLTIP//\n        const tooltip = svg \n                            .append(\"g\")\n                            .attr(\"class\", \"tooltip\")\n        tooltip\n                .append(\"path\")\n                .attr(\"id\", \"tooltip-line\")\n                .style(\"stroke\", \"black\")\n                .style(\"stroke-width\", \"0.5px\")\n                .style(\"opacity\", \"0\");\n        var mousePerLine = tooltip\n                                    .selectAll(\".mouse-per-line\")\n                                    .data(compiledData)\n                                    .enter()\n                                    .append(\"g\")\n                                    .attr(\"class\", \"mouse-per-line\");\n        mousePerLine.append(\"circle\")\n                    .attr(\"r\", 2)\n                    .style(\"stroke\", function(d, index) {\n                        console.log(index)\n                        return color(legendString[index]);\n                    })\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke-width\", \"1px\")\n                    .style(\"opacity\", \"0\");\n        mousePerLine.append(\"text\")\n                    .attr(\"transform\", \"translate(10,3)\"); \n        \n        svg\n                .append(\"svg:rect\")\n                    .attr('width', width)\n                    .attr('height', height)\n                    .attr(\"id\", \"interactive-area\")\n                    .attr('fill', 'none')\n                    .attr('pointer-events', 'all')\n                    .style(\"cursor\", \"pointer\")\n                    .on('mouseout', function() { // on mouse out hide line, circles and text\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"0\")\n                    })\n                    .on('mouseover', function() { // on mouse in show line, circles and text\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"1\")\n                    })\n                    .on('mousemove', function() { // mouse moving over canvas\n                        var mouse = d3.mouse(this);\n                        var xCoord = mouse[0];\n                        d3\n                            .select(\"#tooltip-line\")\n                            .attr(\"d\", function() {\n                                var d = \"M\" + xCoord + \",\" + height;\n                                d += \" \" + xCoord + \",\" + 0;\n                                return d;\n                            });\n                        d3\n                            .selectAll(\".mouse-per-line\")\n                            .attr(\"transform\", function(d, i) {\n                                if (d.length == 0) {return;}\n                                var date = x.invert(xCoord);\n                                const index = d3.bisector(f => f.date).left(compiledData[i], date);\n                                var a = null;\n                                if (index > 0) {\n                                    a = d[index - 1];\n                                }\n                                const b = d[index];\n                                //d = the data object corresponding to date and value pointed by the cursors\n                                var data = null;\n                                if (!a) {\n                                    data = b;\n                                }\n                                else if (!b) {\n                                    data = a;\n                                }\n                                else {\n                                    data = b && (date - a.date > b.date - date) ? b : a;\n                                }\n                                if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n                                    if (data.defined != 0) {\n                                        var element = d3.select(this)\n                                                        .select('text')\n                                                            .style(\"opacity\", \"1\")\n                                                            .text(Math.round(data.value).toFixed(2));\n                                        element.select(\"circle\")\n                                                .style(\"opacity\", \"1\");\n                                        return \"translate(\" + mouse[0] + \",\" + y(data.value)+\")\";\n                                    }\n                                }\n                                var element = d3.select(this)\n                                                .select(\"text\")\n                                                .style(\"opacity\", \"0\")\n                                element\n                                        .select(\"circle\")\n                                        .style(\"opacity\", \"0\");\n                            });\n                    })\n                    .on(\"click\", function() {\n                        var date = x.invert(d3.mouse(this)[0])\n                        const index = d3.bisectRight(dates, date);\n                        if(predictionData[date]) {\n                            console.log(\"exists\")\n                            svg\n                                .select(\"#prediction\")\n                                .datum(predictionData[date].filter(predLine.defined()))\n                                .attr(\"d\", predLine)\n                        }\n                        else {\n                            if (index == 0) {\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum([])\n                                    .attr(\"d\", predLine)\n                            }\n                            else {\n                                date = dates[index - 1];\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum(predictionData[date].filter(predLine.defined()))\n                                    .attr(\"d\", predLine);\n                            }\n                        }\n                    })\n        \n                \n    }\n\n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default UserPredictionChart;\n"]},"metadata":{},"sourceType":"module"}