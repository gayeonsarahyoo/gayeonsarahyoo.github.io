{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './InteractiveChart.css';\nimport { cleanConfirmedData } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays } from '../../utils/date';\n\nclass InteractiveChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userPrediction: null\n    };\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    //console.log(this.props);\n    this.renderChart();\n  }\n\n  savePrediction(model, data) {\n    fetch('/update/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"model\": model,\n        \"data\": data\n      })\n    });\n  }\n\n  renderChart() {\n    const {\n      forecast,\n      org,\n      userPrediction,\n      confirmed\n    } = this.props;\n    console.log(confirmed);\n    const model = org; //console.log(model);\n\n    const confirmedResult = cleanConfirmedData(confirmed, Object.keys(forecast));\n    const savePrediction = this.savePrediction; //set up margin, width, height of chart\n\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        width = 800 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    var svg = d3.select(this.chartRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); //console.log(svg);\n    //line function        \n\n    /*var drawLine = d3.line()\n        .x(function(d) { return x(d.year) })\n        .y(function(d) { return y(d.debt) })*/\n    //process data\n\n    var confirmedData = Object.keys(confirmed).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: confirmed[key]\n    })); //get data starting 2020-02-01\n\n    confirmedData = confirmedData.filter(d => +d.date >= +new Date(\"2020-02-01\")); //draw x-axis\n\n    var startDate = confirmedData[0].date;\n    var endDate = addDays(new Date(), 31);\n    console.log(endDate);\n    var x = d3.scaleTime().domain([startDate, endDate]).range([0, width]).nice();\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Add Y axis\n\n    var y = d3.scaleLinear().domain([0, d3.max(confirmedData, function (d) {\n      return +d.value;\n    })]).range([height, 0]).nice();\n    svg.append(\"g\").call(d3.axisLeft(y));\n    var line = d3.line().x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    });\n    var path = svg.append(\"path\").attr(\"id\", \"confirmed\").datum(confirmedData).attr('d', line);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default InteractiveChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js"],"names":["React","Component","d3","cleanConfirmedData","elementType","addDays","InteractiveChart","constructor","props","state","userPrediction","chartRef","createRef","componentDidMount","renderChart","savePrediction","model","data","fetch","method","headers","body","JSON","stringify","forecast","org","confirmed","console","log","confirmedResult","Object","keys","margin","top","right","bottom","left","width","height","svg","select","current","append","attr","confirmedData","map","key","date","timeParse","value","filter","d","Date","startDate","endDate","x","scaleTime","domain","range","nice","call","axisBottom","y","scaleLinear","max","axisLeft","line","path","datum","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport './InteractiveChart.css';\nimport { cleanConfirmedData } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays } from '../../utils/date';\n\n\nclass InteractiveChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { userPrediction: null };\n        this.chartRef = React.createRef();\n    }\n    componentDidMount() {\n        //console.log(this.props);\n        this.renderChart();\n    }\n\n    savePrediction(model, data) {\n        fetch('/update/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"model\": model, \"data\": data}),\n        });\n    }\n\n    renderChart() {\n        const { forecast, org, userPrediction, confirmed } = this.props;\n        console.log(confirmed);\n        const model = org;\n        //console.log(model);\n        const confirmedResult = cleanConfirmedData(confirmed, Object.keys(forecast));\n        const savePrediction = this.savePrediction;\n        \n        //set up margin, width, height of chart\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right)\n                        .attr(\"height\", height + margin.top + margin.bottom)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\")\n        //console.log(svg);\n\n        //line function        \n        /*var drawLine = d3.line()\n            .x(function(d) { return x(d.year) })\n            .y(function(d) { return y(d.debt) })*/\n        //process data\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }))\n\n        //get data starting 2020-02-01\n        confirmedData = confirmedData.filter(d => +d.date >= +new Date(\"2020-02-01\"));\n\n        //draw x-axis\n        var startDate = confirmedData[0].date;\n        var endDate = addDays(new Date(), 31);\n        console.log(endDate);\n        var x = d3.scaleTime()\n            .domain([startDate, endDate])\n            .range([ 0, width ])\n            .nice();\n         svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x));\n      // Add Y axis\n        var y = d3.scaleLinear()\n            .domain([0, d3.max(confirmedData, function(d) { return +d.value; })])\n            .range([ height, 0 ])\n            .nice();\n         svg.append(\"g\")\n            .call(d3.axisLeft(y));\n        \n        var line = d3.line()\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        var path = svg\n            .append(\"path\")\n            .attr(\"id\", \"confirmed\")    \n            .datum(confirmedData)    \n            .attr('d', line);\n\n\n\n        }\n        \n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default InteractiveChart;"]},"metadata":{},"sourceType":"module"}