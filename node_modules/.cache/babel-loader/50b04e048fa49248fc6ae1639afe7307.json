{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './InteractiveChart.css';\nimport { cleanConfirmedData, clamp } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\n\nclass InteractiveChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      category: \"us_daily_deaths\"\n    };\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    //console.log(this.props);\n    this.renderChart();\n  } //move to utils\n\n\n  savePrediction(data, category) {\n    fetch('/update/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"data\": data,\n        \"category\": category\n      })\n    });\n  }\n\n  renderChart() {\n    const {\n      forecast,\n      orgs,\n      userPrediction,\n      confirmed\n    } = this.props;\n    var predictionData = []; //where we will store formatted userPrediction\n\n    const savePrediction = this.savePrediction;\n    const category = this.state.category; //set up margin, width, height of chart\n\n    var legendWidth = 180;\n    var toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        width = 800 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    var svg = d3.select(this.chartRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right + legendWidth).attr(\"height\", height + margin.top + margin.bottom + toolTipHeight).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n\n    var confirmedData = Object.keys(confirmed).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: confirmed[key]\n    }));\n    var forecastData = forecast.map(f => {\n      return Object.keys(f).map(key => ({\n        date: d3.timeParse(\"%Y-%m-%d\")(key),\n        value: f[key]\n      }));\n    });\n\n    if (userPrediction) {\n      predictionData = userPrediction.map(p => ({\n        date: d3.timeParse(\"%Y-%m-%d\")(p.date.substring(0, 10)),\n        value: p.value,\n        defined: p.defined\n      }));\n    } //get confirmedData starting from confirmedStartDate\n\n\n    var confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\"); //date format: y-m-d\n\n    confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate); //set other dates\n\n    var predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n\n    var predLength = 365;\n    var predEndDate = d3.time.format(\"%Y-%m-%d\")(addDays(new Date(), predLength));\n    console.log(predEndDate); //draw x-axis\n\n    var x = d3.scaleTime().domain([confirmedStartDate, predEndDate]).range([0, width]).nice();\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); //find max val in confirmedData and forecastData to determine the max of y-axis\n\n    var confirmedMax = d3.max(confirmedData, function (d) {\n      return +d.value;\n    });\n    var forecastMax = 0;\n    forecastData.map(f => {\n      var currMax = d3.max(f, d => {\n        return d.value;\n      });\n      forecastMax = currMax > forecastMax ? currMax : forecastMax;\n    });\n    var yAxisMax = Math.max(confirmedMax, forecastMax); // Add Y axis\n\n    var y = d3.scaleLinear().domain([0, yAxisMax]).range([height, 0]).nice();\n    svg.append(\"g\").call(d3.axisLeft(y));\n    var lineGenerator = d3.line().curve(d3.curveCatmullRom);\n    var predLineGenerator = d3.line().curve(d3.curveBasis); //d3.curveMonotoneX\n    //d3.curveBasis\n    //d3.curveCardinal\n\n    var line = lineGenerator.x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    });\n    var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"User Prediction\"]);\n    var color = d3.scaleOrdinal().domain(legendString).range(d3.schemeSet2);\n    var confirmedLine = svg.append(\"path\").attr(\"id\", \"confirmed\").datum(confirmedData).attr('d', line).attr(\"stroke\", color(legendString[legendString.length - 2])); //draw forecasts\n\n    forecastData.map((f, index) => {\n      svg.append(\"path\").attr(\"class\", \"forecast\").attr(\"id\", orgs[index]).style(\"stroke\", color(orgs[index])).datum(f).attr(\"d\", line);\n    }); //draw legend\n\n    var legend = svg.append('g').attr(\"id\", \"legend\");\n    var size = 10;\n    legend.selectAll(\"rect\").data(legendString).enter().append(\"circle\").attr('cx', width + 30).attr(\"cy\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .attr(\"r\", 6) //.attr(\"width\", size)\n    //.attr(\"height\", size)\n    .style(\"fill\", function (d) {\n      return color(d);\n    });\n    legend.selectAll(\"labels\").data(legendString).enter().append(\"text\").attr(\"x\", width + 45).attr(\"y\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .style(\"fill\", function (d) {\n      return color(d);\n    }).text(function (d) {\n      return d;\n    }).attr(\"text-anchor\", \"left\").style(\"alignment-baseline\", \"middle\");\n    var currDate = predStartDate;\n    var defined = true;\n    var value = confirmedData[confirmedData.length - 1].value;\n    var confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n    //check if userPrediction already exists in db\n\n    console.log(predStartDate, predEndDate);\n    console.log(predictionData);\n    var predLine = predLineGenerator.defined(d => d.defined).x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    });\n    var yourLine = svg.append(\"path\").attr(\"id\", \"your-line\");\n\n    if (userPrediction) {\n      predictionData = predictionData.filter(d => +d.date >= +predStartDate && +d.date <= +predEndDate);\n      predictionData[0].value = value;\n      defined = false;\n      value = 0;\n      currDate = addDays(predictionData[predictionData.length - 1].date, 1);\n      console.log(predictionData);\n    }\n\n    while (+currDate <= +predEndDate) {\n      predictionData.push({\n        date: currDate,\n        value: value,\n        defined: defined\n      });\n      currDate = addDays(currDate, 1);\n      defined = 0;\n      value = 0;\n    }\n\n    console.log(predictionData);\n    var filteredData = null;\n    var totalData = confirmedData.concat(predictionData);\n\n    if (userPrediction) {\n      filteredData = predictionData.filter(predLine.defined());\n      yourLine.datum(filteredData).attr('d', predLine);\n    } //append click area rect\n\n\n    var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width;\n    var clickAreaWidth = width - confirmedAreaWidth; //console.log(confirmedLine.node().getBoundingClientRect().left);\n\n    svg.append(\"rect\").attr(\"id\", \"click-area\").attr(\"width\", clickAreaWidth).attr(\"height\", height).attr(\"transform\", \"translate (\" + confirmedAreaWidth + \" 0)\").attr(\"fill\", \"none\").style(\"pointer-events\", \"visible\");\n    var clickArea = d3.select(\"#click-area\");\n    /*var gapLine = svg.append(\"path\")\n                        .attr(\"id\", \"gap-line\");*/\n\n    var drag = d3.drag().on(\"drag\", function () {\n      var pos = d3.mouse(this);\n      var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n      var value = clamp(0, yAxisMax, y.invert(pos[1])); //var date = x.invert(pos[0]);\n      //var value = y.invert(pos[1]);\n\n      console.log(value);\n      predictionData.forEach(function (d) {\n        if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date) && +d3.timeDay.round(d.date) != +predStartDate) {\n          d.value = value;\n          d.defined = true;\n        }\n\n        predictionData[0].value = confirmedLastVal; //save prediction data\n        //update totalData everytime predictionData is updated\n\n        totalData = confirmedData.concat(predictionData);\n        /*yourLine.datum(predictionData)\n                .attr('d', predLine)*/\n\n        var filteredData = predictionData.filter(predLine.defined());\n        yourLine.datum(filteredData).attr('d', predLine);\n        /*gapLine.datum(filteredData)\n                .attr('d', predLine(filteredData));*/\n      });\n    }).on(\"end\", function () {\n      savePrediction(predictionData, category);\n    });\n    svg.call(drag); //finds the datapoint closest to the mouse (along x)\n\n    var bisect = () => {\n      const bisectDate = d3.bisector(d => d.date).left;\n      return mx => {\n        const date = x.invert(mx);\n        const index = bisectDate(totalData, date, 1);\n        const a = totalData[index - 1];\n        const b = totalData[index];\n        return b && date - a.date > b.date - date ? b : a;\n      };\n    };\n\n    var callout = (g, value) => {\n      if (!value) return g.style(\"display\", \"none\");\n      g.style(\"display\", null).style(\"pointer-events\", \"none\").style(\"font\", \"10px sans-serif\");\n      const path = g.selectAll(\"path\").data([null]).join(\"path\").attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n      const text = g.selectAll(\"text\").data([null]).join(\"text\").call(text => text.selectAll(\"tspan\").data((value + \"\").split(/\\n/)).join(\"tspan\").attr(\"x\", 0).attr(\"y\", (d, i) => `${i * 1.1}em`).style(\"font-weight\", (_, i) => i ? null : \"bold\").text(d => d));\n      const {\n        x,\n        y,\n        width: w,\n        height: h\n      } = text.node().getBBox();\n      text.attr(\"transform\", `translate(${-w / 2},${15 - y})`);\n      path.attr(\"d\", `M${-w / 2 - 10},5H-5l5,-5l5,5H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n    };\n\n    const tooltip = svg.append(\"g\");\n    const mouseArea = svg.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"none\").style(\"pointer-events\", \"visible\");\n    svg.on(\"touchmove mousemove\", function () {\n      console.log(\"yep\");\n      var date = x.invert(d3.mouse(this)[0]);\n      const index = d3.bisector(d => d.date).left(totalData, date, 1);\n      const a = totalData[index - 1];\n      const b = totalData[index]; //d = the data object corresponding to date and value pointed by the cursors\n\n      var d = b && date - a.date > b.date - date ? b : a;\n      date = d.date;\n      var value = Math.round(d.value); //if (value != 0) {\n\n      tooltip.attr(\"transform\", `translate(${x(date)},${y(value)})`).call(callout, `${value}\n                ${formatDate(date)}`); //}\n    });\n    svg.on(\"touchend mouseleave\", () => tooltip.call(callout, null));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default InteractiveChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js"],"names":["React","Component","d3","cleanConfirmedData","clamp","elementType","addDays","formatDate","InteractiveChart","constructor","props","state","category","chartRef","createRef","componentDidMount","renderChart","savePrediction","data","fetch","method","headers","body","JSON","stringify","forecast","orgs","userPrediction","confirmed","predictionData","legendWidth","toolTipHeight","margin","top","right","bottom","left","width","height","svg","select","current","append","attr","confirmedData","Object","keys","map","key","date","timeParse","value","forecastData","f","p","substring","defined","confirmedStartDate","filter","d","predStartDate","length","predLength","predEndDate","time","format","Date","console","log","x","scaleTime","domain","range","nice","call","axisBottom","confirmedMax","max","forecastMax","currMax","yAxisMax","Math","y","scaleLinear","axisLeft","lineGenerator","line","curve","curveCatmullRom","predLineGenerator","curveBasis","legendString","concat","color","scaleOrdinal","schemeSet2","confirmedLine","datum","index","style","legend","size","selectAll","enter","i","text","currDate","confirmedLastVal","predLine","yourLine","push","filteredData","totalData","confirmedAreaWidth","node","getBoundingClientRect","clickAreaWidth","clickArea","drag","on","pos","mouse","invert","forEach","timeDay","round","bisect","bisectDate","bisector","mx","a","b","callout","g","path","join","split","_","w","h","getBBox","tooltip","mouseArea","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport './InteractiveChart.css';\nimport { cleanConfirmedData, clamp } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\n\n\nclass InteractiveChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\" };\n        this.chartRef = React.createRef();\n    }\n    componentDidMount() {\n        //console.log(this.props);\n        this.renderChart();\n    }\n\n    //move to utils\n    savePrediction(data, category) {\n        fetch('/update/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"data\": data, \"category\": category}),\n        });\n    }\n\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed } = this.props;\n        var predictionData = [];//where we will store formatted userPrediction\n        const savePrediction = this.savePrediction;\n        const category = this.state.category;\n        \n        //set up margin, width, height of chart\n        var legendWidth = 180;\n        var toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }))\n        var forecastData = forecast.map(f => {\n            return Object.keys(f).map(key => ({\n                date: d3.timeParse(\"%Y-%m-%d\")(key),\n                value: f[key]\n            }))\n        });\n        if(userPrediction) {\n            predictionData = userPrediction.map(p => ({\n                date: d3.timeParse(\"%Y-%m-%d\")((p.date).substring(0,10)),\n                value: p.value,\n                defined: p.defined\n                })\n            );\n        }\n\n        //get confirmedData starting from confirmedStartDate\n        var confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\"); //date format: y-m-d\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n        \n        //set other dates\n        var predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n        var predLength = 365;\n        var predEndDate = d3.time.format(\"%Y-%m-%d\")(addDays(new Date(), predLength));\n        console.log(predEndDate)\n\n        //draw x-axis\n        \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            .nice();\n         svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        // Add Y axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg.append(\"g\")\n            .call(d3.axisLeft(y));\n        \n        var lineGenerator = d3.line()\n            .curve(d3.curveCatmullRom)\n            \n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis);\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"User Prediction\"]);\n\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeSet2);\n        var confirmedLine = svg\n            .append(\"path\")\n            .attr(\"id\", \"confirmed\")    \n            .datum(confirmedData)    \n            .attr('d', line)\n            .attr(\"stroke\", color(legendString[legendString.length - 2]))\n        \n        //draw forecasts\n\n        forecastData.map((f, index) => {\n            svg\n                .append(\"path\")\n                    .attr(\"class\", \"forecast\")\n                    .attr(\"id\", orgs[index])\n                    .style(\"stroke\", color(orgs[index]))\n                .datum(f)\n                    .attr(\"d\", line);\n        })\n        //draw legend\n        var legend = svg.append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n\n        legend.selectAll(\"rect\")\n            .data(legendString)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', width + 30)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", function(d){ return color(d)})\n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", width + 45)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .style(\"fill\", function(d){ return color(d)})\n                .text(function(d){ return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        var confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n\n        //check if userPrediction already exists in db\n        console.log(predStartDate, predEndDate);\n        console.log(predictionData)\n\n        var predLine = predLineGenerator\n                    .defined(d => d.defined)\n                    .x(function(d) { return x(d.date) })\n                    .y(function(d) { return y(d.value) })\n       \n        var yourLine = svg.append(\"path\")\n                      .attr(\"id\", \"your-line\");\n\n        if (userPrediction) {\n            predictionData = predictionData.filter(d => (+d.date >= +predStartDate) && (+d.date <= +predEndDate));\n            predictionData[0].value = value;\n            defined = false;\n            value = 0;\n            currDate = addDays(predictionData[predictionData.length - 1].date, 1);\n            console.log(predictionData)\n        }\n        \n        while (+currDate <= +predEndDate) {            \n            predictionData.push({date: currDate, value: value, defined: defined});\n            currDate = addDays(currDate, 1);\n            defined = 0;\n            value = 0;\n        }\n        console.log(predictionData)\n        var filteredData = null;\n        \n        var totalData = confirmedData.concat(predictionData);\n\n        if(userPrediction) {\n            filteredData = predictionData.filter(predLine.defined())\n            yourLine.datum(filteredData)\n                    .attr('d', predLine)\n        }\n\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width;\n        var clickAreaWidth = width - confirmedAreaWidth;\n        //console.log(confirmedLine.node().getBoundingClientRect().left);\n        svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");\n        var clickArea = d3.select(\"#click-area\");\n        \n        /*var gapLine = svg.append(\"path\")\n                            .attr(\"id\", \"gap-line\");*/\n        \n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        //var date = x.invert(pos[0]);\n                        //var value = y.invert(pos[1]);\n                        console.log(value);\n                \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date) && (+d3.timeDay.round(d.date) != +predStartDate)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                            predictionData[0].value = confirmedLastVal;\n                            //save prediction data\n                            //update totalData everytime predictionData is updated\n                            totalData = confirmedData.concat(predictionData);\n                            /*yourLine.datum(predictionData)\n                                    .attr('d', predLine)*/\n                            var filteredData = predictionData.filter(predLine.defined())\n\n                            yourLine.datum(filteredData)\n                                    .attr('d', predLine)\n                            \n                            /*gapLine.datum(filteredData)\n                                    .attr('d', predLine(filteredData));*/\n                        });\n                    })\n                    .on(\"end\", function () {\n                        savePrediction(predictionData, category);\n                    });\n        \n        svg.call(drag)\n\n        //finds the datapoint closest to the mouse (along x)\n        var bisect = () => {\n            const bisectDate = d3.bisector(d => d.date).left;\n            return mx => {\n                const date = x.invert(mx);\n                const index = bisectDate(totalData, date, 1);\n                const a = totalData[index - 1];\n                const b = totalData[index];\n                return b && (date - a.date > b.date - date) ? b : a;\n            };\n        }\n        var callout = (g, value) => {\n            if (!value) return g.style(\"display\", \"none\");\n          \n            g\n                .style(\"display\", null)\n                .style(\"pointer-events\", \"none\")\n                .style(\"font\", \"10px sans-serif\");\n          \n            const path = g.selectAll(\"path\")\n              .data([null])\n              .join(\"path\")\n                .attr(\"fill\", \"white\")\n                .attr(\"stroke\", \"black\");\n          \n            const text = g.selectAll(\"text\")\n              .data([null])\n              .join(\"text\")\n              .call(text => text\n                .selectAll(\"tspan\")\n                .data((value + \"\").split(/\\n/))\n                .join(\"tspan\")\n                  .attr(\"x\", 0)\n                  .attr(\"y\", (d, i) => `${i * 1.1}em`)\n                  .style(\"font-weight\", (_, i) => i ? null : \"bold\")\n                  .text(d => d));\n          \n            const {x, y, width: w, height: h} = text.node().getBBox();\n          \n            text.attr(\"transform\", `translate(${-w / 2},${15 - y})`);\n            path.attr(\"d\", `M${-w / 2 - 10},5H-5l5,-5l5,5H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n        }\n        const tooltip = svg.append(\"g\");\n        const mouseArea = svg.append(\"rect\")\n                            .attr(\"width\", width)\n                            .attr(\"height\", height)\n                            .attr(\"fill\", \"none\")\n                            .style(\"pointer-events\",\"visible\");\n\n\n        svg.on(\"touchmove mousemove\", function() {\n            console.log(\"yep\");\n            var date = x.invert(d3.mouse(this)[0]);\n            const index = d3.bisector(d => d.date).left(totalData, date, 1);\n            const a = totalData[index - 1];\n            const b = totalData[index];\n            //d = the data object corresponding to date and value pointed by the cursors\n            var d = b && (date - a.date > b.date - date) ? b : a;\n            date = d.date;\n            var value = Math.round(d.value);\n            //if (value != 0) {\n            tooltip\n                .attr(\"transform\", `translate(${x(date)},${y(value)})`)\n                .call(callout, `${value}\n                ${formatDate(date)}`);\n\n            //}\n        });\n\n        svg.on(\"touchend mouseleave\", () => tooltip.call(callout, null));\n    }\n        \n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default InteractiveChart;"]},"metadata":{},"sourceType":"module"}