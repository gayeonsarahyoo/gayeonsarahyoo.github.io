{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './InteractiveChart.css';\nimport { clamp, callout } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\n\nclass InteractiveChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      category: \"us_daily_deaths\"\n    };\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    //console.log(this.props);\n    this.renderChart();\n  } //move to utils\n\n\n  savePrediction(data, category) {\n    fetch('/update/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"data\": data,\n        \"category\": category\n      })\n    });\n  }\n\n  renderChart() {\n    const {\n      forecast,\n      orgs,\n      userPrediction,\n      confirmed,\n      aggregate\n    } = this.props;\n    var predictionData = []; //where we will store formatted userPrediction\n\n    const savePrediction = this.savePrediction;\n    const category = this.state.category; //set up margin, width, height of chart\n\n    var legendWidth = 180;\n    var toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        width = 800 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    var svg = d3.select(this.chartRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right + legendWidth).attr(\"height\", height + margin.top + margin.bottom + toolTipHeight).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n\n    var confirmedData = Object.keys(confirmed).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: confirmed[key]\n    }));\n    var forecastData = forecast.map(f => {\n      return Object.keys(f).map(key => ({\n        date: d3.timeParse(\"%Y-%m-%d\")(key),\n        value: f[key]\n      }));\n    });\n    var aggregateData = Object.keys(aggregate).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: aggregate[key]\n    }));\n\n    if (userPrediction) {\n      predictionData = userPrediction.map(p => ({\n        date: d3.timeParse(\"%Y-%m-%d\")(p.date.substring(0, 10)),\n        value: p.value,\n        defined: p.defined\n      }));\n    } //set other dates\n\n\n    var confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\"); //date format: y-m-d\n\n    var predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n\n    var predLength = 365;\n    var predEndDateString = addDays(new Date(), predLength).toISOString().substring(0, 10);\n    var predEndDate = d3.timeParse(\"%Y-%m-%d\")(predEndDateString); //get confirmedData starting from confirmedStartDate\n\n    confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate); //draw x-axis        \n\n    var x = d3.scaleTime().domain([confirmedStartDate, predEndDate]).range([0, width]); //.nice(); //rounds up/down the max and mind of x axis\n\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); //find max val in confirmedData and forecastData to determine the max of y-axis\n\n    var confirmedMax = d3.max(confirmedData, function (d) {\n      return +d.value;\n    });\n    var forecastMax = 0;\n    forecastData.map(f => {\n      var currMax = d3.max(f, d => {\n        return d.value;\n      });\n      forecastMax = currMax > forecastMax ? currMax : forecastMax;\n    });\n    var yAxisMax = Math.max(confirmedMax, forecastMax); //draw y-axis\n\n    var y = d3.scaleLinear().domain([0, yAxisMax]).range([height, 0]).nice();\n    svg.append(\"g\").call(d3.axisLeft(y)); //list of data displayed in graph - for legend\n\n    var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"User Prediction\"]); //color function that assigns random colors to each data\n\n    var color = d3.scaleOrdinal().domain(legendString).range(d3.schemeSet2); //draw legend\n\n    var legend = svg.append('g').attr(\"id\", \"legend\");\n    var size = 10;\n    legend.selectAll(\"rect\").data(legendString).enter().append(\"circle\").attr('cx', width + 30).attr(\"cy\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .attr(\"r\", 6) //.attr(\"width\", size)\n    //.attr(\"height\", size)\n    .style(\"fill\", function (d) {\n      return color(d);\n    });\n    legend.selectAll(\"labels\").data(legendString).enter().append(\"text\").attr(\"x\", width + 45).attr(\"y\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .style(\"fill\", function (d) {\n      return color(d);\n    }).text(function (d) {\n      return d;\n    }).attr(\"text-anchor\", \"left\").style(\"alignment-baseline\", \"middle\"); //create line generator for confirmed/forecast data and prediction data\n\n    var lineGenerator = d3.line().curve(d3.curveCatmullRom); //curve that goes through all data points\n\n    var predLineGenerator = d3.line().curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n    //d3.curveMonotoneX\n    //d3.curveBasis\n    //d3.curveCardinal\n    //function that draws curve\n\n    var line = lineGenerator.x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }); //display confirmed data\n\n    var confirmedLine = svg.append(\"path\").attr(\"id\", \"confirmed\").datum(confirmedData).attr('d', line).attr(\"stroke\", color(legendString[legendString.length - 2])); //display aggregate data\n\n    var confirmedLine = svg.append(\"path\").attr(\"id\", \"confirmed\").datum(aggregateData).attr('d', line).attr(\"stroke\", 'black'); //display forecast data\n\n    forecastData.map((f, index) => {\n      svg.append(\"path\").attr(\"class\", \"forecast\").attr(\"id\", orgs[index]).style(\"stroke\", color(orgs[index])).datum(f).attr(\"d\", line);\n    }); //function that generates the prediction curve\n\n    var predLine = predLineGenerator.defined(d => d.defined).x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }); //append path for prediction data\n\n    var yourLine = svg.append(\"path\").attr(\"id\", \"your-line\"); //variables used to initialize user prediction data if it doesn't exist in the db\n\n    var currDate = predStartDate;\n    var defined = true;\n    var value = confirmedData[confirmedData.length - 1].value;\n    var confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n    //check if userPrediction already exists in db\n\n    if (userPrediction) {\n      predictionData = predictionData.filter(d => +d.date >= +predStartDate && +d.date <= +predEndDate);\n      predictionData[0].value = value;\n      defined = false;\n      value = 0;\n      currDate = addDays(predictionData[predictionData.length - 1].date, 1);\n    }\n\n    while (+currDate <= +predEndDate) {\n      predictionData.push({\n        date: currDate,\n        value: value,\n        defined: defined\n      });\n      currDate = addDays(currDate, 1);\n      defined = 0;\n      value = 0;\n    }\n\n    var filteredData = null;\n    var totalData = confirmedData.concat(predictionData);\n\n    if (userPrediction) {\n      filteredData = predictionData.filter(predLine.defined());\n      yourLine.datum(filteredData).attr('d', predLine).style(\"stroke\", color(legendString[legendString.length - 1]));\n    } //append new rect  \n\n\n    const mouseArea = svg.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"none\").style(\"pointer-events\", \"visible\"); //append click area rect\n\n    var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n\n    var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n\n    svg.append(\"rect\").attr(\"id\", \"click-area\").attr(\"width\", clickAreaWidth).attr(\"height\", height).attr(\"transform\", \"translate (\" + confirmedAreaWidth + \" 0)\").attr(\"fill\", \"none\").style(\"pointer-events\", \"visible\"); //var clickArea = d3.select(\"#click-area\");\n    //append circle at the end of confirmed curve\n\n    var selectCircle = svg.append(\"g\").attr(\"class\", \"pointer\");\n    var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n    pointerCircles.map(c => {\n      selectCircle.append(\"circle\").attr(\"class\", c).attr(\"cx\", x(confirmedData[confirmedData.length - 1].date)).attr(\"cy\", y(confirmedData[confirmedData.length - 1].value));\n    });\n\n    if (!userPrediction) {\n      //append draw your guess text\n      svg.append(\"text\").attr(\"id\", \"draw-guess\").attr(\"x\", confirmedAreaWidth + clickAreaWidth / 2).attr(\"y\", height - 60).attr(\"text-anchor\", \"middle\").style(\"font-size\", \"16px\").text(\"Draw your guess\"); //append circle at the end of confirmed curve\n\n      var selectCircle = svg.append(\"g\").attr(\"class\", \"pointer\");\n      var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n      pointerCircles.map(c => {\n        selectCircle.append(\"circle\").attr(\"class\", c).attr(\"cx\", x(confirmedData[confirmedData.length - 1].date)).attr(\"cy\", y(confirmedData[confirmedData.length - 1].value));\n      });\n    }\n\n    var drag = d3.drag().on(\"drag\", function () {\n      tooltip.call(callout, null); //hide tooltip\n\n      var pos = d3.mouse(this);\n      var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n      var value = clamp(0, yAxisMax, y.invert(pos[1])); //var date = x.invert(pos[0]);\n      //var value = y.invert(pos[1]);\n\n      predictionData.forEach(function (d) {\n        if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)) {\n          d.value = value;\n          d.defined = true;\n        }\n\n        predictionData[0].value = confirmedLastVal; //make sure the prediction curve is always connected to the confirmed curve\n        //update totalData everytime predictionData is updated\n\n        totalData = confirmedData.concat(predictionData);\n        /*yourLine.datum(predictionData)\n                .attr('d', predLine)*/\n\n        var filteredData = predictionData.filter(predLine.defined());\n        yourLine.datum(filteredData).attr('d', predLine).style(\"stroke\", color(legendString[legendString.length - 1]));\n      });\n    }).on(\"end\", function () {\n      savePrediction(predictionData, category);\n    });\n    svg.call(drag); //finds the datapoint closest to the mouse (along x)\n\n    /*var bisect = () => {\n        const bisectDate = d3.bisector(d => d.date).left;\n        return mx => {\n            const date = x.invert(mx);\n            const index = bisectDate(totalData, date, 1);\n            const a = totalData[index - 1];\n            const b = totalData[index];\n            return b && (date - a.date > b.date - date) ? b : a;\n        };\n    }*/\n\n    const tooltip = svg.append(\"g\").attr(\"class\", \"tooltip\");\n    svg.on(\"touchmove mousemove\", function () {\n      console.log(\"working\");\n      var date = x.invert(d3.mouse(this)[0]);\n      const index = d3.bisector(d => d.date).left(totalData, date, 1);\n      const a = totalData[index - 1];\n      const b = totalData[index]; //d = the data object corresponding to date and value pointed by the cursors\n\n      var d = b && date - a.date > b.date - date ? b : a;\n      date = d.date;\n      var defined = d.defined;\n      var value = Math.round(d.value);\n\n      if (defined != 0) {\n        tooltip.attr(\"transform\", `translate(${x(date)},${y(value)})`).call(callout, `${value}\n                    ${formatDate(date)}`);\n      }\n    });\n    svg.on(\"touchend mouseleave\", () => tooltip.call(callout, null));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default InteractiveChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js"],"names":["React","Component","d3","clamp","callout","elementType","addDays","formatDate","InteractiveChart","constructor","props","state","category","chartRef","createRef","componentDidMount","renderChart","savePrediction","data","fetch","method","headers","body","JSON","stringify","forecast","orgs","userPrediction","confirmed","aggregate","predictionData","legendWidth","toolTipHeight","margin","top","right","bottom","left","width","height","svg","select","current","append","attr","confirmedData","Object","keys","map","key","date","timeParse","value","forecastData","f","aggregateData","p","substring","defined","confirmedStartDate","predStartDate","length","predLength","predEndDateString","Date","toISOString","predEndDate","filter","d","x","scaleTime","domain","range","call","axisBottom","confirmedMax","max","forecastMax","currMax","yAxisMax","Math","y","scaleLinear","nice","axisLeft","legendString","concat","color","scaleOrdinal","schemeSet2","legend","size","selectAll","enter","i","style","text","lineGenerator","line","curve","curveCatmullRom","predLineGenerator","curveBasis","confirmedLine","datum","index","predLine","yourLine","currDate","confirmedLastVal","push","filteredData","totalData","mouseArea","confirmedAreaWidth","node","getBoundingClientRect","clickAreaWidth","selectCircle","pointerCircles","c","drag","on","tooltip","pos","mouse","invert","forEach","timeDay","round","console","log","bisector","a","b","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport './InteractiveChart.css';\nimport { clamp, callout } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\n\n\nclass InteractiveChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\" };\n        this.chartRef = React.createRef();\n    }\n    componentDidMount() {\n        //console.log(this.props);\n        this.renderChart();\n    }\n\n    //move to utils\n    savePrediction(data, category) {\n        fetch('/update/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"data\": data, \"category\": category}),\n        });\n    }\n\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = [];//where we will store formatted userPrediction\n        const savePrediction = this.savePrediction;\n        const category = this.state.category;\n        \n        //set up margin, width, height of chart\n        var legendWidth = 180;\n        var toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n        \n        var forecastData = forecast.map(f => {\n            return Object.keys(f).map(key => ({\n                date: d3.timeParse(\"%Y-%m-%d\")(key),\n                value: f[key]\n            }))\n        });\n\n        var aggregateData = Object.keys(aggregate).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: aggregate[key]\n        }));\n\n        if(userPrediction) {\n            predictionData = userPrediction.map(p => ({\n                date: d3.timeParse(\"%Y-%m-%d\")((p.date).substring(0,10)),\n                value: p.value,\n                defined: p.defined\n                })\n            );\n        }\n\n        //set other dates\n        var confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\"); //date format: y-m-d\n        var predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n        var predLength = 365;\n        var predEndDateString = addDays(new Date(), predLength).toISOString().substring(0, 10);\n        var predEndDate = d3.timeParse(\"%Y-%m-%d\")(predEndDateString)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis        \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n         svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg.append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"User Prediction\"]);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeSet2);\n\n         //draw legend\n        var legend = svg.append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        legend.selectAll(\"rect\")\n            .data(legendString)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', width + 30)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", function(d){ return color(d)})\n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", width + 45)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .style(\"fill\", function(d){ return color(d)})\n                .text(function(d){ return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            .curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //display confirmed data\n        var confirmedLine = svg\n            .append(\"path\")\n            .attr(\"id\", \"confirmed\")    \n            .datum(confirmedData)    \n            .attr('d', line)\n            .attr(\"stroke\", color(legendString[legendString.length - 2]))\n\n        //display aggregate data\n        var confirmedLine = svg\n            .append(\"path\")\n            .attr(\"id\", \"confirmed\")    \n            .datum(aggregateData)    \n            .attr('d', line)\n            .attr(\"stroke\", 'black')\n        \n        //display forecast data\n        forecastData.map((f, index) => {\n            svg\n                .append(\"path\")\n                    .attr(\"class\", \"forecast\")\n                    .attr(\"id\", orgs[index])\n                    .style(\"stroke\", color(orgs[index]))\n                .datum(f)\n                    .attr(\"d\", line);\n        })\n        \n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = svg.append(\"path\")\n                .attr(\"id\", \"your-line\");\n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        var confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n\n        //check if userPrediction already exists in db\n        if (userPrediction) {\n            predictionData = predictionData.filter(d => (+d.date >= +predStartDate) && (+d.date <= +predEndDate));\n            predictionData[0].value = value;\n            defined = false;\n            value = 0;\n            currDate = addDays(predictionData[predictionData.length - 1].date, 1);\n        }\n        \n        while (+currDate <= +predEndDate) {            \n            predictionData.push({date: currDate, value: value, defined: defined});\n            currDate = addDays(currDate, 1);\n            defined = 0;\n            value = 0;\n        }\n        var filteredData = null;\n        var totalData = confirmedData.concat(predictionData);\n\n        if(userPrediction) {\n            filteredData = predictionData.filter(predLine.defined())\n            yourLine.datum(filteredData)\n                    .attr('d', predLine)\n                    .style(\"stroke\", color(legendString[legendString.length - 1]))\n            }\n    //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append circle at the end of confirmed curve\n        var selectCircle = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"pointer\")\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n            selectCircle.append(\"circle\")\n                        .attr(\"class\", c)\n                        .attr(\"cx\", x(confirmedData[confirmedData.length - 1].date))\n                        .attr(\"cy\", y(confirmedData[confirmedData.length - 1].value))\n        })\n\n        if(!userPrediction) {\n            //append draw your guess text\n            svg.append(\"text\")\n                .attr(\"id\", \"draw-guess\")\n                .attr(\"x\", confirmedAreaWidth + (clickAreaWidth / 2))             \n                .attr(\"y\", height - 60)\n                .attr(\"text-anchor\", \"middle\")  \n                .style(\"font-size\", \"16px\") \n                .text(\"Draw your guess\");\n            //append circle at the end of confirmed curve\n            var selectCircle = svg\n                                    .append(\"g\")\n                                    .attr(\"class\", \"pointer\")\n            var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n            pointerCircles.map((c) => {\n            selectCircle.append(\"circle\")\n                .attr(\"class\", c)\n                .attr(\"cx\", x(confirmedData[confirmedData.length - 1].date))\n                .attr(\"cy\", y(confirmedData[confirmedData.length - 1].value))\n            })\n        }\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        tooltip.call(callout, null); //hide tooltip\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        //var date = x.invert(pos[0]);\n                        //var value = y.invert(pos[1]);\n                \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                            predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                            //update totalData everytime predictionData is updated\n                            totalData = confirmedData.concat(predictionData);\n                            /*yourLine.datum(predictionData)\n                                    .attr('d', predLine)*/\n                            var filteredData = predictionData.filter(predLine.defined())\n\n                            yourLine.datum(filteredData)\n                                    .attr('d', predLine)\n                                    .style(\"stroke\", color(legendString[legendString.length - 1]))\n\n                        });\n                    })\n                    .on(\"end\", function () {\n                        savePrediction(predictionData, category);\n                    });\n        \n        svg.call(drag)\n\n        //finds the datapoint closest to the mouse (along x)\n        /*var bisect = () => {\n            const bisectDate = d3.bisector(d => d.date).left;\n            return mx => {\n                const date = x.invert(mx);\n                const index = bisectDate(totalData, date, 1);\n                const a = totalData[index - 1];\n                const b = totalData[index];\n                return b && (date - a.date > b.date - date) ? b : a;\n            };\n        }*/\n\n        const tooltip = svg\n                            .append(\"g\")\n                            .attr(\"class\", \"tooltip\");\n\n        svg.on(\"touchmove mousemove\", function() {\n            console.log(\"working\");\n            var date = x.invert(d3.mouse(this)[0]);\n            const index = d3.bisector(d => d.date).left(totalData, date, 1);\n            const a = totalData[index - 1];\n            const b = totalData[index];\n            //d = the data object corresponding to date and value pointed by the cursors\n            var d = b && (date - a.date > b.date - date) ? b : a;\n            date = d.date;\n            var defined = d.defined;\n            var value = Math.round(d.value);\n            if (defined != 0) {\n                tooltip\n                    .attr(\"transform\", `translate(${x(date)},${y(value)})`)\n                    .call(callout, `${value}\n                    ${formatDate(date)}`);\n            }\n        });\n\n        svg.on(\"touchend mouseleave\", () => tooltip.call(callout, null));\n    }\n        \n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default InteractiveChart;"]},"metadata":{},"sourceType":"module"}