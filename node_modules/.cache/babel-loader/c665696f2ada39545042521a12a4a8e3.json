{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './InteractiveChart.css';\nimport { clamp, sortDictByDateDescending, callout, getMostRecentPrediction } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\n\nclass InteractiveChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      category: \"us_daily_deaths\"\n    };\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const loginStatus = this.props.loginStatus;\n    console.log(loginStatus);\n\n    if (loginStatus['logged in']) {\n      this.renderChart();\n    } else {\n      console.log(\"not logged in\");\n      this.renderChartUnregistered();\n    }\n  } //move to utils\n\n\n  savePrediction(data, category) {\n    fetch('/update/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"data\": data,\n        \"category\": category\n      })\n    });\n  }\n\n  deletePrediction(category) {\n    console.log(category);\n    fetch('/delete/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"category\": category\n      })\n    });\n    console.log(\"deleted\");\n  }\n\n  createDefaultPrediction(predStartDate, predEndDate) {\n    var defaultData = [];\n    var currDate = predStartDate; //var defined = true;\n    //var value = confirmedData[confirmedData.length - 1].value;\n    //create defaultPredictionData\n\n    while (+currDate <= +predEndDate) {\n      defaultData.push({\n        date: currDate,\n        value: 0,\n        defined: 0\n      });\n      currDate = d3.timeDay.offset(currDate, 1);\n    }\n\n    return defaultData;\n  }\n\n  appendModal() {\n    var modal = document.createElement(\"div\");\n    modal.id = \"modal\";\n    var modalContent = document.createElement(\"div\");\n    modalContent.id = modalContent;\n    var text = document.createElement(\"p\");\n    text.innerText = \"Please log in to save your prediction.\";\n    var signinBtn = document.createElement(\"button\");\n    signinBtn.id = \"signinBtn\";\n    signinBtn.innerText = \"Sign In\";\n    var signupBtn = document.createElement(\"button\");\n    signupBtn.id = \"signupBtn\";\n    modalContent.appendChild(text);\n    modalContent.appendChild(signinBtn);\n    modalContent.appendChild(signupBtn);\n    modal.appendChild(modalContent);\n    this.chartRef.current.appendChild(modal);\n  }\n\n  renderChartUnregistered() {\n    const {\n      forecast,\n      orgs,\n      userPrediction,\n      confirmed,\n      aggregate\n    } = this.props;\n    var predictionData = []; //where we will store formatted userPrediction\n\n    var defaultPredictionData = [];\n    const savePrediction = this.savePrediction;\n    const createDefaultPrediction = this.createDefaultPrediction;\n    this.appendModal();\n    const category = this.state.category;\n    var compiledData = []; //set up margin, width, height of chart\n\n    const legendWidth = 180;\n    const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n\n    const contextHeight = 100;\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        width = 800 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    var svg = d3.select(this.chartRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right + legendWidth).attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n\n    var confirmedData = Object.keys(confirmed).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: confirmed[key]\n    }));\n    console.log(confirmedData);\n    var forecastData = forecast.map(f => {\n      return Object.keys(f).map(key => ({\n        date: d3.timeParse(\"%Y-%m-%d\")(key),\n        value: f[key]\n      }));\n    });\n    var aggregateData = Object.keys(aggregate).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: aggregate[key]\n    })); //set other dates\n    //const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\"); //date format: y-m-d\n\n    const confirmedStartDate = confirmedData[4].date;\n    const predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n\n    const predLength = 155; //var predEndDateString = addDays(new Date(), predLength).toISOString().substring(0, 10);\n\n    const predEndDate = d3.timeDay.offset(predStartDate, predLength); //get confirmedData starting from confirmedStartDate\n\n    confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate); //draw x-axis     \n\n    var x = d3.scaleTime().domain([confirmedStartDate, predEndDate]).range([0, width]); //.nice(); //rounds up/down the max and mind of x axis\n\n    var xAxis = svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); //find max val in confirmedData and forecastData to determine the max of y-axis\n\n    var confirmedMax = d3.max(confirmedData, function (d) {\n      return +d.value;\n    });\n    var forecastMax = 0;\n    forecastData.map(f => {\n      var currMax = d3.max(f, d => {\n        return d.value;\n      });\n      forecastMax = currMax > forecastMax ? currMax : forecastMax;\n    });\n    var yAxisMax = Math.max(confirmedMax, forecastMax); //draw y-axis\n\n    var y = d3.scaleLinear().domain([0, yAxisMax]).range([height, 0]).nice();\n    svg.append(\"g\").call(d3.axisLeft(y)); //list of data displayed in graph - for legend\n\n    var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]); //color function that assigns random colors to each data\n\n    var color = d3.scaleOrdinal().domain(legendString).range(d3.schemeTableau10); //draw legend\n\n    var legend = svg.append('g').attr(\"id\", \"legend\");\n    var size = 10;\n    legend.selectAll(\"rect\").data(legendString).enter().append(\"circle\").attr('cx', width + 30).attr(\"cy\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .attr(\"r\", 6) //.attr(\"width\", size)\n    //.attr(\"height\", size)\n    .style(\"fill\", function (d) {\n      return color(d);\n    });\n    legend.selectAll(\"labels\").data(legendString).enter().append(\"text\").attr(\"x\", width + 45).attr(\"y\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .style(\"fill\", function (d) {\n      return color(d);\n    }).text(function (d) {\n      return d;\n    }).attr(\"text-anchor\", \"left\").style(\"alignment-baseline\", \"middle\"); //create line generator for confirmed/forecast data and prediction data\n\n    var lineGenerator = d3.line().curve(d3.curveBasis); //.curve(d3.curveCatmullRom)//curve that goes through all data points\n\n    var predLineGenerator = d3.line().curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n    //d3.curveMonotoneX\n    //d3.curveBasis\n    //d3.curveCardinal\n    //function that draws curve\n\n    var line = lineGenerator.x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }); //area where the confirmed curve will be drawn\n\n    var mainClip = svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\", \"main-clip\").append(\"svg:rect\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", 0).attr(\"y\", 0); // Create the confirmed area variable\n\n    const mainArea = svg.append('g').attr(\"clip-path\", \"url(#main-clip)\"); //display confirmed data\n\n    var confirmedLine = mainArea.append(\"path\").attr(\"id\", \"confirmed\").attr(\"class\", \"line\").datum(confirmedData).attr('d', line).attr(\"stroke\", color(legendString[legendString.length - 3]));\n    var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n    var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value); //append clip-path for prediction curve\n\n    var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\", \"prediction-clip\").append(\"svg:rect\").attr(\"width\", width - confirmedAreaEndX).attr(\"height\", height).attr(\"x\", confirmedAreaEndX).attr(\"y\", 0);\n    const predictionArea = svg.append('g').attr(\"clip-path\", \"url(#prediction-clip)\"); //make sure aggregateData curve stems from confiremData curve\n\n    var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate); //check if predStartDate exists in AD\n\n    if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date == +predStartDate) {\n      aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n    } else {\n      aggregateData.splice(idxOfStartDate, 0, {\n        date: predStartDate,\n        value: confirmedData[confirmedData.length - 1].value\n      });\n      console.log(aggregateData);\n      console.log(\"done\");\n    } //display aggregate data\n\n\n    var aggregateLine = predictionArea.append(\"path\").attr(\"id\", \"aggregate\").attr(\"class\", \"line\").datum(aggregateData).attr('d', line).attr(\"stroke\", color(legendString[legendString.length - 2])); //display forecast data\n\n    forecastData.map((f, index) => {\n      //make sure they all stem from the confirmed curve!\n      //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n      var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate); //check if predStartDate exists in f\n\n      if (f.length > 0 && +f[idxOfStartDate].date == +predStartDate) {\n        f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n      } else {\n        f.splice(idxOfStartDate, 0, {\n          date: predStartDate,\n          value: confirmedData[confirmedData.length - 1].value\n        }); //console.log(f);\n        //console.log(\"done\");\n      } //console.log(f)\n      //console.log(idxOfStartDate)\n\n\n      predictionArea.append(\"path\").attr(\"class\", \"forecast line\").attr(\"id\", orgs[index]).style(\"stroke\", color(orgs[index])).datum(f).attr(\"d\", line);\n    });\n    var lines = document.getElementsByClassName('line'); //function that generates the prediction curve\n\n    var predLine = predLineGenerator.defined(d => d.defined).x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }); //append path for prediction data\n\n    var yourLine = predictionArea.append(\"path\").attr(\"id\", \"your-line\"); //variables used to initialize user prediction data if it doesn't exist in the db\n\n    var currDate = predStartDate;\n    var defined = true;\n    var value = confirmedData[confirmedData.length - 1].value;\n    const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n\n    predictionData = createDefaultPrediction(predStartDate, predEndDate);\n    predictionData[0].value = confirmedLastVal;\n    predictionData[0].defined = true; //console.log(predictionData);\n\n    var filteredData = null; //var totalData = confirmedData.concat(predictionData);\n    //!!    //add forecast data to compiledData\n\n    orgs.map((o, index) => {\n      compiledData.push({\n        name: o,\n        data: forecastData[index]\n      });\n    });\n    compiledData.push({\n      name: \"Daily Confirmed Deaths\",\n      data: confirmedData\n    });\n    compiledData.push({\n      name: \"Aggregate Forecast\",\n      data: aggregateData\n    }); //if (userPrediction) {\n\n    compiledData.push({\n      name: \"User Prediction\",\n      data: predictionData\n    }); //}\n    //join data to yourLine\n\n    filteredData = predictionData.filter(predLine.defined());\n    yourLine.datum(filteredData).attr('d', predLine).style(\"stroke\", color(legendString[legendString.length - 1])); //append new rect  \n\n    const mouseArea = svg.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"none\").attr(\"id\", \"mouse-area\").style(\"pointer-events\", \"visible\"); //append click area rect\n\n    var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n\n    var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n\n    svg.append(\"rect\").attr(\"id\", \"click-area\").attr(\"width\", clickAreaWidth).attr(\"height\", height).attr(\"transform\", \"translate (\" + confirmedAreaWidth + \" 0)\").attr(\"fill\", \"none\").style(\"pointer-events\", \"visible\"); //var clickArea = d3.select(\"#click-area\");\n    //append draw your guess text\n\n    const drawingInstruction = svg.append(\"g\").attr(\"id\", \"drawing-instruction\").style(\"opacity\", \"1\");\n    drawingInstruction.append(\"text\").attr(\"id\", \"draw-guess\").attr(\"x\", confirmedAreaEndX + (width - confirmedAreaEndX) / 2).attr(\"y\", height - 100).attr(\"text-anchor\", \"middle\").text(\"Draw your guess\").style(\"font-size\", \"16px\"); //append circle at the end of confirmed curve\n\n    var selectCircle = drawingInstruction.append(\"g\").attr(\"id\", \"pointer\");\n    var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n    pointerCircles.map(c => {\n      selectCircle.append(\"circle\").attr(\"class\", c).attr(\"cx\", confirmedAreaEndX).attr(\"cy\", confirmedAreaEndY);\n    });\n    var drag = d3.drag().on(\"drag\", function () {\n      //hide \"draw your guess\" text\n      svg.select(\"#drawing-instruction\").style(\"opacity\", \"0\");\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"0\");\n      var pos = d3.mouse(this);\n      var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n      var value = clamp(0, yAxisMax, y.invert(pos[1]));\n      predictionData.forEach(function (d) {\n        if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)) {\n          d.value = value;\n          d.defined = true;\n        }\n\n        predictionData[0].value = confirmedLastVal; //make sure the prediction curve is always connected to the confirmed curve\n        //update totalData everytime predictionData is updated\n\n        compiledData[compiledData.length - 1].data = predictionData; //console.log(compiledData)\n\n        /*yourLine.datum(predictionData)\n                .attr('d', predLine)*/\n\n        var filteredData = predictionData.filter(predLine.defined());\n        yourLine.datum(filteredData).attr('d', predLine).style(\"stroke\", color(legendString[legendString.length - 1]));\n      });\n    }).on(\"end\", function () {\n      d3.select(\"#popup\").style(\"display\", \"none\");\n      console.log(\"popup\");\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"1\");\n    });\n    svg.call(drag); //finds the datapoint closest to the mouse (along x)\n\n    /*var bisect = () => {\n        const bisectDate = d3.bisector(d => d.date).left;\n        return mx => {\n            const date = x.invert(mx);\n            const index = bisectDate(totalData, date, 1);\n            const a = totalData[index - 1];\n            const b = totalData[index];\n            return b && (date - a.date > b.date - date) ? b : a;\n        };\n    }*/\n\n    const tooltipArea = svg.append(\"g\").attr(\"class\", \"tooltip\");\n    tooltipArea.append(\"path\") //vertical line\n    .attr(\"id\", \"tooltip-line\").style(\"stroke\", \"black\").style(\"stroke-width\", \"0.5px\").style(\"opacity\", \"0\"); //console.log(compiledData)\n\n    var mousePerLine = tooltipArea.selectAll(\".mouse-per-line\").data(compiledData).enter().append(\"g\").attr(\"class\", \"mouse-per-line\");\n    mousePerLine.append(\"circle\").attr(\"r\", 2).style(\"stroke\", function (d) {\n      return color(d.name);\n    }).style(\"fill\", \"none\").style(\"stroke-width\", \"1px\").style(\"opacity\", \"0\");\n    mousePerLine.append(\"text\").attr(\"transform\", \"translate(10,3)\");\n    tooltipArea.append(\"svg:rect\").attr('width', width).attr('height', height).attr('fill', 'none').attr('pointer-events', 'all').style(\"cursor\", \"pointer\").on('mouseout', function () {\n      // on mouse out hide line, circles and text\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"0\");\n    }).on('mouseover', function () {\n      // on mouse in show line, circles and text\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"1\");\n    }).on('mousemove', function () {\n      // mouse moving over canvas\n      var mouse = d3.mouse(this);\n      var xCoord = mouse[0];\n      d3.select(\"#tooltip-line\").attr(\"d\", function () {\n        var d = \"M\" + xCoord + \",\" + height;\n        d += \" \" + xCoord + \",\" + 0;\n        return d;\n      });\n      d3.selectAll(\".mouse-per-line\").attr(\"transform\", function (d, i) {\n        if (d.data.length == 0) {\n          return;\n        }\n\n        var date = x.invert(xCoord);\n        const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n        var a = null;\n\n        if (index > 0) {\n          a = d.data[index - 1];\n        }\n\n        const b = d.data[index]; //d = the data object corresponding to date and value pointed by the cursors\n\n        var data = null;\n\n        if (!a) {\n          data = b;\n        } else if (!b) {\n          data = a;\n        } else {\n          data = b && date - a.date > b.date - date ? b : a;\n        }\n\n        if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n          if (data.defined != 0) {\n            var element = d3.select(this).select('text').style(\"opacity\", \"1\").text(Math.round(data.value));\n            element.select(\"circle\").style(\"opacity\", \"1\");\n            return \"translate(\" + mouse[0] + \",\" + y(data.value) + \")\";\n          }\n        }\n\n        var element = d3.select(this).select(\"text\").style(\"opacity\", \"0\");\n        element.select(\"circle\").style(\"opacity\", \"0\");\n      });\n    }); /////////////////////////////////////////////////////////////////////////////////////////////\n\n    const focusHeight = 100;\n    const contextMargin = 50;\n    var context = svg.append(\"g\").attr(\"viewBox\", [0, 0, width, focusHeight]).attr(\"transform\", `translate(0,${height + contextMargin} )`) //.attr(\"width\", width + 100)\n    //.attr(\"height\", height)\n    .style(\"display\", \"block\");\n    /*const xAxis = (g, x, height) => g\n                                        .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                        .call(d3.axisBottom(x))*/\n\n    var contextX = d3.scaleTime().domain([confirmedStartDate, predEndDate]).range([0, width]);\n    var contextXAxis = context.append(\"g\").attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`).call(d3.axisBottom(contextX));\n    const brush = d3.brushX().extent([[0, 0], [width, focusHeight - margin.bottom]]).on(\"brush\", brushed).on(\"end\", brushended);\n    const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    /*context.append(\"g\")\n            .call(xAxis, x, focusHeight);*/\n\n    /*svg.append(\"path\")\n        .datum(confirmedData)\n        .attr(\"fill\", \"steelblue\")\n        .attr(\"d\", line(x, y.copy().range([focusHeight - margin.bottom, 4])));*/\n\n    function brushed() {\n      console.log(\"d\");\n\n      if (d3.event.selection) {\n        var extent = d3.event.selection; //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n\n        x.domain([contextX.invert(extent[0]), contextX.invert(extent[1])]);\n        xAxis //.transition()\n        //.duration(1000)\n        .call(d3.axisBottom(x));\n        var newX = x(confirmedData[confirmedData.length - 1].date);\n        newX = newX < 0 ? 0 : newX;\n        d3.select(\"#prediction-clip\").select(\"rect\").attr(\"width\", width - newX).attr(\"x\", newX);\n        svg.selectAll(\".line\") //.transition()\n        //.duration(1000)\n        .attr('d', line);\n        svg.select(\"#your-line\").attr(\"d\", predLine); //reposition draw your guess text and pointer\n\n        svg.select(\"#draw-guess\").attr(\"x\", newX + (width - newX) / 2);\n        svg.select(\"#pointer\").selectAll(\"circle\").attr(\"cx\", newX);\n      }\n    }\n\n    function brushended() {\n      if (!d3.event.selection) {\n        gb.call(brush.move, defaultSelection);\n      }\n    }\n\n    const gb = context.call(brush).call(brush.move, defaultSelection); ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    var deleteButton = document.createElement(\"button\");\n    deleteButton.innerText = \"Reset\";\n\n    deleteButton.onclick = () => {\n      this.deletePrediction(category);\n      predictionData = createDefaultPrediction(predStartDate, predEndDate);\n      predictionData[0].value = confirmedLastVal;\n      predictionData[0].defined = true;\n      console.log(predictionData); //update yourLine\n\n      var filtered = predictionData.filter(predLine.defined());\n      console.log(filtered);\n      yourLine.datum(filtered).attr('d', predLine);\n      svg.select(\"#drawing-instruction\").style(\"opacity\", \"1\");\n    };\n\n    document.querySelector(\"body\").appendChild(deleteButton);\n  }\n\n  renderChart() {\n    const {\n      forecast,\n      orgs,\n      userPrediction,\n      confirmed,\n      aggregate\n    } = this.props;\n    var predictionData = []; //where we will store formatted userPrediction\n\n    var defaultPredictionData = [];\n    const savePrediction = this.savePrediction;\n    const createDefaultPrediction = this.createDefaultPrediction;\n    const category = this.state.category;\n    var compiledData = []; //set up margin, width, height of chart\n\n    const legendWidth = 180;\n    const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n\n    const contextHeight = 100;\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        width = 800 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    var svg = d3.select(this.chartRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right + legendWidth).attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n\n    var confirmedData = Object.keys(confirmed).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: confirmed[key]\n    }));\n    console.log(confirmedData);\n    var forecastData = forecast.map(f => {\n      return Object.keys(f).map(key => ({\n        date: d3.timeParse(\"%Y-%m-%d\")(key),\n        value: f[key]\n      }));\n    });\n    var aggregateData = Object.keys(aggregate).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: aggregate[key]\n    })); //store userPrediction in predictionData if it exists\n\n    if (Object.keys(userPrediction).length > 0) {\n      predictionData = getMostRecentPrediction(userPrediction).map(p => ({\n        date: d3.timeParse(\"%Y-%m-%d\")(p.date.substring(0, 10)),\n        value: p.value,\n        defined: p.defined\n      }));\n    } //console.log(predictionData)\n    //set other dates\n    //const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\"); //date format: y-m-d\n\n\n    const confirmedStartDate = confirmedData[4].date;\n    const predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n\n    const predLength = 155; //var predEndDateString = addDays(new Date(), predLength).toISOString().substring(0, 10);\n\n    const predEndDate = d3.timeDay.offset(predStartDate, predLength); //get confirmedData starting from confirmedStartDate\n\n    confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate); //draw x-axis     \n\n    var x = d3.scaleTime().domain([confirmedStartDate, predEndDate]).range([0, width]); //.nice(); //rounds up/down the max and mind of x axis\n\n    var xAxis = svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); //find max val in confirmedData and forecastData to determine the max of y-axis\n\n    var confirmedMax = d3.max(confirmedData, function (d) {\n      return +d.value;\n    });\n    var forecastMax = 0;\n    forecastData.map(f => {\n      var currMax = d3.max(f, d => {\n        return d.value;\n      });\n      forecastMax = currMax > forecastMax ? currMax : forecastMax;\n    });\n    var yAxisMax = Math.max(confirmedMax, forecastMax); //draw y-axis\n\n    var y = d3.scaleLinear().domain([0, yAxisMax]).range([height, 0]).nice();\n    svg.append(\"g\").call(d3.axisLeft(y)); //list of data displayed in graph - for legend\n\n    var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]); //color function that assigns random colors to each data\n\n    var color = d3.scaleOrdinal().domain(legendString).range(d3.schemeTableau10); //draw legend\n\n    var legend = svg.append('g').attr(\"id\", \"legend\");\n    var size = 10;\n    legend.selectAll(\"rect\").data(legendString).enter().append(\"circle\").attr('cx', width + 30).attr(\"cy\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .attr(\"r\", 6) //.attr(\"width\", size)\n    //.attr(\"height\", size)\n    .style(\"fill\", function (d) {\n      return color(d);\n    });\n    legend.selectAll(\"labels\").data(legendString).enter().append(\"text\").attr(\"x\", width + 45).attr(\"y\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .style(\"fill\", function (d) {\n      return color(d);\n    }).text(function (d) {\n      return d;\n    }).attr(\"text-anchor\", \"left\").style(\"alignment-baseline\", \"middle\"); //create line generator for confirmed/forecast data and prediction data\n\n    var lineGenerator = d3.line().curve(d3.curveBasis); //.curve(d3.curveCatmullRom)//curve that goes through all data points\n\n    var predLineGenerator = d3.line().curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n    //d3.curveMonotoneX\n    //d3.curveBasis\n    //d3.curveCardinal\n    //function that draws curve\n\n    var line = lineGenerator.x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }); //area where the confirmed curve will be drawn\n\n    var mainClip = svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\", \"main-clip\").append(\"svg:rect\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", 0).attr(\"y\", 0); // Create the confirmed area variable\n\n    const mainArea = svg.append('g').attr(\"clip-path\", \"url(#main-clip)\"); //display confirmed data\n\n    var confirmedLine = mainArea.append(\"path\").attr(\"id\", \"confirmed\").attr(\"class\", \"line\").datum(confirmedData).attr('d', line).attr(\"stroke\", color(legendString[legendString.length - 3]));\n    var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n    var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value); //append clip-path for prediction curve\n\n    var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\", \"prediction-clip\").append(\"svg:rect\").attr(\"width\", width - confirmedAreaEndX).attr(\"height\", height).attr(\"x\", confirmedAreaEndX).attr(\"y\", 0);\n    const predictionArea = svg.append('g').attr(\"clip-path\", \"url(#prediction-clip)\"); //make sure aggregateData curve stems from confiremData curve\n\n    var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate); //check if predStartDate exists in AD\n\n    if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date == +predStartDate) {\n      aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n    } else {\n      aggregateData.splice(idxOfStartDate, 0, {\n        date: predStartDate,\n        value: confirmedData[confirmedData.length - 1].value\n      });\n      console.log(aggregateData);\n      console.log(\"done\");\n    } //display aggregate data\n\n\n    var aggregateLine = predictionArea.append(\"path\").attr(\"id\", \"aggregate\").attr(\"class\", \"line\").datum(aggregateData).attr('d', line).attr(\"stroke\", color(legendString[legendString.length - 2])); //display forecast data\n\n    forecastData.map((f, index) => {\n      //make sure they all stem from the confirmed curve!\n      //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n      var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate); //check if predStartDate exists in f\n\n      if (f.length > 0 && +f[idxOfStartDate].date == +predStartDate) {\n        f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n      } else {\n        f.splice(idxOfStartDate, 0, {\n          date: predStartDate,\n          value: confirmedData[confirmedData.length - 1].value\n        }); //console.log(f);\n        //console.log(\"done\");\n      } //console.log(f)\n      //console.log(idxOfStartDate)\n\n\n      predictionArea.append(\"path\").attr(\"class\", \"forecast line\").attr(\"id\", orgs[index]).style(\"stroke\", color(orgs[index])).datum(f).attr(\"d\", line);\n    });\n    var lines = document.getElementsByClassName('line'); //function that generates the prediction curve\n\n    var predLine = predLineGenerator.defined(d => d.defined).x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }); //append path for prediction data\n\n    var yourLine = predictionArea.append(\"path\").attr(\"id\", \"your-line\"); //variables used to initialize user prediction data if it doesn't exist in the db\n\n    var currDate = predStartDate;\n    var defined = true;\n    var value = confirmedData[confirmedData.length - 1].value;\n    const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n    //check if userPrediction already exists in db\n\n    if (Object.keys(userPrediction).length > 0) {\n      predictionData = predictionData.filter(d => +d.date >= +predStartDate && +d.date <= +predEndDate);\n      predictionData[0].value = confirmedLastVal;\n      predictionData[0].defined = true;\n      currDate = d3.timeDay.offset(predictionData[predictionData.length - 1].date, 1); //currDate = addDays(predictionData[predictionData.length - 1].date, 1);\n      //console.log(predictionData)\n      //console.log(createDefaultPrediction(currDate, predEndDate))\n\n      predictionData.concat(createDefaultPrediction(currDate, predEndDate)); //console.log(predictionData);\n    } else {\n      predictionData = createDefaultPrediction(predStartDate, predEndDate);\n      predictionData[0].value = confirmedLastVal;\n      predictionData[0].defined = true; //console.log(predictionData);\n    }\n\n    var filteredData = null; //var totalData = confirmedData.concat(predictionData);\n    //!!    //add forecast data to compiledData\n\n    orgs.map((o, index) => {\n      compiledData.push({\n        name: o,\n        data: forecastData[index]\n      });\n    });\n    compiledData.push({\n      name: \"Daily Confirmed Deaths\",\n      data: confirmedData\n    });\n    compiledData.push({\n      name: \"Aggregate Forecast\",\n      data: aggregateData\n    }); //if (userPrediction) {\n\n    compiledData.push({\n      name: \"User Prediction\",\n      data: predictionData\n    }); //}\n    //join data to yourLine\n\n    filteredData = predictionData.filter(predLine.defined());\n    yourLine.datum(filteredData).attr('d', predLine).style(\"stroke\", color(legendString[legendString.length - 1])); //append new rect  \n\n    const mouseArea = svg.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"none\").attr(\"id\", \"mouse-area\").style(\"pointer-events\", \"visible\"); //append click area rect\n\n    var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n\n    console.log(confirmedAreaWidth);\n    var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n\n    svg.append(\"rect\").attr(\"id\", \"click-area\").attr(\"width\", clickAreaWidth).attr(\"height\", height).attr(\"transform\", \"translate (\" + confirmedAreaWidth + \" 0)\").attr(\"fill\", \"none\").style(\"pointer-events\", \"visible\"); //var clickArea = d3.select(\"#click-area\");\n    //append draw your guess text\n\n    const drawingInstruction = svg.append(\"g\").attr(\"id\", \"drawing-instruction\").style(\"opacity\", \"0\");\n    drawingInstruction.append(\"text\").attr(\"id\", \"draw-guess\").attr(\"x\", confirmedAreaEndX + (width - confirmedAreaEndX) / 2).attr(\"y\", height - 100).attr(\"text-anchor\", \"middle\").text(\"Draw your guess\").style(\"font-size\", \"16px\"); //append circle at the end of confirmed curve\n\n    var selectCircle = drawingInstruction.append(\"g\").attr(\"id\", \"pointer\");\n    var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n    pointerCircles.map(c => {\n      selectCircle.append(\"circle\").attr(\"class\", c).attr(\"cx\", confirmedAreaEndX).attr(\"cy\", confirmedAreaEndY);\n    });\n\n    if (Object.keys(userPrediction).length == 0) {\n      svg.select(\"#drawing-instruction\").style(\"opacity\", \"1\");\n    }\n\n    var drag = d3.drag().on(\"drag\", function () {\n      //hide \"draw your guess\" text\n      svg.select(\"#drawing-instruction\").style(\"opacity\", \"0\");\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"0\");\n      var pos = d3.mouse(this);\n      var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n      var value = clamp(0, yAxisMax, y.invert(pos[1]));\n      predictionData.forEach(function (d) {\n        if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)) {\n          d.value = value;\n          d.defined = true;\n        }\n\n        predictionData[0].value = confirmedLastVal; //make sure the prediction curve is always connected to the confirmed curve\n        //update totalData everytime predictionData is updated\n\n        compiledData[compiledData.length - 1].data = predictionData; //console.log(compiledData)\n\n        /*yourLine.datum(predictionData)\n                .attr('d', predLine)*/\n\n        var filteredData = predictionData.filter(predLine.defined());\n        yourLine.datum(filteredData).attr('d', predLine).style(\"stroke\", color(legendString[legendString.length - 1]));\n      });\n    }).on(\"end\", function () {\n      savePrediction(predictionData, category);\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"1\");\n    });\n    svg.call(drag); //finds the datapoint closest to the mouse (along x)\n\n    /*var bisect = () => {\n        const bisectDate = d3.bisector(d => d.date).left;\n        return mx => {\n            const date = x.invert(mx);\n            const index = bisectDate(totalData, date, 1);\n            const a = totalData[index - 1];\n            const b = totalData[index];\n            return b && (date - a.date > b.date - date) ? b : a;\n        };\n    }*/\n\n    const tooltipArea = svg.append(\"g\").attr(\"class\", \"tooltip\");\n    tooltipArea.append(\"path\") //vertical line\n    .attr(\"id\", \"tooltip-line\").style(\"stroke\", \"black\").style(\"stroke-width\", \"0.5px\").style(\"opacity\", \"0\"); //console.log(compiledData)\n\n    var mousePerLine = tooltipArea.selectAll(\".mouse-per-line\").data(compiledData).enter().append(\"g\").attr(\"class\", \"mouse-per-line\");\n    mousePerLine.append(\"circle\").attr(\"r\", 2).style(\"stroke\", function (d) {\n      return color(d.name);\n    }).style(\"fill\", \"none\").style(\"stroke-width\", \"1px\").style(\"opacity\", \"0\");\n    mousePerLine.append(\"text\").attr(\"transform\", \"translate(10,3)\");\n    tooltipArea.append(\"svg:rect\").attr('width', width).attr('height', height).attr('fill', 'none').attr('pointer-events', 'all').style(\"cursor\", \"pointer\").on('mouseout', function () {\n      // on mouse out hide line, circles and text\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"0\");\n    }).on('mouseover', function () {\n      // on mouse in show line, circles and text\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"1\");\n    }).on('mousemove', function () {\n      // mouse moving over canvas\n      var mouse = d3.mouse(this);\n      var xCoord = mouse[0];\n      d3.select(\"#tooltip-line\").attr(\"d\", function () {\n        var d = \"M\" + xCoord + \",\" + height;\n        d += \" \" + xCoord + \",\" + 0;\n        return d;\n      });\n      d3.selectAll(\".mouse-per-line\").attr(\"transform\", function (d, i) {\n        if (d.data.length == 0) {\n          return;\n        }\n\n        var date = x.invert(xCoord);\n        const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n        var a = null;\n\n        if (index > 0) {\n          a = d.data[index - 1];\n        }\n\n        const b = d.data[index]; //d = the data object corresponding to date and value pointed by the cursors\n\n        var data = null;\n\n        if (!a) {\n          data = b;\n        } else if (!b) {\n          data = a;\n        } else {\n          data = b && date - a.date > b.date - date ? b : a;\n        }\n\n        if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n          if (data.defined != 0) {\n            var element = d3.select(this).select('text').style(\"opacity\", \"1\").text(Math.round(data.value));\n            element.select(\"circle\").style(\"opacity\", \"1\");\n            return \"translate(\" + mouse[0] + \",\" + y(data.value) + \")\";\n          }\n        }\n\n        var element = d3.select(this).select(\"text\").style(\"opacity\", \"0\");\n        element.select(\"circle\").style(\"opacity\", \"0\");\n      });\n    }); /////////////////////////////////////////////////////////////////////////////////////////////\n\n    const focusHeight = 100;\n    const contextMargin = 50;\n    var context = svg.append(\"g\").attr(\"viewBox\", [0, 0, width, focusHeight]).attr(\"transform\", `translate(0,${height + contextMargin} )`) //.attr(\"width\", width + 100)\n    //.attr(\"height\", height)\n    .style(\"display\", \"block\");\n    /*const xAxis = (g, x, height) => g\n                                        .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                        .call(d3.axisBottom(x))*/\n\n    var contextX = d3.scaleTime().domain([confirmedStartDate, predEndDate]).range([0, width]);\n    var contextXAxis = context.append(\"g\").attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`).call(d3.axisBottom(contextX));\n    const brush = d3.brushX().extent([[0, 0], [width, focusHeight - margin.bottom]]).on(\"brush\", brushed).on(\"end\", brushended);\n    const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    /*context.append(\"g\")\n            .call(xAxis, x, focusHeight);*/\n\n    /*svg.append(\"path\")\n        .datum(confirmedData)\n        .attr(\"fill\", \"steelblue\")\n        .attr(\"d\", line(x, y.copy().range([focusHeight - margin.bottom, 4])));*/\n\n    function brushed() {\n      console.log(\"d\");\n\n      if (d3.event.selection) {\n        var extent = d3.event.selection; //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n\n        x.domain([contextX.invert(extent[0]), contextX.invert(extent[1])]);\n        xAxis //.transition()\n        //.duration(1000)\n        .call(d3.axisBottom(x));\n        var newX = x(confirmedData[confirmedData.length - 1].date);\n        newX = newX < 0 ? 0 : newX;\n        console.log(newX);\n        d3.select(\"#prediction-clip\").select(\"rect\").attr(\"width\", width - newX).attr(\"x\", newX);\n        svg.selectAll(\".line\") //.transition()\n        //.duration(1000)\n        .attr('d', line);\n        svg.select(\"#your-line\").attr(\"d\", predLine); //reposition draw your guess text and pointer\n\n        svg.select(\"#draw-guess\").attr(\"x\", newX + (width - newX) / 2);\n        svg.select(\"#pointer\").selectAll(\"circle\").attr(\"cx\", newX);\n      }\n    }\n\n    function brushended() {\n      if (!d3.event.selection) {\n        gb.call(brush.move, defaultSelection);\n      }\n    }\n\n    const gb = context.call(brush).call(brush.move, defaultSelection); ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    var deleteButton = document.createElement(\"button\");\n    deleteButton.innerText = \"Reset\";\n\n    deleteButton.onclick = () => {\n      this.deletePrediction(category);\n      predictionData = createDefaultPrediction(predStartDate, predEndDate);\n      predictionData[0].value = confirmedLastVal;\n      predictionData[0].defined = true;\n      console.log(predictionData); //update yourLine\n\n      var filtered = predictionData.filter(predLine.defined());\n      console.log(filtered);\n      yourLine.datum(filtered).attr('d', predLine);\n      svg.select(\"#drawing-instruction\").style(\"opacity\", \"1\");\n    };\n\n    document.querySelector(\"body\").appendChild(deleteButton); /////////////////////////////////////////////////////////\n\n    /*var test1 = [];\n    var test2 = [];\n    var test3 = [];\n    var test4 = [];\n    var test5 = [];\n     var start1 = d3.timeParse(\"%Y-%m-%d\")(\"2020-03-01\");\n    var start2 = d3.timeParse(\"%Y-%m-%d\")(\"2020-04-01\");\n    var start3 = d3.timeParse(\"%Y-%m-%d\")(\"2020-05-01\");\n    var start4 = d3.timeParse(\"%Y-%m-%d\")(\"2020-06-01\");\n    var start5 = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-01\");\n     var end1 = d3.timeParse(\"%Y-%m-%d\")(\"2020-8-01\");\n    var end2 = d3.timeParse(\"%Y-%m-%d\")(\"2020-9-01\");\n    var end3 = d3.timeParse(\"%Y-%m-%d\")(\"2020-10-01\");\n    var end4 = d3.timeParse(\"%Y-%m-%d\")(\"2020-11-01\");\n    var end5 = d3.timeParse(\"%Y-%m-%d\")(\"2020-12-01\");\n    var length = 153;\n    for(var i = 0; i < length; i++) {\n        test1.push({\n            date: start1,\n            value: Math.floor(Math.random() * 4001),\n            defined: true\n        })\n        test2.push({\n            date: start2,\n            value: Math.floor(Math.random() * 4001),\n            defined: true\n        })\n        test3.push({\n            date: start3,\n            value: Math.floor(Math.random() * 4001),\n            defined: true\n        })\n        test4.push({\n            date: start4,\n            value: Math.floor(Math.random() * 4001),\n            defined: true\n        })\n        test5.push({\n            date: start5,\n            value: Math.floor(Math.random() * 4001),\n            defined: true\n        })\n        start1 = d3.timeDay.offset(start1, 1);\n        start2 = d3.timeDay.offset(start2, 1);\n        start3 = d3.timeDay.offset(start3, 1);\n        start4 = d3.timeDay.offset(start4, 1);\n        start5 = d3.timeDay.offset(start5, 1);\n    }\n    console.log(test1);\n    console.log(test2);\n    console.log(test3);\n    console.log(test4);\n    console.log(test5);*/\n    //savePrediction(test1, category);\n    //savePrediction(test2, category);\n    //savePrediction(test3, category);\n    //savePrediction(test4, category);\n    //savePrediction(test5, category);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1362,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default InteractiveChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js"],"names":["React","Component","d3","clamp","sortDictByDateDescending","callout","getMostRecentPrediction","elementType","addDays","formatDate","InteractiveChart","constructor","props","state","category","chartRef","createRef","componentDidMount","loginStatus","console","log","renderChart","renderChartUnregistered","savePrediction","data","fetch","method","headers","body","JSON","stringify","deletePrediction","createDefaultPrediction","predStartDate","predEndDate","defaultData","currDate","push","date","value","defined","timeDay","offset","appendModal","modal","document","createElement","id","modalContent","text","innerText","signinBtn","signupBtn","appendChild","current","forecast","orgs","userPrediction","confirmed","aggregate","predictionData","defaultPredictionData","compiledData","legendWidth","toolTipHeight","contextHeight","margin","top","right","bottom","left","width","height","svg","select","append","attr","confirmedData","Object","keys","map","key","timeParse","forecastData","f","aggregateData","confirmedStartDate","length","predLength","filter","d","x","scaleTime","domain","range","xAxis","call","axisBottom","confirmedMax","max","forecastMax","currMax","yAxisMax","Math","y","scaleLinear","nice","axisLeft","legendString","concat","color","scaleOrdinal","schemeTableau10","legend","size","selectAll","enter","i","style","lineGenerator","line","curve","curveBasis","predLineGenerator","mainClip","mainArea","confirmedLine","datum","confirmedAreaEndX","confirmedAreaEndY","predictionClip","predictionArea","idxOfStartDate","bisector","splice","aggregateLine","index","lines","getElementsByClassName","predLine","yourLine","confirmedLastVal","filteredData","o","name","mouseArea","confirmedAreaWidth","node","getBoundingClientRect","clickAreaWidth","drawingInstruction","selectCircle","pointerCircles","c","drag","on","pos","mouse","invert","forEach","round","tooltipArea","mousePerLine","xCoord","a","b","floor","ceil","element","focusHeight","contextMargin","context","contextX","contextXAxis","brush","brushX","extent","brushed","brushended","defaultSelection","timeMonth","event","selection","newX","gb","move","deleteButton","onclick","filtered","querySelector","p","substring","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport './InteractiveChart.css';\nimport { clamp, sortDictByDateDescending, callout, getMostRecentPrediction } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\n\n\nclass InteractiveChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\" };\n        this.chartRef = React.createRef();\n    }\n    componentDidMount() {\n        const loginStatus = this.props.loginStatus;\n        console.log(loginStatus)\n        if (loginStatus['logged in']) {\n            this.renderChart();\n        }\n        else {\n            console.log(\"not logged in\")\n            this.renderChartUnregistered()\n        }\n    }\n\n    //move to utils\n    savePrediction(data, category) {\n        fetch('/update/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"data\": data, \"category\": category}),\n        });\n    }\n    deletePrediction(category) {\n        console.log(category)\n        fetch('/delete/',{\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\"category\": category}),\n          });\n        console.log(\"deleted\")\n    }\n\n    createDefaultPrediction(predStartDate, predEndDate) {\n        var defaultData = [];\n        var currDate = predStartDate;\n        //var defined = true;\n        //var value = confirmedData[confirmedData.length - 1].value;\n        \n        //create defaultPredictionData\n        while(+currDate <= +predEndDate) {\n            defaultData.push({date: currDate, value: 0, defined: 0});\n            currDate = d3.timeDay.offset(currDate, 1);\n        }\n        return defaultData;\n    }\n    \n    appendModal() {\n        var modal = document.createElement(\"div\");\n        modal.id = \"modal\";\n        var modalContent = document.createElement(\"div\");\n        modalContent.id = modalContent;\n        var text = document.createElement(\"p\");\n        text.innerText = \"Please log in to save your prediction.\"\n        var signinBtn = document.createElement(\"button\");\n        signinBtn.id = \"signinBtn\"\n        signinBtn.innerText = \"Sign In\"\n        var signupBtn = document.createElement(\"button\");\n        signupBtn.id = \"signupBtn\"\n        modalContent.appendChild(text);\n        modalContent.appendChild(signinBtn);\n        modalContent.appendChild(signupBtn);\n        modal.appendChild(modalContent);\n        this.chartRef.current.appendChild(modal);\n    }\n\n    renderChartUnregistered() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = [];//where we will store formatted userPrediction\n        var defaultPredictionData = []\n        const savePrediction = this.savePrediction;\n        const createDefaultPrediction = this.createDefaultPrediction;\n        this.appendModal();\n        const category = this.state.category;\n        var compiledData = [];\n        //set up margin, width, height of chart\n        const legendWidth = 180;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        \n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n        console.log(confirmedData);\n        \n        var forecastData = forecast.map(f => {\n            return Object.keys(f).map(key => ({\n                date: d3.timeParse(\"%Y-%m-%d\")(key),\n                value: f[key]\n            }))\n        });\n\n        var aggregateData = Object.keys(aggregate).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: aggregate[key]\n        }));\n  \n        //set other dates\n        //const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\"); //date format: y-m-d\n        const confirmedStartDate = confirmedData[4].date;\n        const predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n        const predLength = 155;\n        //var predEndDateString = addDays(new Date(), predLength).toISOString().substring(0, 10);\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis     \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n\n         //draw legend\n        var legend = svg.append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        legend.selectAll(\"rect\")\n            .data(legendString)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', width + 30)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", function(d){ return color(d)})\n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", width + 45)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .style(\"fill\", function(d){ return color(d)})\n                .text(function(d){ return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            .curve(d3.curveBasis);\n            //.curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //area where the confirmed curve will be drawn\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n\n        // Create the confirmed area variable\n        const mainArea = svg\n                                .append('g')\n                                .attr(\"clip-path\", \"url(#main-clip)\");\n\n        //display confirmed data\n        var confirmedLine = mainArea.append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")    \n                                    .datum(confirmedData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(legendString[legendString.length - 3]))\n        var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n        var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value);\n\n        //append clip-path for prediction curve\n        var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\")\n                                .attr(\"id\", \"prediction-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width - confirmedAreaEndX )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", confirmedAreaEndX)\n                                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n                            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        \n        //make sure aggregateData curve stems from confiremData curve\n        var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate);\n        //check if predStartDate exists in AD\n        if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date == +predStartDate) {\n            aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n        }\n        else {\n            aggregateData.splice(idxOfStartDate, 0, {\n                date: predStartDate,\n                value: confirmedData[confirmedData.length - 1].value\n            });\n            console.log(aggregateData);\n            console.log(\"done\");\n        }\n\n        //display aggregate data\n        var aggregateLine = predictionArea.append(\"path\")\n                                    .attr(\"id\", \"aggregate\")\n                                    .attr(\"class\", \"line\")        \n                                    .datum(aggregateData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(legendString[legendString.length - 2]))\n        \n        //display forecast data\n        forecastData.map((f, index) => {\n            //make sure they all stem from the confirmed curve!\n            //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n            var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate);\n            //check if predStartDate exists in f\n            if (f.length > 0 && +f[idxOfStartDate].date == +predStartDate) {\n                f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n            }\n            else {\n                f.splice(idxOfStartDate, 0, {\n                    date: predStartDate,\n                    value: confirmedData[confirmedData.length - 1].value\n                });\n                //console.log(f);\n                //console.log(\"done\");\n            }\n            //console.log(f)\n            //console.log(idxOfStartDate)\n            predictionArea.append(\"path\")\n                        .attr(\"class\", \"forecast line\")\n                        .attr(\"id\", orgs[index])\n                        .style(\"stroke\", color(orgs[index]))\n                        .datum(f)\n                            .attr(\"d\", line);\n        })\n        \n        var lines = document.getElementsByClassName('line');\n\n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = predictionArea\n                                        .append(\"path\")\n                                        .attr(\"id\", \"your-line\");\n        \n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n        \n\n        predictionData = createDefaultPrediction(predStartDate, predEndDate);\n        predictionData[0].value = confirmedLastVal;\n        predictionData[0].defined = true;\n        //console.log(predictionData);\n        \n\n        var filteredData = null;\n        //var totalData = confirmedData.concat(predictionData);\n\n//!!    //add forecast data to compiledData\n        orgs.map((o, index) => {\n            compiledData.push({\n                name: o,\n                data: forecastData[index]\n            })\n        })\n        compiledData.push({\n            name: \"Daily Confirmed Deaths\",\n            data: confirmedData\n        })\n        compiledData.push({\n            name: \"Aggregate Forecast\",\n            data: aggregateData\n        })\n        //if (userPrediction) {\n        compiledData.push({\n            name: \"User Prediction\",\n            data: predictionData\n        })\n        //}\n        //join data to yourLine\n        filteredData = predictionData.filter(predLine.defined())\n        yourLine.datum(filteredData)\n                .attr('d', predLine)\n                .style(\"stroke\", color(legendString[legendString.length - 1]))\n        //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append draw your guess text\n        const drawingInstruction = svg\n                                        .append(\"g\")\n                                        .attr(\"id\", \"drawing-instruction\")\n                                        .style(\"opacity\", \"1\");\n        drawingInstruction\n                            .append(\"text\")\n                            .attr(\"id\", \"draw-guess\")\n                            .attr(\"x\", confirmedAreaEndX + (width - confirmedAreaEndX) / 2)             \n                            .attr(\"y\", height - 100)\n                            .attr(\"text-anchor\", \"middle\")  \n                            .text(\"Draw your guess\")\n                            .style(\"font-size\", \"16px\");\n        //append circle at the end of confirmed curve\n        var selectCircle = drawingInstruction\n                                                .append(\"g\")\n                                                .attr(\"id\", \"pointer\");\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n        selectCircle.append(\"circle\")\n            .attr(\"class\", c)\n            .attr(\"cx\", confirmedAreaEndX)\n            .attr(\"cy\", confirmedAreaEndY)\n        })\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        //hide \"draw your guess\" text\n                        svg\n                            .select(\"#drawing-instruction\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"0\")\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        //update totalData everytime predictionData is updated\n                        compiledData[compiledData.length - 1].data = predictionData;\n                        //console.log(compiledData)\n                        /*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/\n                        var filteredData = predictionData.filter(predLine.defined())\n\n                        yourLine.datum(filteredData)\n                                .attr('d', predLine)\n                                .style(\"stroke\", color(legendString[legendString.length - 1]))\n\n                        });\n                    })\n                    .on(\"end\", function () {\n                        d3\n                            .select(\"#popup\")\n                            .style(\"display\", \"none\");\n                        console.log(\"popup\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"1\")\n                    });\n        \n        svg.call(drag)\n\n        //finds the datapoint closest to the mouse (along x)\n        /*var bisect = () => {\n            const bisectDate = d3.bisector(d => d.date).left;\n            return mx => {\n                const date = x.invert(mx);\n                const index = bisectDate(totalData, date, 1);\n                const a = totalData[index - 1];\n                const b = totalData[index];\n                return b && (date - a.date > b.date - date) ? b : a;\n            };\n        }*/\n\n\n        const tooltipArea = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n                    .attr(\"id\", \"tooltip-line\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"0.5px\")\n                    .style(\"opacity\", \"0\");\n        //console.log(compiledData)\n        var mousePerLine = tooltipArea\n                                        .selectAll(\".mouse-per-line\")\n                                        .data(compiledData)\n                                        .enter()\n                                        .append(\"g\")\n                                        .attr(\"class\", \"mouse-per-line\");\n        \n        mousePerLine.append(\"circle\")\n                        .attr(\"r\", 2)\n                        .style(\"stroke\", function(d) {\n                            return color(d.name);\n                        })\n                        .style(\"fill\", \"none\")\n                        .style(\"stroke-width\", \"1px\")\n                        .style(\"opacity\", \"0\");\n        mousePerLine.append(\"text\")\n                    .attr(\"transform\", \"translate(10,3)\"); \n        tooltipArea\n                    .append(\"svg:rect\")\n                    .attr('width', width)\n                    .attr('height', height)\n                    .attr('fill', 'none')\n                    .attr('pointer-events', 'all')\n                    .style(\"cursor\", \"pointer\")\n                    .on('mouseout', function() { // on mouse out hide line, circles and text\n                        d3.select(\"#tooltip-line\")\n                          .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                          .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line text\")\n                          .style(\"opacity\", \"0\")\n                    })\n                    .on('mouseover', function() { // on mouse in show line, circles and text\n                        d3.select(\"#tooltip-line\")\n                          .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                          .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                          .style(\"opacity\", \"1\")\n\n                    })\n                    .on('mousemove', function() { // mouse moving over canvas\n                        var mouse = d3.mouse(this);\n                        var xCoord = mouse[0];\n                        d3\n                            .select(\"#tooltip-line\")\n                            .attr(\"d\", function() {\n                                var d = \"M\" + xCoord + \",\" + height;\n                                d += \" \" + xCoord + \",\" + 0;\n                                return d;\n                            });\n                        d3\n                            .selectAll(\".mouse-per-line\")\n                            .attr(\"transform\", function(d, i) {\n                                if (d.data.length == 0) {return;}\n                                var date = x.invert(xCoord);\n                                const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n                                var a = null;\n                                if (index > 0) {\n                                    a = d.data[index - 1];\n                                }\n                                const b = d.data[index];\n                                //d = the data object corresponding to date and value pointed by the cursors\n                                var data = null;\n                                if (!a) {\n                                    data = b;\n                                }\n                                else if (!b) {\n                                    data = a;\n                                }\n                                else {\n                                    data = b && (date - a.date > b.date - date) ? b : a;\n                                }\n                                if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n                                    if (data.defined != 0) {\n                                        var element = d3.select(this)\n                                                        .select('text')\n                                                            .style(\"opacity\", \"1\")\n                                                            .text(Math.round(data.value));\n                                        element.select(\"circle\")\n                                                .style(\"opacity\", \"1\");\n                                        return \"translate(\" + mouse[0] + \",\" + y(data.value)+\")\";\n                                    }\n                                }\n                                var element = d3.select(this)\n                                                .select(\"text\")\n                                                .style(\"opacity\", \"0\")\n                                element\n                                        .select(\"circle\")\n                                        .style(\"opacity\", \"0\");\n                                \n                        });\n                    })\n\n        /////////////////////////////////////////////////////////////////////////////////////////////\n        const focusHeight = 100;\n        const contextMargin = 50;\n        var context = svg\n                            .append(\"g\")\n                                .attr(\"viewBox\", [0, 0, width, focusHeight])\n                                .attr(\"transform\", `translate(0,${height + contextMargin} )`)\n                                //.attr(\"width\", width + 100)\n                                //.attr(\"height\", height)\n                                .style(\"display\", \"block\")\n\n\n\n        /*const xAxis = (g, x, height) => g\n                                            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                            .call(d3.axisBottom(x))*/\n\n        var contextX = d3\n                            .scaleTime()\n                            .domain([confirmedStartDate, predEndDate])\n                            .range([0, width]);\n        \n        var contextXAxis = context\n                                    .append(\"g\")\n                                    .attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`)\n                                    .call(d3.axisBottom(contextX));\n        const brush = d3.brushX()\n                        .extent([[0, 0], [width, focusHeight - margin.bottom]])\n                        .on(\"brush\", brushed)\n                        .on(\"end\", brushended);\n\n        const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    \n        /*context.append(\"g\")\n                .call(xAxis, x, focusHeight);*/\n    \n        /*svg.append(\"path\")\n            .datum(confirmedData)\n            .attr(\"fill\", \"steelblue\")\n            .attr(\"d\", line(x, y.copy().range([focusHeight - margin.bottom, 4])));*/\n        function brushed() {\n            console.log(\"d\")\n            if (d3.event.selection) {\n                var extent = d3.event.selection;\n                //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                x.domain([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                xAxis\n                        //.transition()\n                        //.duration(1000)\n                        .call(d3.axisBottom(x))\n                var newX = x(confirmedData[confirmedData.length - 1].date);\n                newX = newX < 0 ? 0 : newX;\n                d3\n                    .select(\"#prediction-clip\")\n                    .select(\"rect\")\n                        .attr(\"width\", width - newX)\n                        .attr(\"x\", newX);\n\n                svg\n                    .selectAll(\".line\")\n                    //.transition()\n                    //.duration(1000)\n                    .attr('d', line)\n\n                svg\n                    .select(\"#your-line\")\n                    .attr(\"d\", predLine)\n                \n                //reposition draw your guess text and pointer\n                svg\n                    .select(\"#draw-guess\")\n                    .attr(\"x\", newX + (width - newX) / 2);\n                svg\n                    .select(\"#pointer\")\n                    .selectAll(\"circle\")\n                        .attr(\"cx\", newX);\n            }\n        }\n        \n        function brushended() {\n            if (!d3.event.selection) {\n                gb.call(brush.move, defaultSelection);\n            }\n\n        }\n        const gb = context\n                        .call(brush)\n                        .call(brush.move, defaultSelection);   \n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        var deleteButton = document.createElement(\"button\")\n        deleteButton.innerText = \"Reset\";\n        deleteButton.onclick = () => {\n            this.deletePrediction(category)\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            console.log(predictionData)\n            //update yourLine\n            var filtered = predictionData.filter(predLine.defined())\n            console.log(filtered)\n            yourLine.datum(filtered)\n                    .attr('d', predLine)\n                    \n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        };\n        document.querySelector(\"body\").appendChild(deleteButton);\n    }\n\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = [];//where we will store formatted userPrediction\n        var defaultPredictionData = []\n        const savePrediction = this.savePrediction;\n        const createDefaultPrediction = this.createDefaultPrediction;\n        const category = this.state.category;\n        var compiledData = [];\n        //set up margin, width, height of chart\n        const legendWidth = 180;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        \n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n        console.log(confirmedData);\n        \n        var forecastData = forecast.map(f => {\n            return Object.keys(f).map(key => ({\n                date: d3.timeParse(\"%Y-%m-%d\")(key),\n                value: f[key]\n            }))\n        });\n\n        var aggregateData = Object.keys(aggregate).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: aggregate[key]\n        }));\n\n        //store userPrediction in predictionData if it exists\n        if(Object.keys(userPrediction).length > 0) {\n            predictionData = getMostRecentPrediction(userPrediction).map(p => ({\n                date: d3.timeParse(\"%Y-%m-%d\")((p.date).substring(0,10)),\n                value: p.value,\n                defined: p.defined\n                })\n            );\n        }\n        //console.log(predictionData)\n  \n        //set other dates\n        //const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\"); //date format: y-m-d\n        const confirmedStartDate = confirmedData[4].date;\n        const predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n        const predLength = 155;\n        //var predEndDateString = addDays(new Date(), predLength).toISOString().substring(0, 10);\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis     \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n\n         //draw legend\n        var legend = svg.append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        legend.selectAll(\"rect\")\n            .data(legendString)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', width + 30)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", function(d){ return color(d)})\n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", width + 45)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .style(\"fill\", function(d){ return color(d)})\n                .text(function(d){ return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            .curve(d3.curveBasis);\n            //.curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //area where the confirmed curve will be drawn\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n\n        // Create the confirmed area variable\n        const mainArea = svg\n                                .append('g')\n                                .attr(\"clip-path\", \"url(#main-clip)\");\n\n        //display confirmed data\n        var confirmedLine = mainArea.append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")    \n                                    .datum(confirmedData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(legendString[legendString.length - 3]))\n        var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n        var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value);\n\n        //append clip-path for prediction curve\n        var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\")\n                                .attr(\"id\", \"prediction-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width - confirmedAreaEndX )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", confirmedAreaEndX)\n                                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n                            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        \n        //make sure aggregateData curve stems from confiremData curve\n        var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate);\n        //check if predStartDate exists in AD\n        if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date == +predStartDate) {\n            aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n        }\n        else {\n            aggregateData.splice(idxOfStartDate, 0, {\n                date: predStartDate,\n                value: confirmedData[confirmedData.length - 1].value\n            });\n            console.log(aggregateData);\n            console.log(\"done\");\n        }\n\n        //display aggregate data\n        var aggregateLine = predictionArea.append(\"path\")\n                                    .attr(\"id\", \"aggregate\")\n                                    .attr(\"class\", \"line\")        \n                                    .datum(aggregateData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(legendString[legendString.length - 2]))\n        \n        //display forecast data\n        forecastData.map((f, index) => {\n            //make sure they all stem from the confirmed curve!\n            //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n            var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate);\n            //check if predStartDate exists in f\n            if (f.length > 0 && +f[idxOfStartDate].date == +predStartDate) {\n                f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n            }\n            else {\n                f.splice(idxOfStartDate, 0, {\n                    date: predStartDate,\n                    value: confirmedData[confirmedData.length - 1].value\n                });\n                //console.log(f);\n                //console.log(\"done\");\n            }\n            //console.log(f)\n            //console.log(idxOfStartDate)\n            predictionArea.append(\"path\")\n                        .attr(\"class\", \"forecast line\")\n                        .attr(\"id\", orgs[index])\n                        .style(\"stroke\", color(orgs[index]))\n                        .datum(f)\n                            .attr(\"d\", line);\n        })\n        \n        var lines = document.getElementsByClassName('line');\n\n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = predictionArea\n                                        .append(\"path\")\n                                        .attr(\"id\", \"your-line\");\n        \n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n        \n        //check if userPrediction already exists in db\n        if (Object.keys(userPrediction).length > 0) {\n            predictionData = predictionData.filter(d => (+d.date >= +predStartDate) && (+d.date <= +predEndDate));\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            currDate = d3.timeDay.offset(predictionData[predictionData.length - 1].date, 1);\n            //currDate = addDays(predictionData[predictionData.length - 1].date, 1);\n            //console.log(predictionData)\n            //console.log(createDefaultPrediction(currDate, predEndDate))\n            predictionData.concat(createDefaultPrediction(currDate, predEndDate));\n            //console.log(predictionData);\n        }\n        else {\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            //console.log(predictionData);\n        }\n\n        var filteredData = null;\n        //var totalData = confirmedData.concat(predictionData);\n\n//!!    //add forecast data to compiledData\n        orgs.map((o, index) => {\n            compiledData.push({\n                name: o,\n                data: forecastData[index]\n            })\n        })\n        compiledData.push({\n            name: \"Daily Confirmed Deaths\",\n            data: confirmedData\n        })\n        compiledData.push({\n            name: \"Aggregate Forecast\",\n            data: aggregateData\n        })\n        //if (userPrediction) {\n        compiledData.push({\n            name: \"User Prediction\",\n            data: predictionData\n        })\n        //}\n        //join data to yourLine\n        filteredData = predictionData.filter(predLine.defined())\n        yourLine.datum(filteredData)\n                .attr('d', predLine)\n                .style(\"stroke\", color(legendString[legendString.length - 1]))\n        //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        console.log(confirmedAreaWidth)\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append draw your guess text\n        const drawingInstruction = svg\n                                        .append(\"g\")\n                                        .attr(\"id\", \"drawing-instruction\")\n                                        .style(\"opacity\", \"0\");\n        drawingInstruction\n                            .append(\"text\")\n                            .attr(\"id\", \"draw-guess\")\n                            .attr(\"x\", confirmedAreaEndX + (width - confirmedAreaEndX) / 2)             \n                            .attr(\"y\", height - 100)\n                            .attr(\"text-anchor\", \"middle\")  \n                            .text(\"Draw your guess\")\n                            .style(\"font-size\", \"16px\");\n        //append circle at the end of confirmed curve\n        var selectCircle = drawingInstruction\n                                                .append(\"g\")\n                                                .attr(\"id\", \"pointer\");\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n        selectCircle.append(\"circle\")\n            .attr(\"class\", c)\n            .attr(\"cx\", confirmedAreaEndX)\n            .attr(\"cy\", confirmedAreaEndY)\n        })\n\n        if(Object.keys(userPrediction).length == 0) {\n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        }\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        //hide \"draw your guess\" text\n                        svg\n                            .select(\"#drawing-instruction\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"0\")\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        //update totalData everytime predictionData is updated\n                        compiledData[compiledData.length - 1].data = predictionData;\n                        //console.log(compiledData)\n                        /*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/\n                        var filteredData = predictionData.filter(predLine.defined())\n\n                        yourLine.datum(filteredData)\n                                .attr('d', predLine)\n                                .style(\"stroke\", color(legendString[legendString.length - 1]))\n\n                        });\n                    })\n                    .on(\"end\", function () {\n                        savePrediction(predictionData, category);\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"1\")\n                    });\n        \n        svg.call(drag)\n\n        //finds the datapoint closest to the mouse (along x)\n        /*var bisect = () => {\n            const bisectDate = d3.bisector(d => d.date).left;\n            return mx => {\n                const date = x.invert(mx);\n                const index = bisectDate(totalData, date, 1);\n                const a = totalData[index - 1];\n                const b = totalData[index];\n                return b && (date - a.date > b.date - date) ? b : a;\n            };\n        }*/\n\n\n        const tooltipArea = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n                    .attr(\"id\", \"tooltip-line\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"0.5px\")\n                    .style(\"opacity\", \"0\");\n        //console.log(compiledData)\n        var mousePerLine = tooltipArea\n                                        .selectAll(\".mouse-per-line\")\n                                        .data(compiledData)\n                                        .enter()\n                                        .append(\"g\")\n                                        .attr(\"class\", \"mouse-per-line\");\n        \n        mousePerLine.append(\"circle\")\n                        .attr(\"r\", 2)\n                        .style(\"stroke\", function(d) {\n                            return color(d.name);\n                        })\n                        .style(\"fill\", \"none\")\n                        .style(\"stroke-width\", \"1px\")\n                        .style(\"opacity\", \"0\");\n        mousePerLine.append(\"text\")\n                    .attr(\"transform\", \"translate(10,3)\"); \n        tooltipArea\n                    .append(\"svg:rect\")\n                    .attr('width', width)\n                    .attr('height', height)\n                    .attr('fill', 'none')\n                    .attr('pointer-events', 'all')\n                    .style(\"cursor\", \"pointer\")\n                    .on('mouseout', function() { // on mouse out hide line, circles and text\n                        d3.select(\"#tooltip-line\")\n                          .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                          .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line text\")\n                          .style(\"opacity\", \"0\")\n                    })\n                    .on('mouseover', function() { // on mouse in show line, circles and text\n                        d3.select(\"#tooltip-line\")\n                          .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                          .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                          .style(\"opacity\", \"1\")\n\n                    })\n                    .on('mousemove', function() { // mouse moving over canvas\n                        var mouse = d3.mouse(this);\n                        var xCoord = mouse[0];\n                        d3\n                            .select(\"#tooltip-line\")\n                            .attr(\"d\", function() {\n                                var d = \"M\" + xCoord + \",\" + height;\n                                d += \" \" + xCoord + \",\" + 0;\n                                return d;\n                            });\n                        d3\n                            .selectAll(\".mouse-per-line\")\n                            .attr(\"transform\", function(d, i) {\n                                if (d.data.length == 0) {return;}\n                                var date = x.invert(xCoord);\n                                const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n                                var a = null;\n                                if (index > 0) {\n                                    a = d.data[index - 1];\n                                }\n                                const b = d.data[index];\n                                //d = the data object corresponding to date and value pointed by the cursors\n                                var data = null;\n                                if (!a) {\n                                    data = b;\n                                }\n                                else if (!b) {\n                                    data = a;\n                                }\n                                else {\n                                    data = b && (date - a.date > b.date - date) ? b : a;\n                                }\n                                if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n                                    if (data.defined != 0) {\n                                        var element = d3.select(this)\n                                                        .select('text')\n                                                            .style(\"opacity\", \"1\")\n                                                            .text(Math.round(data.value));\n                                        element.select(\"circle\")\n                                                .style(\"opacity\", \"1\");\n                                        return \"translate(\" + mouse[0] + \",\" + y(data.value)+\")\";\n                                    }\n                                }\n                                var element = d3.select(this)\n                                                .select(\"text\")\n                                                .style(\"opacity\", \"0\")\n                                element\n                                        .select(\"circle\")\n                                        .style(\"opacity\", \"0\");\n                                \n                        });\n                    })\n\n        /////////////////////////////////////////////////////////////////////////////////////////////\n        const focusHeight = 100;\n        const contextMargin = 50;\n        var context = svg\n                            .append(\"g\")\n                                .attr(\"viewBox\", [0, 0, width, focusHeight])\n                                .attr(\"transform\", `translate(0,${height + contextMargin} )`)\n                                //.attr(\"width\", width + 100)\n                                //.attr(\"height\", height)\n                                .style(\"display\", \"block\")\n\n\n\n        /*const xAxis = (g, x, height) => g\n                                            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                            .call(d3.axisBottom(x))*/\n\n        var contextX = d3\n                            .scaleTime()\n                            .domain([confirmedStartDate, predEndDate])\n                            .range([0, width]);\n        \n        var contextXAxis = context\n                                    .append(\"g\")\n                                    .attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`)\n                                    .call(d3.axisBottom(contextX));\n        const brush = d3.brushX()\n                        .extent([[0, 0], [width, focusHeight - margin.bottom]])\n                        .on(\"brush\", brushed)\n                        .on(\"end\", brushended);\n\n        const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    \n        /*context.append(\"g\")\n                .call(xAxis, x, focusHeight);*/\n    \n        /*svg.append(\"path\")\n            .datum(confirmedData)\n            .attr(\"fill\", \"steelblue\")\n            .attr(\"d\", line(x, y.copy().range([focusHeight - margin.bottom, 4])));*/\n        function brushed() {\n            console.log(\"d\")\n            if (d3.event.selection) {\n                var extent = d3.event.selection;\n                //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                x.domain([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                xAxis\n                        //.transition()\n                        //.duration(1000)\n                        .call(d3.axisBottom(x))\n                var newX = x(confirmedData[confirmedData.length - 1].date);\n                newX = newX < 0 ? 0 : newX;\n                console.log(newX);\n                d3\n                    .select(\"#prediction-clip\")\n                    .select(\"rect\")\n                        .attr(\"width\", width - newX)\n                        .attr(\"x\", newX);\n\n                svg\n                    .selectAll(\".line\")\n                    //.transition()\n                    //.duration(1000)\n                    .attr('d', line)\n\n                svg\n                    .select(\"#your-line\")\n                    .attr(\"d\", predLine)\n                \n                //reposition draw your guess text and pointer\n                svg\n                    .select(\"#draw-guess\")\n                    .attr(\"x\", newX + (width - newX) / 2);\n                svg\n                    .select(\"#pointer\")\n                    .selectAll(\"circle\")\n                        .attr(\"cx\", newX);\n            }\n        }\n        \n        function brushended() {\n            if (!d3.event.selection) {\n                gb.call(brush.move, defaultSelection);\n            }\n\n        }\n        const gb = context\n                        .call(brush)\n                        .call(brush.move, defaultSelection);   \n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        var deleteButton = document.createElement(\"button\")\n        deleteButton.innerText = \"Reset\";\n        deleteButton.onclick = () => {\n            this.deletePrediction(category)\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            console.log(predictionData)\n            //update yourLine\n            var filtered = predictionData.filter(predLine.defined())\n            console.log(filtered)\n            yourLine.datum(filtered)\n                    .attr('d', predLine)\n                    \n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        };\n        document.querySelector(\"body\").appendChild(deleteButton);\n        /////////////////////////////////////////////////////////\n        /*var test1 = [];\n        var test2 = [];\n        var test3 = [];\n        var test4 = [];\n        var test5 = [];\n\n        var start1 = d3.timeParse(\"%Y-%m-%d\")(\"2020-03-01\");\n        var start2 = d3.timeParse(\"%Y-%m-%d\")(\"2020-04-01\");\n        var start3 = d3.timeParse(\"%Y-%m-%d\")(\"2020-05-01\");\n        var start4 = d3.timeParse(\"%Y-%m-%d\")(\"2020-06-01\");\n        var start5 = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-01\");\n\n        var end1 = d3.timeParse(\"%Y-%m-%d\")(\"2020-8-01\");\n        var end2 = d3.timeParse(\"%Y-%m-%d\")(\"2020-9-01\");\n        var end3 = d3.timeParse(\"%Y-%m-%d\")(\"2020-10-01\");\n        var end4 = d3.timeParse(\"%Y-%m-%d\")(\"2020-11-01\");\n        var end5 = d3.timeParse(\"%Y-%m-%d\")(\"2020-12-01\");\n        var length = 153;\n        for(var i = 0; i < length; i++) {\n            test1.push({\n                date: start1,\n                value: Math.floor(Math.random() * 4001),\n                defined: true\n            })\n            test2.push({\n                date: start2,\n                value: Math.floor(Math.random() * 4001),\n                defined: true\n            })\n            test3.push({\n                date: start3,\n                value: Math.floor(Math.random() * 4001),\n                defined: true\n            })\n            test4.push({\n                date: start4,\n                value: Math.floor(Math.random() * 4001),\n                defined: true\n            })\n            test5.push({\n                date: start5,\n                value: Math.floor(Math.random() * 4001),\n                defined: true\n            })\n            start1 = d3.timeDay.offset(start1, 1);\n            start2 = d3.timeDay.offset(start2, 1);\n            start3 = d3.timeDay.offset(start3, 1);\n            start4 = d3.timeDay.offset(start4, 1);\n            start5 = d3.timeDay.offset(start5, 1);\n        }\n        console.log(test1);\n        console.log(test2);\n        console.log(test3);\n        console.log(test4);\n        console.log(test5);*/\n        //savePrediction(test1, category);\n        //savePrediction(test2, category);\n        //savePrediction(test3, category);\n        //savePrediction(test4, category);\n        //savePrediction(test5, category);\n\n    }\n        \n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default InteractiveChart;"]},"metadata":{},"sourceType":"module"}