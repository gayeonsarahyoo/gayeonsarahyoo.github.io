{"ast":null,"code":"import _classCallCheck from\"/Users/sarah/Documents/Sarah/Projects/reu/gayeonsarahyoo.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/sarah/Documents/Sarah/Projects/reu/gayeonsarahyoo.github.io/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/sarah/Documents/Sarah/Projects/reu/gayeonsarahyoo.github.io/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/sarah/Documents/Sarah/Projects/reu/gayeonsarahyoo.github.io/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import*as d3 from'd3';import'./InteractiveChart.css';import{clamp,findYatX,getAllDataPoints,getDataPointsFromPath,reformatData,reformatPredData,getMostRecentPrediction}from'../../utils/data';import{addDays,formatDate}from'../../utils/date';import{rectangle}from'leaflet';var InteractiveChart=/*#__PURE__*/function(_Component){_inherits(InteractiveChart,_Component);var _super=_createSuper(InteractiveChart);function InteractiveChart(props){var _this;_classCallCheck(this,InteractiveChart);_this=_super.call(this,props);_this.state={category:\"us_daily_deaths\"};_this.chartRef=React.createRef();return _this;}_createClass(InteractiveChart,[{key:\"componentDidMount\",value:function componentDidMount(){var loginStatus=this.props.loginStatus;if(loginStatus['logged in']){this.renderChart();}else{this.renderChartUnregistered();}}//move to utils\n},{key:\"savePrediction\",value:function savePrediction(data,category){fetch('/update/',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({\"data\":data,\"category\":category})});}},{key:\"deletePrediction\",value:function deletePrediction(category){console.log(category);fetch('/delete/',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({\"category\":category})});console.log(\"deleted\");}},{key:\"createDefaultPrediction\",value:function createDefaultPrediction(predStartDate,predEndDate){var defaultData=[];var currDate=predStartDate;//var defined = true;\n//var value = confirmedData[confirmedData.length - 1].value;\n//create defaultPredictionData\nwhile(+currDate<=+predEndDate){defaultData.push({date:currDate,value:0,defined:0});currDate=d3.timeDay.offset(currDate,1);}return defaultData;}},{key:\"appendModal\",value:function appendModal(){var signinRedirect=function signinRedirect(){window.location.href='/signin';};var signupRedirect=function signupRedirect(){window.location.href='/signup';};var modal=document.createElement(\"div\");modal.id=\"modal\";var modalContent=document.createElement(\"div\");modalContent.id=\"modal-content\";var text=document.createElement(\"p\");text.innerText=\"Please log in to save your prediction.\";var signinBtn=document.createElement(\"button\");signinBtn.id=\"signin-btn\";signinBtn.innerText=\"Sign In\";signinBtn.onclick=signinRedirect;var signupBtn=document.createElement(\"button\");signupBtn.id=\"signup-btn\";signupBtn.onclick=signupRedirect;signupBtn.innerText=\"Sign Up\";modalContent.appendChild(text);modalContent.appendChild(signinBtn);modalContent.appendChild(signupBtn);modal.appendChild(modalContent);this.chartRef.current.appendChild(modal);}},{key:\"renderChartUnregistered\",value:function renderChartUnregistered(){var _this2=this;var _this$props=this.props,forecast=_this$props.forecast,orgs=_this$props.orgs,userPrediction=_this$props.userPrediction,confirmed=_this$props.confirmed,aggregate=_this$props.aggregate;var predictionData=[];//where we will store formatted userPrediction\nvar defaultPredictionData=[];var savePrediction=this.savePrediction;var createDefaultPrediction=this.createDefaultPrediction;this.appendModal();var category=this.state.category;var compiledData=[];//set up margin, width, height of chart\nvar legendWidth=380;var toolTipHeight=50;//to make sure there's room for the tooltip when the value is 0\nvar contextHeight=100;var margin={top:20,right:30,bottom:20,left:60},width=800-margin.left-margin.right,height=400-margin.top-margin.bottom;var svg=d3.select(this.chartRef.current).append(\"svg\").attr(\"width\",width+margin.left+margin.right+legendWidth).attr(\"height\",height+margin.top+margin.bottom+toolTipHeight+contextHeight).append(\"g\").attr(\"transform\",\"translate(\".concat(margin.left,\", \").concat(margin.top+20,\" )\"));// add title\nsvg.append(\"text\").attr(\"x\",width/2).attr(\"y\",-20).attr(\"text-anchor\",\"middle\").style(\"font-size\",\"16px\").style(\"text-decoration\",\"underline\").style(\"font-weight\",\"bold\").text(\"COVID-19 Forecasts of Daily Deaths in the US Over Time\");var w=710-margin.left-margin.right;var h=360-margin.top-margin.bottom;//Create X axis label   \nsvg.append(\"text\").attr(\"x\",w/2+margin.right).attr(\"y\",h+4*margin.bottom).style(\"text-anchor\",\"middle\").text(\"Date\");//Create Y axis label\nsvg.append(\"text\").attr(\"transform\",\"rotate(-90)\").attr(\"y\",0-margin.left).attr(\"x\",0-h/2).attr(\"dy\",\"1em\").style(\"text-anchor\",\"middle\").text(\"Daily Deaths\");//format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\nvar confirmedData=Object.keys(confirmed).map(function(key){return{date:d3.timeParse(\"%Y-%m-%d\")(key),value:confirmed[key]};});var forecastData=forecast.map(function(f){return Object.keys(f).map(function(key){return{date:d3.timeParse(\"%Y-%m-%d\")(key),value:f[key]};});});var aggregateData=Object.keys(aggregate).map(function(key){return{date:d3.timeParse(\"%Y-%m-%d\")(key),value:aggregate[key]};});//set other dates\nvar confirmedStartDate=confirmedData[4].date;var predStartDate=confirmedData[confirmedData.length-1].date;//last date of confirmedData\nvar predLength=155;var predEndDate=d3.timeDay.offset(predStartDate,predLength);//get confirmedData starting from confirmedStartDate\nconfirmedData=confirmedData.filter(function(d){return+d.date>=+confirmedStartDate;});//draw x-axis     \nvar x=d3.scaleTime().domain([confirmedStartDate,predEndDate]).range([0,width]);//.nice(); //rounds up/down the max and mind of x axis\nvar xAxis=svg.append(\"g\").attr(\"transform\",\"translate(0,\"+height+\")\").call(d3.axisBottom(x));//find max val in confirmedData and forecastData to determine the max of y-axis\nvar confirmedMax=d3.max(confirmedData,function(d){return+d.value;});var forecastMax=0;forecastData.map(function(f){var currMax=d3.max(f,function(d){return d.value;});forecastMax=currMax>forecastMax?currMax:forecastMax;});var yAxisMax=Math.max(confirmedMax,forecastMax);//draw y-axis\nvar y=d3.scaleLinear().domain([0,yAxisMax]).range([height,0]).nice();svg.append(\"g\").call(d3.axisLeft(y));//list of data displayed in graph - for legend\n//var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\nvar legendString=[\"Daily Confirmed Deaths\",\"Aggregate Forecast\",\"User Prediction\"].concat(orgs);//color function that assigns random colors to each data\nvar color=d3.scaleOrdinal().domain(legendString).range(d3.schemeTableau10);//draw legend\nvar legend=svg.append('g').attr(\"id\",\"legend\");var size=10;var legendMarginL=30;legend.selectAll(\"rect\").data(legendString).enter().append(\"circle\").attr('cx',width+legendMarginL).attr(\"cy\",function(d,i){return 20+i*25;})// 100 is where the first dot appears. 25 is the distance between dots\n.attr(\"r\",6)//.attr(\"width\", size)\n//.attr(\"height\", size)\n.style(\"fill\",function(d){return color(d);});legend.selectAll(\"labels\").data(legendString).enter().append(\"text\").attr(\"x\",width+45).attr(\"y\",function(d,i){return 20+i*25;})// 100 is where the first dot appears. 25 is the distance between dots\n.style(\"fill\",function(d){return color(d);}).text(function(d){return d;}).attr(\"text-anchor\",\"left\").style(\"alignment-baseline\",\"middle\");//create line generator for confirmed/forecast data and prediction data\nvar lineGenerator=d3.line()//.curve(d3.curveBasis);\n.curve(d3.curveCatmullRom);//curve that goes through all data points\nvar predLineGenerator=d3.line().curve(d3.curveBasis);//curve doesn't go through all data points (it's smoothed out)\n//d3.curveMonotoneX\n//d3.curveBasis\n//d3.curveCardinal\n//function that draws curve\nvar line=lineGenerator.x(function(d){return x(d.date);}).y(function(d){return y(d.value);});//area where the confirmed curve will be drawn\nvar mainClip=svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\",\"main-clip\").append(\"svg:rect\").attr(\"width\",width).attr(\"height\",height).attr(\"x\",0).attr(\"y\",0);// Create the confirmed area variable\nvar mainArea=svg.append('g').attr(\"clip-path\",\"url(#main-clip)\");//display confirmed data\nvar confirmedLine=mainArea.append(\"path\").attr(\"id\",\"confirmed\").attr(\"class\",\"line\").datum(confirmedData).attr('d',line).attr(\"stroke\",color(legendString[0])).style(\"stroke-width\",\"3px\");var confirmedAreaEndX=x(confirmedData[confirmedData.length-1].date);var confirmedAreaEndY=y(confirmedData[confirmedData.length-1].value);//append clip-path for prediction curve\nvar predictionClip=svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\",\"prediction-clip\").append(\"svg:rect\").attr(\"width\",width-confirmedAreaEndX).attr(\"height\",height).attr(\"x\",confirmedAreaEndX).attr(\"y\",0);var predictionArea=svg.append('g').attr(\"clip-path\",\"url(#prediction-clip)\");//make sure aggregateData curve stems from confiremData curve\nvar idxOfStartDate=d3.bisector(function(f){return f.date;}).left(aggregateData,predStartDate);//check if predStartDate exists in AD\nif(aggregateData.length>0&&+aggregateData[idxOfStartDate].date==+predStartDate){aggregateData[idxOfStartDate].value=confirmedData[confirmedData.length-1].value;}else{aggregateData.splice(idxOfStartDate,0,{date:predStartDate,value:confirmedData[confirmedData.length-1].value});}aggregateData=aggregateData.splice(idxOfStartDate,aggregateData.length);//display aggregate data\nvar aggregateLine=predictionArea.append(\"path\").attr(\"id\",\"aggregate\").attr(\"class\",\"line\").datum(aggregateData).attr('d',line).attr(\"stroke\",color(legendString[1])).style(\"stroke-width\",\"2px\");//display forecast data\nforecastData.map(function(f,index){//make sure they all stem from the confirmed curve!\n//var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\nvar idxOfStartDate=d3.bisector(function(f){return f.date;}).left(f,predStartDate);//check if predStartDate exists in f\nif(f.length>0&&+f[idxOfStartDate].date==+predStartDate){f[idxOfStartDate].value=confirmedData[confirmedData.length-1].value;}else{//add data point to forecastData array\nf.splice(idxOfStartDate,0,{date:predStartDate,value:confirmedData[confirmedData.length-1].value});f=f.slice(idxOfStartDate,f.length);}forecastData[index]=f;predictionArea.append(\"path\").attr(\"class\",\"forecast line\").attr(\"id\",orgs[index]).style(\"stroke\",color(orgs[index])).datum(f).attr(\"d\",line);});var lines=document.getElementsByClassName('line');//function that generates the prediction curve\nvar predLine=predLineGenerator.defined(function(d){return d.defined;}).x(function(d){return x(d.date);}).y(function(d){return y(d.value);});//append path for prediction data\nvar yourLine=predictionArea.append(\"path\").attr(\"id\",\"your-line\");//variables used to initialize user prediction data if it doesn't exist in the db\nvar currDate=predStartDate;var defined=true;var value=confirmedData[confirmedData.length-1].value;var confirmedLastVal=value;//used to make sure the first data point of prediction stays the same\npredictionData=createDefaultPrediction(predStartDate,predEndDate);predictionData[0].value=confirmedLastVal;predictionData[0].defined=true;var filteredData=null;//var totalData = confirmedData.concat(predictionData);\n//!!    //add forecast data to compiledData\nvar forecastPaths=document.querySelectorAll(\".forecast\");var confirmedPath=document.querySelector(\"#confirmed\");var aggregatePath=document.querySelector(\"#aggregate\");console.log(aggregatePath);console.log(forecastPaths);console.log(orgs);orgs.map(function(o,index){var lastDate=forecastData[index][forecastData[index].length-1].date;forecastData[index]=getAllDataPoints(forecastPaths[index],x,y,predStartDate,lastDate);compiledData.push({name:o,data:forecastData[index]});});//confirmedData = getAllDataPoints(confirmedPath, x, y, confirmedStartDate, predStartDate);\ncompiledData.push({name:\"Daily Confirmed Deaths\",data:confirmedData});var lastDate=aggregateData[aggregateData.length-1].date;aggregateData=getAllDataPoints(aggregatePath,x,y,aggregateData[0].date,lastDate);console.log(aggregateData);compiledData.push({name:\"Aggregate Forecast\",data:aggregateData});compiledData.push({name:\"User Prediction\",data:predictionData});//join data to yourLine\nfilteredData=predictionData.filter(predLine.defined());yourLine.datum(filteredData).attr('d',predLine).style(\"stroke\",color(legendString[2])).style(\"stroke-width\",\"2px\");//append new rect  \nvar mouseArea=svg.append(\"rect\").attr(\"width\",width).attr(\"height\",height).attr(\"fill\",\"none\").attr(\"id\",\"mouse-area\").style(\"pointer-events\",\"visible\");//append click area rect\nvar confirmedAreaWidth=confirmedLine.node().getBoundingClientRect().width;//get width of path element containing confirmed data\nvar clickAreaWidth=width-confirmedAreaWidth;//the remaining area\n/*svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");*/ //var clickArea = d3.select(\"#click-area\");\n//append draw your guess text\nvar drawingInstruction=svg.append(\"g\").attr(\"id\",\"drawing-instruction\").style(\"opacity\",\"1\");drawingInstruction.append(\"text\").attr(\"id\",\"draw-guess\").attr(\"x\",confirmedAreaEndX+(width-confirmedAreaEndX)/2).attr(\"y\",height-100).attr(\"text-anchor\",\"middle\").text(\"Draw your guess\").style(\"font-size\",\"16px\");//append circle at the end of confirmed curve\nvar selectCircle=drawingInstruction.append(\"g\").attr(\"id\",\"pointer\");var pointerCircles=[\"pulse-disk\",\"pulse-circle\",\"pulse-circle-2\"];pointerCircles.map(function(c){selectCircle.append(\"circle\").attr(\"class\",c).attr(\"cx\",confirmedAreaEndX).attr(\"cy\",confirmedAreaEndY);});var drag=d3.drag().on(\"drag\",function(){//hide \"draw your guess\" text\nsvg.select(\"#drawing-instruction\").style(\"opacity\",\"0\");d3.select(\"#tooltip-line\").style(\"opacity\",\"0\");d3.selectAll(\".mouse-per-line circle\").style(\"opacity\",\"0\");d3.selectAll(\".mouse-per-line text\").style(\"opacity\",\"0\");var pos=d3.mouse(this);var date=clamp(predStartDate,predEndDate,x.invert(pos[0]));var value=clamp(0,yAxisMax,y.invert(pos[1]));predictionData.forEach(function(d){if(+d3.timeDay.round(d.date)==+d3.timeDay.round(date)){d.value=value;d.defined=true;}predictionData[0].value=confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n//update totalData everytime predictionData is updated\ncompiledData[compiledData.length-1].data=predictionData;//console.log(compiledData)\n/*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/var filteredData=predictionData.filter(predLine.defined());yourLine.datum(filteredData).attr('d',predLine).style(\"stroke\",color(legendString[2])).style(\"stroke-width\",\"2px\");});}).on(\"end\",function(){d3.select(\"#modal\").style(\"display\",\"block\");d3.select(\"#tooltip-line\").style(\"opacity\",\"1\");d3.selectAll(\".mouse-per-line circle\").style(\"opacity\",\"1\");d3.selectAll(\".mouse-per-line text\").style(\"opacity\",\"1\");});svg.call(drag);var modal=document.getElementById(\"modal\");window.onclick=function(event){if(event.target==modal){modal.style.display=\"none\";}};//finds the datapoint closest to the mouse (along x)\n/*var bisect = () => {\n            const bisectDate = d3.bisector(d => d.date).left;\n            return mx => {\n                const date = x.invert(mx);\n                const index = bisectDate(totalData, date, 1);\n                const a = totalData[index - 1];\n                const b = totalData[index];\n                return b && (date - a.date > b.date - date) ? b : a;\n            };\n        }*/var tooltipArea=svg.append(\"g\").attr(\"class\",\"tooltip\");tooltipArea.append(\"path\")//vertical line\n.attr(\"id\",\"tooltip-line\").style(\"stroke\",\"black\").style(\"stroke-width\",\"0.5px\").style(\"opacity\",\"0\");//console.log(compiledData)\nvar mousePerLine=tooltipArea.selectAll(\".mouse-per-line\").data(compiledData).enter().append(\"g\").attr(\"class\",\"mouse-per-line\");mousePerLine.append(\"circle\").attr(\"r\",2).style(\"stroke\",function(d){return color(d.name);}).style(\"fill\",\"none\").style(\"stroke-width\",\"1px\").style(\"opacity\",\"0\");mousePerLine.append(\"text\").attr(\"transform\",\"translate(10,3)\");var chart=tooltipArea.append(\"svg:rect\").attr('width',width).attr('height',height).attr('fill','none').attr('pointer-events','all')//.style(\"cursor\", \"pointer\")\n.on('mouseout',function(){// on mouse out hide line, circles and text\nd3.select(\"#tooltip-line\").style(\"opacity\",\"0\");d3.selectAll(\".mouse-per-line circle\").style(\"opacity\",\"0\");d3.selectAll(\".mouse-per-line text\").style(\"opacity\",\"0\");}).on('mouseover',function(){// on mouse in show line, circles and text\nd3.select(\"#tooltip-line\").style(\"opacity\",\"1\");d3.selectAll(\".mouse-per-line circle\").style(\"opacity\",\"1\");d3.selectAll(\".mouse-per-line text\").style(\"opacity\",\"1\");}).on('mousemove',function(){// mouse moving over canvas\nvar mouse=d3.mouse(this);var xCoord=mouse[0];var yCoord=mouse[1];var xLowerBoundary=x(confirmedData[confirmedData.length-1].date);if(xCoord>xLowerBoundary&&xCoord<width&&yCoord>0&&yCoord<height){chart.attr(\"cursor\",\"pointer\");}else{chart.attr(\"cursor\",\"default\");}d3.select(\"#tooltip-line\").attr(\"d\",function(){var d=\"M\"+xCoord+\",\"+height;d+=\" \"+xCoord+\",\"+0;return d;});d3.selectAll(\".mouse-per-line\").attr(\"transform\",function(d,i){if(d.data.length==0){return;}var date=x.invert(xCoord);var index=d3.bisector(function(f){return f.date;}).left(compiledData[i].data,date);var a=null;if(index>0){a=d.data[index-1];}var b=d.data[index];//d = the data object corresponding to date and value pointed by the cursors\nvar data=null;if(!a){data=b;}else if(!b){data=a;}else{data=b&&date-a.date>b.date-date?b:a;}if(+d3.timeDay.floor(date)==+data.date||+d3.timeDay.ceil(date)==+data.date){if(data.defined!=0){var element=d3.select(this).select('text').style(\"opacity\",\"1\").text(Math.round(data.value));element.select(\"circle\").style(\"opacity\",\"1\");return\"translate(\"+mouse[0]+\",\"+y(data.value)+\")\";}}var element=d3.select(this).select(\"text\").style(\"opacity\",\"0\");element.select(\"circle\").style(\"opacity\",\"0\");});});/////////////////////////////////////////////////////////////////////////////////////////////\nvar focusHeight=100;var contextMargin=50;var context=svg.append(\"g\").attr(\"viewBox\",[0,0,width,focusHeight]).attr(\"transform\",\"translate(0,\".concat(height+contextMargin,\" )\"))//.attr(\"width\", width + 100)\n//.attr(\"height\", height)\n.style(\"display\",\"block\");/*const xAxis = (g, x, height) => g\n                                            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                            .call(d3.axisBottom(x))*/var contextX=d3.scaleTime().domain([confirmedStartDate,predEndDate]).range([0,width]);var contextXAxis=context.append(\"g\").attr(\"transform\",\"translate(0,\".concat(focusHeight-margin.bottom,\")\")).call(d3.axisBottom(contextX));var brush=d3.brushX().extent([[0,0],[width,focusHeight-margin.bottom]]).on(\"brush\",brushed).on(\"end\",brushended);var defaultSelection=[x(d3.timeMonth.offset(x.domain()[1],-8)),x.range()[1]];/*context.append(\"g\")\n                .call(xAxis, x, focusHeight);*/ /*svg.append(\"path\")\n            .datum(confirmedData)\n            .attr(\"fill\", \"steelblue\")\n            .attr(\"d\", line(x, y.copy().range([focusHeight - margin.bottom, 4])));*/function brushed(){if(d3.event.selection){var extent=d3.event.selection;//console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\nx.domain([contextX.invert(extent[0]),contextX.invert(extent[1])]);xAxis//.transition()\n//.duration(1000)\n.call(d3.axisBottom(x));var newX=x(confirmedData[confirmedData.length-1].date);newX=newX<0?0:newX;d3.select(\"#prediction-clip\").select(\"rect\").attr(\"width\",width-newX).attr(\"x\",newX);svg.selectAll(\".line\")//.transition()\n//.duration(1000)\n.attr('d',line);svg.select(\"#your-line\").attr(\"d\",predLine);//reposition draw your guess text and pointer\nsvg.select(\"#draw-guess\").attr(\"x\",newX+(width-newX)/2);svg.select(\"#pointer\").selectAll(\"circle\").attr(\"cx\",newX);}}function brushended(){if(!d3.event.selection){gb.call(brush.move,defaultSelection);}}var gb=context.call(brush).call(brush.move,defaultSelection);////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nvar deleteButton=document.createElement(\"button\");deleteButton.className='btn primary-btn';deleteButton.id='delete-btn';deleteButton.innerText=\"Reset\";d3.select(\"#delete-btn\");deleteButton.onclick=function(){_this2.deletePrediction(category);predictionData=createDefaultPrediction(predStartDate,predEndDate);predictionData[0].value=confirmedLastVal;predictionData[0].defined=true;//update yourLine\nvar filtered=predictionData.filter(predLine.defined());yourLine.datum(filtered).attr('d',predLine);svg.select(\"#drawing-instruction\").style(\"opacity\",\"1\");};document.querySelector(\"body\").appendChild(deleteButton);////ADD TODAY LINE/////////////////////////////////////////////////////\nvar today=d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));var todayMarker=svg.append(\"g\").attr(\"id\",\"today-marker\");todayMarker.append(\"line\").attr(\"id\",\"today-line\").attr(\"x1\",x(today)).attr(\"x2\",x(today)).attr(\"y1\",0).attr(\"y2\",height).attr(\"stroke\",\"black\").attr(\"stroke-width\",1).attr(\"stroke-dasharray\",\"8, 8\");todayMarker.append(\"text\").attr(\"id\",\"today-text\").attr(\"transform\",\"translate(\".concat(x(today)+17,\", 0) rotate(-90)\")).text(\"Today\").style(\"text-anchor\",\"end\");}},{key:\"renderChart\",value:function renderChart(){var _this3=this;var _this$props2=this.props,forecast=_this$props2.forecast,orgs=_this$props2.orgs,userPrediction=_this$props2.userPrediction,confirmed=_this$props2.confirmed,aggregate=_this$props2.aggregate;var predictionData=[];//where we will store formatted userPrediction\nvar defaultPredictionData=[];var savePrediction=this.savePrediction;var createDefaultPrediction=this.createDefaultPrediction;var category=this.state.category;var compiledData=[];//set up margin, width, height of chart\nvar legendWidth=180;var toolTipHeight=50;//to make sure there's room for the tooltip when the value is 0\nvar contextHeight=100;var titleHeight=20;var margin={top:20,right:30,bottom:20,left:60},width=800-margin.left-margin.right,height=400-margin.top-margin.bottom;var svg=d3.select(this.chartRef.current).append(\"svg\").attr(\"width\",width+margin.left+margin.right+legendWidth).attr(\"height\",height+margin.top+margin.bottom+toolTipHeight+contextHeight).append(\"g\").attr(\"transform\",\"translate(\".concat(margin.left,\", \").concat(margin.top+20,\" )\"));// add title\nsvg.append(\"text\").attr(\"x\",width/2).attr(\"y\",-20).attr(\"text-anchor\",\"middle\").style(\"font-size\",\"16px\").style(\"text-decoration\",\"underline\").style(\"font-weight\",\"bold\").text(\"COVID-19 Forecasts of Daily Deaths in the US Over Time\");var w=710-margin.left-margin.right;var h=360-margin.top-margin.bottom;//Create X axis label   \nsvg.append(\"text\").attr(\"x\",w/2+margin.right).attr(\"y\",h+4*margin.bottom).style(\"text-anchor\",\"middle\").text(\"Date\");//Create Y axis label\nsvg.append(\"text\").attr(\"transform\",\"rotate(-90)\").attr(\"y\",0-margin.left).attr(\"x\",0-h/2).attr(\"dy\",\"1em\").style(\"text-anchor\",\"middle\").text(\"Daily Deaths\");//format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\nvar confirmedData=reformatData(confirmed);var forecastData=forecast.map(function(f){return reformatData(f);});var aggregateData=reformatData(aggregate);//store userPrediction in predictionData if it exists\nif(Object.keys(userPrediction).length>0){var mostRecentPred=getMostRecentPrediction(userPrediction);predictionData=reformatPredData(mostRecentPred);}//set other dates\nvar confirmedStartDate=confirmedData[4].date;var predStartDate=confirmedData[confirmedData.length-1].date;//last date of confirmedData\nvar predLength=155;var predEndDate=d3.timeDay.offset(predStartDate,predLength);//get confirmedData starting from confirmedStartDate\nconfirmedData=confirmedData.filter(function(d){return+d.date>=+confirmedStartDate;});//draw x-axis     \nvar x=d3.scaleTime().domain([confirmedStartDate,predEndDate]).range([0,width]);//.nice(); //rounds up/down the max and mind of x axis\nvar xAxis=svg.append(\"g\").attr(\"transform\",\"translate(0,\"+height+\")\").call(d3.axisBottom(x));//find max val in confirmedData and forecastData to determine the max of y-axis\nvar confirmedMax=d3.max(confirmedData,function(d){return+d.value;});var forecastMax=0;forecastData.map(function(f){var currMax=d3.max(f,function(d){return d.value;});forecastMax=currMax>forecastMax?currMax:forecastMax;});var yAxisMax=Math.max(confirmedMax,forecastMax);//draw y-axis\nvar y=d3.scaleLinear().domain([0,yAxisMax]).range([height,0]).nice();svg.append(\"g\").call(d3.axisLeft(y));//list of data displayed in graph - for legend\n//var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\nvar legendString=[\"Daily Confirmed Deaths\",\"Aggregate Forecast\",\"User Prediction\"].concat(orgs);//color function that assigns random colors to each data\nvar color=d3.scaleOrdinal().domain(legendString).range(d3.schemeTableau10);//draw legend\nvar legend=svg.append('g').attr(\"id\",\"legend\");var size=10;var legendMarginL=30;legend.selectAll(\"rect\").data(legendString).enter().append(\"circle\").attr('cx',width+legendMarginL).attr(\"cy\",function(d,i){return 20+i*25;})// 100 is where the first dot appears. 25 is the distance between dots\n.attr(\"r\",6)//.attr(\"width\", size)\n//.attr(\"height\", size)\n.style(\"fill\",function(d){return color(d);});legend.selectAll(\"labels\").data(legendString).enter().append(\"text\").attr(\"x\",width+45).attr(\"y\",function(d,i){return 20+i*25;})// 100 is where the first dot appears. 25 is the distance between dots\n.style(\"fill\",function(d){return color(d);}).text(function(d){return d;}).attr(\"text-anchor\",\"left\").style(\"alignment-baseline\",\"middle\");//create line generator for confirmed/forecast data and prediction data\nvar lineGenerator=d3.line()//.curve(d3.curveBasis);\n.curve(d3.curveCatmullRom);//curve that goes through all data points\nvar predLineGenerator=d3.line().curve(d3.curveBasis);//curve doesn't go through all data points (it's smoothed out)\n//d3.curveMonotoneX\n//d3.curveBasis\n//d3.curveCardinal\n//function that draws curve\nvar line=lineGenerator.x(function(d){return x(d.date);}).y(function(d){return y(d.value);});//area where the confirmed curve will be drawn\nvar mainClip=svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\",\"main-clip\").append(\"svg:rect\").attr(\"width\",width).attr(\"height\",height).attr(\"x\",0).attr(\"y\",0);// Create the confirmed area variable\nvar mainArea=svg.append('g').attr(\"clip-path\",\"url(#main-clip)\");//display confirmed data\nvar confirmedLine=mainArea.append(\"path\").attr(\"id\",\"confirmed\").attr(\"class\",\"line\").datum(confirmedData).attr('d',line).attr(\"stroke\",color(legendString[0])).style(\"stroke-width\",\"3px\");var confirmedAreaEndX=x(confirmedData[confirmedData.length-1].date);var confirmedAreaEndY=y(confirmedData[confirmedData.length-1].value);//append clip-path for prediction curve\nvar predictionClip=svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\",\"prediction-clip\").append(\"svg:rect\").attr(\"id\",\"prediction-rect\").attr(\"width\",width-confirmedAreaEndX).attr(\"height\",height).attr(\"x\",confirmedAreaEndX).attr(\"y\",0);var predictionArea=svg.append('g').attr(\"clip-path\",\"url(#prediction-clip)\");//make sure aggregateData curve stems from confiremData curve\nvar idxOfStartDate=d3.bisector(function(f){return f.date;}).left(aggregateData,predStartDate);//check if predStartDate exists in AD\nif(aggregateData.length>0&&+aggregateData[idxOfStartDate].date==+predStartDate){aggregateData[idxOfStartDate].value=confirmedData[confirmedData.length-1].value;}else{aggregateData.splice(idxOfStartDate,0,{date:predStartDate,value:confirmedData[confirmedData.length-1].value});}aggregateData=aggregateData.splice(idxOfStartDate,aggregateData.length);//display aggregate data\nvar aggregateLine=predictionArea.append(\"path\").attr(\"id\",\"aggregate\").attr(\"class\",\"line\").datum(aggregateData).attr('d',line).attr(\"stroke\",color(legendString[1])).style(\"stroke-width\",\"2px\");//display forecast data\nforecastData.map(function(f,index){//make sure they all stem from the confirmed curve!\n//var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\nvar idxOfStartDate=d3.bisector(function(f){return f.date;}).left(f,predStartDate);//check if predStartDate exists in f\nif(f.length>0&&+f[idxOfStartDate].date==+predStartDate){f[idxOfStartDate].value=confirmedData[confirmedData.length-1].value;}else{//add data point to forecastData array\nf.splice(idxOfStartDate,0,{date:predStartDate,value:confirmedData[confirmedData.length-1].value});f=f.slice(idxOfStartDate,f.length);}forecastData[index]=f;predictionArea.append(\"path\").attr(\"class\",\"forecast line\").attr(\"id\",orgs[index]).style(\"stroke\",color(orgs[index])).datum(f).attr(\"d\",line);});var lines=document.getElementsByClassName('line');//function that generates the prediction curve\nvar predLine=predLineGenerator.defined(function(d){return d.defined;}).x(function(d){return x(d.date);}).y(function(d){return y(d.value);});//append path for prediction data\nvar yourLine=predictionArea.append(\"path\").attr(\"id\",\"your-line\");//variables used to initialize user prediction data if it doesn't exist in the db\nvar currDate=predStartDate;var defined=true;var value=confirmedData[confirmedData.length-1].value;var confirmedLastVal=value;//used to make sure the first data point of prediction stays the same\n//check if userPrediction already exists in db\nif(Object.keys(userPrediction).length>0){predictionData=predictionData.filter(function(d){return+d.date>=+predStartDate&&+d.date<=+predEndDate;});predictionData[0].value=confirmedLastVal;predictionData[0].defined=true;currDate=d3.timeDay.offset(predictionData[predictionData.length-1].date,1);predictionData.concat(createDefaultPrediction(currDate,predEndDate));}else{predictionData=createDefaultPrediction(predStartDate,predEndDate);predictionData[0].value=confirmedLastVal;predictionData[0].defined=true;}var filteredData=null;//!!    //add forecast data to compiledData\n//get complete dataset from paths\nvar forecastPaths=document.querySelectorAll(\".forecast\");var confirmedPath=document.querySelector(\"#confirmed\");var aggregatePath=document.querySelector(\"#aggregate\");console.log(aggregatePath);console.log(forecastPaths);console.log(orgs);orgs.map(function(o,index){var lastDate=forecastData[index][forecastData[index].length-1].date;forecastData[index]=getAllDataPoints(forecastPaths[index],x,y,predStartDate,lastDate);compiledData.push({name:o,data:forecastData[index]});});//confirmedData = getAllDataPoints(confirmedPath, x, y, confirmedStartDate, predStartDate);\ncompiledData.push({name:\"Daily Confirmed Deaths\",data:confirmedData});var lastDate=aggregateData[aggregateData.length-1].date;console.log(aggregateData);console.log(lastDate);aggregateData=getAllDataPoints(aggregatePath,x,y,aggregateData[0].date,lastDate);console.log(aggregateData);compiledData.push({name:\"Aggregate Forecast\",data:aggregateData});compiledData.push({name:\"User Prediction\",data:predictionData});//join data to yourLine\nfilteredData=predictionData.filter(predLine.defined());yourLine.datum(filteredData).attr('d',predLine).style(\"stroke\",color(legendString[2])).style(\"stroke-width\",\"2px\");//append new rect  \nvar mouseArea=svg.append(\"rect\").attr(\"width\",width).attr(\"height\",height).attr(\"fill\",\"none\").attr(\"id\",\"mouse-area\").style(\"pointer-events\",\"visible\");//append click area rect\nvar confirmedAreaWidth=confirmedLine.node().getBoundingClientRect().width;//get width of path element containing confirmed data\nvar clickAreaWidth=width-confirmedAreaWidth;//the remaining area\nsvg.append(\"rect\").attr(\"id\",\"click-area\").attr(\"width\",clickAreaWidth).attr(\"height\",height).attr(\"transform\",\"translate (\"+confirmedAreaWidth+\" 0)\").attr(\"fill\",\"none\").style(\"pointer-events\",\"visible\");//var clickArea = d3.select(\"#click-area\");\n//append draw your guess text\nvar drawingInstruction=svg.append(\"g\").attr(\"id\",\"drawing-instruction\").style(\"opacity\",\"0\");drawingInstruction.append(\"text\").attr(\"id\",\"draw-guess\").attr(\"x\",confirmedAreaEndX+(width-confirmedAreaEndX)/2).attr(\"y\",height-100).attr(\"text-anchor\",\"middle\").text(\"Draw your guess\").style(\"font-size\",\"16px\");//append circle at the end of confirmed curve\nvar selectCircle=drawingInstruction.append(\"g\").attr(\"id\",\"pointer\");var pointerCircles=[\"pulse-disk\",\"pulse-circle\",\"pulse-circle-2\"];pointerCircles.map(function(c){selectCircle.append(\"circle\").attr(\"class\",c).attr(\"cx\",confirmedAreaEndX).attr(\"cy\",confirmedAreaEndY);});if(Object.keys(userPrediction).length==0){svg.select(\"#drawing-instruction\").style(\"opacity\",\"1\");}var drag=d3.drag().on(\"drag\",function(){//hide \"draw your guess\" text\nsvg.select(\"#drawing-instruction\").style(\"opacity\",\"0\");d3.select(\"#tooltip-line\").style(\"opacity\",\"0\");d3.selectAll(\".mouse-per-line circle\").style(\"opacity\",\"0\");d3.selectAll(\".mouse-per-line text\").style(\"opacity\",\"0\");var pos=d3.mouse(this);var date=clamp(predStartDate,predEndDate,x.invert(pos[0]));var value=clamp(0,yAxisMax,y.invert(pos[1]));predictionData.forEach(function(d){if(+d3.timeDay.round(d.date)==+d3.timeDay.round(date)){d.value=value;d.defined=true;}predictionData[0].value=confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n//update totalData everytime predictionData is updated\ncompiledData[compiledData.length-1].data=predictionData;//console.log(compiledData)\n/*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/filteredData=predictionData.filter(predLine.defined());yourLine.datum(filteredData).attr('d',predLine).style(\"stroke\",color(legendString[2])).style(\"stroke-width\",\"2px\");});}).on(\"end\",function(){d3.select(\"#tooltip-line\").style(\"opacity\",\"1\");d3.selectAll(\".mouse-per-line circle\").style(\"opacity\",\"1\");d3.selectAll(\".mouse-per-line text\").style(\"opacity\",\"1\");var lastPredDate=filteredData[filteredData.length-1].date;getDataPointsFromPath(predictionData,yourLine.node(),x,y,lastPredDate);console.log(predictionData);savePrediction(predictionData,category);});svg.call(drag);var tooltipArea=svg.append(\"g\").attr(\"class\",\"tooltip\");tooltipArea.append(\"path\")//vertical line\n.attr(\"id\",\"tooltip-line\").style(\"stroke\",\"black\").style(\"stroke-width\",\"0.5px\").style(\"opacity\",\"0\");//console.log(compiledData)\nvar mousePerLine=tooltipArea.selectAll(\".mouse-per-line\").data(compiledData).enter().append(\"g\").attr(\"class\",\"mouse-per-line\");mousePerLine.append(\"circle\").attr(\"r\",2).style(\"stroke\",function(d){return color(d.name);}).style(\"fill\",\"none\").style(\"stroke-width\",\"1px\").style(\"opacity\",\"0\");mousePerLine.append(\"text\").attr(\"transform\",\"translate(10,3)\");var chart=tooltipArea.append(\"svg:rect\").attr('width',width).attr('height',height).attr('fill','none').attr('pointer-events','all')//.style(\"cursor\", \"pointer\")\n.on('mouseout',function(){// on mouse out hide line, circles and text\nd3.select(\"#tooltip-line\").style(\"opacity\",\"0\");d3.selectAll(\".mouse-per-line circle\").style(\"opacity\",\"0\");d3.selectAll(\".mouse-per-line text\").style(\"opacity\",\"0\");}).on('mouseover',function(){// on mouse in show line, circles and text\nd3.select(\"#tooltip-line\").style(\"opacity\",\"1\");d3.selectAll(\".mouse-per-line circle\").style(\"opacity\",\"1\");d3.selectAll(\".mouse-per-line text\").style(\"opacity\",\"1\");}).on('mousemove',function(){// mouse moving over canvas\nvar mouse=d3.mouse(this);var xCoord=mouse[0];var yCoord=mouse[1];var xLowerBoundary=x(confirmedData[confirmedData.length-1].date);if(xCoord>xLowerBoundary&&xCoord<width&&yCoord>0&&yCoord<height){chart.attr(\"cursor\",\"pointer\");}else{chart.attr(\"cursor\",\"default\");}d3.select(\"#tooltip-line\").attr(\"d\",function(){var d=\"M\"+xCoord+\",\"+height;d+=\" \"+xCoord+\",\"+0;return d;});d3.selectAll(\".mouse-per-line\").attr(\"transform\",function(d,i){if(d.data.length==0){return;}var date=x.invert(xCoord);var index=d3.bisector(function(f){return f.date;}).left(compiledData[i].data,date);var a=null;if(index>0){a=d.data[index-1];}var b=d.data[index];//d = the data object corresponding to date and value pointed by the cursors\nvar data=null;if(!a){data=b;}else if(!b){data=a;}else{data=b&&date-a.date>b.date-date?b:a;}if(+d3.timeDay.floor(date)==+data.date||+d3.timeDay.ceil(date)==+data.date){if(data.defined!=0){var element=d3.select(this).select('text').style(\"opacity\",\"1\").text(Math.round(data.value));element.select(\"circle\").style(\"opacity\",\"1\");return\"translate(\"+mouse[0]+\",\"+y(data.value)+\")\";}}var element=d3.select(this).select(\"text\").style(\"opacity\",\"0\");element.select(\"circle\").style(\"opacity\",\"0\");});});// .on('mousemove', function() { // mouse moving over canvas\n//     var mouse = d3.mouse(this);\n//     var xCoord = mouse[0];\n//     var yCoord = mouse[1];\n//     const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n//     if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n//         chart.attr(\"cursor\", \"pointer\");\n//     }\n//     else {\n//         chart.attr(\"cursor\", \"default\");\n//     }\n//     d3\n//         .select(\"#tooltip-line\")\n//         .attr(\"d\", function() {\n//             var d = \"M\" + xCoord + \",\" + height;\n//             d += \" \" + xCoord + \",\" + 0;\n//             return d;\n//         });\n//     d3\n//         .selectAll(\".mouse-per-line\")\n//         .attr(\"transform\", function(d, i) {\n//             if (d.data.length == 0) {return;}\n//             var date = x.invert(xCoord);\n//             const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n//             var a = null;\n//             if (index > 0) {\n//                 a = d.data[index - 1];\n//             }\n//             const b = d.data[index];\n//             //d = the data object corresponding to date and value pointed by the cursors\n//             var data = null;\n//             if (!a) {\n//                 data = b;\n//             }\n//             else if (!b) {\n//                 data = a;\n//             }\n//             else {\n//                 data = b && (date - a.date > b.date - date) ? b : a;\n//             }\n//             if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n//                 if (data.defined != 0) {\n//                     var element = d3.select(this)\n//                                     .select('text')\n//                                         .style(\"opacity\", \"1\")\n//                                         .text(Math.round(data.value));\n//                     element.select(\"circle\")\n//                             .style(\"opacity\", \"1\");\n//                     return \"translate(\" + mouse[0] + \",\" + y(data.value)+\")\";\n//                 }\n//             }\n//             var element = d3.select(this)\n//                             .select(\"text\")\n//                             .style(\"opacity\", \"0\")\n//             element\n//                     .select(\"circle\")\n//                     .style(\"opacity\", \"0\");\n//     });\n// })\n/////////////////////////////////////////////////////////////////////////////////////////////\nvar focusHeight=100;var contextMargin=50;var context=svg.append(\"g\").attr(\"viewBox\",[0,0,width,focusHeight]).attr(\"transform\",\"translate(0,\".concat(height+contextMargin,\" )\"))//.attr(\"width\", width + 100)\n//.attr(\"height\", height)\n.style(\"display\",\"block\");/*const xAxis = (g, x, height) => g\n                                            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                            .call(d3.axisBottom(x))*/var contextX=d3.scaleTime().domain([confirmedStartDate,predEndDate]).range([0,width]);var contextXAxis=context.append(\"g\").attr(\"transform\",\"translate(0,\".concat(focusHeight-margin.bottom,\")\")).call(d3.axisBottom(contextX));var brush=d3.brushX().extent([[0,0],[width,focusHeight-margin.bottom]]).on(\"brush\",brushed).on(\"end\",brushended);var defaultSelection=[x(d3.timeMonth.offset(x.domain()[1],-8)),x.range()[1]];/*context.append(\"g\")\n                .call(xAxis, x, focusHeight);*/ /*svg.append(\"path\")\n            .datum(confirmedData)\n            .attr(\"fill\", \"steelblue\")\n            .attr(\"d\", line(x, y.copy().range([focusHeight - margin.bottom, 4])));*/function brushed(){if(d3.event.selection){var extent=d3.event.selection;//console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\nx.domain([contextX.invert(extent[0]),contextX.invert(extent[1])]);xAxis//.transition()\n//.duration(1000)\n.call(d3.axisBottom(x));var newX=x(confirmedData[confirmedData.length-1].date);newX=newX<0?0:newX;d3.select(\"#prediction-clip\").select(\"rect\").attr(\"width\",width-newX).attr(\"x\",newX);svg.selectAll(\".line\")//.transition()\n//.duration(1000)\n.attr('d',line);svg.select(\"#your-line\").attr(\"d\",predLine);//reposition draw your guess text and pointer\nsvg.select(\"#draw-guess\").attr(\"x\",newX+(width-newX)/2);svg.select(\"#pointer\").selectAll(\"circle\").attr(\"cx\",newX);}}function brushended(){if(!d3.event.selection){gb.call(brush.move,defaultSelection);}}var gb=context.call(brush).call(brush.move,defaultSelection);////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nvar deleteButton=document.createElement(\"button\");deleteButton.className='btn primary-btn';deleteButton.id='delete-btn';deleteButton.innerText=\"Reset\";d3.select(\"#delete-btn\");deleteButton.onclick=function(){_this3.deletePrediction(category);predictionData=createDefaultPrediction(predStartDate,predEndDate);predictionData[0].value=confirmedLastVal;predictionData[0].defined=true;//update yourLine\nvar filtered=predictionData.filter(predLine.defined());yourLine.datum(filtered).attr('d',predLine);svg.select(\"#drawing-instruction\").style(\"opacity\",\"1\");};document.querySelector(\"body\").appendChild(deleteButton);////ADD TODAY LINE/////////////////////////////////////////////////////\nvar today=d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));var todayMarker=svg.append(\"g\").attr(\"id\",\"today-marker\");todayMarker.append(\"line\").attr(\"id\",\"today-line\").attr(\"x1\",x(today)).attr(\"x2\",x(today)).attr(\"y1\",0).attr(\"y2\",height).attr(\"stroke\",\"black\").attr(\"stroke-width\",1).attr(\"stroke-dasharray\",\"8, 8\");todayMarker.append(\"text\").attr(\"id\",\"today-text\").attr(\"transform\",\"translate(\".concat(x(today)+17,\", 0) rotate(-90)\")).text(\"Today\").style(\"text-anchor\",\"end\");}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h2\",null,\"US Daily Deaths\"),/*#__PURE__*/React.createElement(\"p\",null,\"Daily deaths is the best indicator of the progression of the pandemic.\"),/*#__PURE__*/React.createElement(\"div\",{ref:this.chartRef}));}}]);return InteractiveChart;}(Component);export default InteractiveChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/gayeonsarahyoo.github.io/src/components/InteractiveChart/index.js"],"names":["React","Component","d3","clamp","findYatX","getAllDataPoints","getDataPointsFromPath","reformatData","reformatPredData","getMostRecentPrediction","addDays","formatDate","rectangle","InteractiveChart","props","state","category","chartRef","createRef","loginStatus","renderChart","renderChartUnregistered","data","fetch","method","headers","body","JSON","stringify","console","log","predStartDate","predEndDate","defaultData","currDate","push","date","value","defined","timeDay","offset","signinRedirect","window","location","href","signupRedirect","modal","document","createElement","id","modalContent","text","innerText","signinBtn","onclick","signupBtn","appendChild","current","forecast","orgs","userPrediction","confirmed","aggregate","predictionData","defaultPredictionData","savePrediction","createDefaultPrediction","appendModal","compiledData","legendWidth","toolTipHeight","contextHeight","margin","top","right","bottom","left","width","height","svg","select","append","attr","style","w","h","confirmedData","Object","keys","map","key","timeParse","forecastData","f","aggregateData","confirmedStartDate","length","predLength","filter","d","x","scaleTime","domain","range","xAxis","call","axisBottom","confirmedMax","max","forecastMax","currMax","yAxisMax","Math","y","scaleLinear","nice","axisLeft","legendString","concat","color","scaleOrdinal","schemeTableau10","legend","size","legendMarginL","selectAll","enter","i","lineGenerator","line","curve","curveCatmullRom","predLineGenerator","curveBasis","mainClip","mainArea","confirmedLine","datum","confirmedAreaEndX","confirmedAreaEndY","predictionClip","predictionArea","idxOfStartDate","bisector","splice","aggregateLine","index","slice","lines","getElementsByClassName","predLine","yourLine","confirmedLastVal","filteredData","forecastPaths","querySelectorAll","confirmedPath","querySelector","aggregatePath","o","lastDate","name","mouseArea","confirmedAreaWidth","node","getBoundingClientRect","clickAreaWidth","drawingInstruction","selectCircle","pointerCircles","c","drag","on","pos","mouse","invert","forEach","round","getElementById","event","target","display","tooltipArea","mousePerLine","chart","xCoord","yCoord","xLowerBoundary","a","b","floor","ceil","element","focusHeight","contextMargin","context","contextX","contextXAxis","brush","brushX","extent","brushed","brushended","defaultSelection","timeMonth","selection","newX","gb","move","deleteButton","className","deletePrediction","filtered","today","Date","toISOString","substring","todayMarker","titleHeight","mostRecentPred","lastPredDate"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport './InteractiveChart.css';\nimport { clamp, findYatX, getAllDataPoints, getDataPointsFromPath, reformatData, reformatPredData, getMostRecentPrediction } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\nimport { rectangle } from 'leaflet';\n\n\nclass InteractiveChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\" };\n        this.chartRef = React.createRef();\n    }\n    componentDidMount() {\n        const loginStatus = this.props.loginStatus;\n        if (loginStatus['logged in']) {\n            this.renderChart();\n        }\n        else {\n            this.renderChartUnregistered()\n        }\n    }\n\n    //move to utils\n    savePrediction(data, category) {\n        fetch('/update/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"data\": data, \"category\": category}),\n        });\n    }\n    deletePrediction(category) {\n        console.log(category)\n        fetch('/delete/',{\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\"category\": category}),\n          });\n        console.log(\"deleted\")\n    }\n\n    createDefaultPrediction(predStartDate, predEndDate) {\n        var defaultData = [];\n        var currDate = predStartDate;\n        //var defined = true;\n        //var value = confirmedData[confirmedData.length - 1].value;\n        \n        //create defaultPredictionData\n        while(+currDate <= +predEndDate) {\n            defaultData.push({date: currDate, value: 0, defined: 0});\n            currDate = d3.timeDay.offset(currDate, 1);\n        }\n        return defaultData;\n    }\n    \n    appendModal() {\n        const signinRedirect = () => {window.location.href='/signin'}\n        const signupRedirect = () => {window.location.href='/signup'}\n        var modal = document.createElement(\"div\");\n        modal.id = \"modal\";\n        var modalContent = document.createElement(\"div\");\n        modalContent.id = \"modal-content\";\n        var text = document.createElement(\"p\");\n        text.innerText = \"Please log in to save your prediction.\";\n        var signinBtn = document.createElement(\"button\");\n        signinBtn.id = \"signin-btn\";\n        signinBtn.innerText = \"Sign In\";\n        signinBtn.onclick= signinRedirect;\n        var signupBtn = document.createElement(\"button\");\n        signupBtn.id = \"signup-btn\";\n        signupBtn.onclick= signupRedirect;\n        signupBtn.innerText = \"Sign Up\";\n        modalContent.appendChild(text);\n        modalContent.appendChild(signinBtn);\n        modalContent.appendChild(signupBtn);\n        modal.appendChild(modalContent);\n        this.chartRef.current.appendChild(modal);\n    }\n\n    renderChartUnregistered() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = [];//where we will store formatted userPrediction\n        var defaultPredictionData = []\n        const savePrediction = this.savePrediction;\n        const createDefaultPrediction = this.createDefaultPrediction;\n        this.appendModal();\n        const category = this.state.category;\n        var compiledData = [];\n        //set up margin, width, height of chart\n        const legendWidth = 380;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                    .append(\"g\")\n                    .attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`);\n        \n                    // add title\n        svg.append(\"text\")\n            .attr(\"x\", (width / 2))             \n            .attr(\"y\", -20)\n            .attr(\"text-anchor\", \"middle\")  \n            .style(\"font-size\", \"16px\") \n            .style(\"text-decoration\", \"underline\")  \n            .style(\"font-weight\", \"bold\")\n            .text(\"COVID-19 Forecasts of Daily Deaths in the US Over Time\");\n\n        const w = 710 - margin.left - margin.right;\n        const h = 360 - margin.top - margin.bottom;\n            \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", w/2 + margin.right)\n            .attr(\"y\", h + 4*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0-margin.left)\n            .attr(\"x\",0 - (h / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n        \n        var forecastData = forecast.map(f => {\n            return Object.keys(f).map(key => ({\n                date: d3.timeParse(\"%Y-%m-%d\")(key),\n                value: f[key]\n            }))\n        });\n\n        var aggregateData = Object.keys(aggregate).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: aggregate[key]\n        }));\n  \n        //set other dates\n        const confirmedStartDate = confirmedData[4].date;\n        const predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n        const predLength = 155;\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis     \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        //var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n        var legendString = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(orgs);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n\n         //draw legend\n        var legend = svg.append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        const legendMarginL = 30;\n        legend.selectAll(\"rect\")\n            .data(legendString)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', width + legendMarginL)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", function(d){ return color(d)})\n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", width + 45)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .style(\"fill\", function(d){ return color(d)})\n                .text(function(d){ return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            //.curve(d3.curveBasis);\n            .curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //area where the confirmed curve will be drawn\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n\n        // Create the confirmed area variable\n        const mainArea = svg\n                                .append('g')\n                                .attr(\"clip-path\", \"url(#main-clip)\");\n\n        //display confirmed data\n        var confirmedLine = mainArea.append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")    \n                                    .datum(confirmedData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(legendString[0]))\n                                    .style(\"stroke-width\", \"3px\")\n        var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n        var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value);\n\n        //append clip-path for prediction curve\n        var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\")\n                                .attr(\"id\", \"prediction-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width - confirmedAreaEndX )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", confirmedAreaEndX)\n                                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n                            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        \n        //make sure aggregateData curve stems from confiremData curve\n        var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate);\n        //check if predStartDate exists in AD\n        if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date == +predStartDate) {\n            aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n        }\n        else {\n            aggregateData.splice(idxOfStartDate, 0, {\n                date: predStartDate,\n                value: confirmedData[confirmedData.length - 1].value\n            });\n        }\n        aggregateData = aggregateData.splice(idxOfStartDate, aggregateData.length);\n\n\n        //display aggregate data\n        var aggregateLine = predictionArea.append(\"path\")\n                                    .attr(\"id\", \"aggregate\")\n                                    .attr(\"class\", \"line\")        \n                                    .datum(aggregateData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(legendString[1]))\n                                    .style(\"stroke-width\", \"2px\")\n        \n        //display forecast data\n        forecastData.map((f, index) => {\n            //make sure they all stem from the confirmed curve!\n            //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n            var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate);\n            //check if predStartDate exists in f\n            if (f.length > 0 && +f[idxOfStartDate].date == +predStartDate) {\n                f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n            }\n            else {//add data point to forecastData array\n                f.splice(idxOfStartDate, 0, {\n                    date: predStartDate,\n                    value: confirmedData[confirmedData.length - 1].value\n                });\n                f = f.slice(idxOfStartDate, f.length);\n            }\n            forecastData[index] = f;\n            predictionArea.append(\"path\")\n                        .attr(\"class\", \"forecast line\")\n                        .attr(\"id\", orgs[index])\n                        .style(\"stroke\", color(orgs[index]))\n                        .datum(f)\n                            .attr(\"d\", line);\n        })\n        \n        var lines = document.getElementsByClassName('line');\n\n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = predictionArea\n                                        .append(\"path\")\n                                        .attr(\"id\", \"your-line\");\n        \n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n        \n\n        predictionData = createDefaultPrediction(predStartDate, predEndDate);\n        predictionData[0].value = confirmedLastVal;\n        predictionData[0].defined = true;        \n\n        var filteredData = null;\n        //var totalData = confirmedData.concat(predictionData);\n\n//!!    //add forecast data to compiledData\nconst forecastPaths = document.querySelectorAll(\".forecast\");\n        const confirmedPath = document.querySelector(\"#confirmed\");\n        const aggregatePath = document.querySelector(\"#aggregate\");\n        console.log(aggregatePath)\n        console.log(forecastPaths);\n        console.log(orgs);\n        orgs.map((o, index) => {\n            var lastDate = forecastData[index][forecastData[index].length - 1].date;\n            forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, lastDate);\n            compiledData.push({\n                name: o,\n                data: forecastData[index]\n            })\n        })\n        //confirmedData = getAllDataPoints(confirmedPath, x, y, confirmedStartDate, predStartDate);\n        compiledData.push({\n            name: \"Daily Confirmed Deaths\",\n            data: confirmedData\n        })\n        var lastDate = aggregateData[aggregateData.length - 1].date;\n        aggregateData = getAllDataPoints(aggregatePath, x, y, aggregateData[0].date, lastDate)\n        console.log(aggregateData);\n        compiledData.push({\n            name: \"Aggregate Forecast\",\n            data: aggregateData\n        })\n        compiledData.push({\n            name: \"User Prediction\",\n            data: predictionData\n        })\n        //join data to yourLine\n        filteredData = predictionData.filter(predLine.defined())\n        yourLine.datum(filteredData)\n                .attr('d', predLine)\n                .style(\"stroke\", color(legendString[2]))\n                .style(\"stroke-width\", \"2px\")\n\n        //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        /*svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");*/\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append draw your guess text\n        const drawingInstruction = svg\n                                        .append(\"g\")\n                                        .attr(\"id\", \"drawing-instruction\")\n                                        .style(\"opacity\", \"1\");\n        drawingInstruction\n                            .append(\"text\")\n                            .attr(\"id\", \"draw-guess\")\n                            .attr(\"x\", confirmedAreaEndX + (width - confirmedAreaEndX) / 2)             \n                            .attr(\"y\", height - 100)\n                            .attr(\"text-anchor\", \"middle\")  \n                            .text(\"Draw your guess\")\n                            .style(\"font-size\", \"16px\");\n        //append circle at the end of confirmed curve\n        var selectCircle = drawingInstruction\n                                                .append(\"g\")\n                                                .attr(\"id\", \"pointer\");\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n        selectCircle.append(\"circle\")\n            .attr(\"class\", c)\n            .attr(\"cx\", confirmedAreaEndX)\n            .attr(\"cy\", confirmedAreaEndY)\n        })\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        //hide \"draw your guess\" text\n                        svg\n                            .select(\"#drawing-instruction\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"0\")\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        //update totalData everytime predictionData is updated\n                        compiledData[compiledData.length - 1].data = predictionData;\n                        //console.log(compiledData)\n                        /*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/\n                        var filteredData = predictionData.filter(predLine.defined())\n\n                        yourLine.datum(filteredData)\n                                .attr('d', predLine)\n                                .style(\"stroke\", color(legendString[2]))\n                                .style(\"stroke-width\", \"2px\")\n                        });\n                    })\n                    .on(\"end\", function () {\n                        d3\n                            .select(\"#modal\")\n                            .style(\"display\", \"block\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"1\")\n                    });\n        \n        svg.call(drag)\n        var modal = document.getElementById(\"modal\");\n\n        window.onclick = function(event) {\n            if (event.target == modal) {\n              modal.style.display = \"none\";\n            }\n          }\n\n        //finds the datapoint closest to the mouse (along x)\n        /*var bisect = () => {\n            const bisectDate = d3.bisector(d => d.date).left;\n            return mx => {\n                const date = x.invert(mx);\n                const index = bisectDate(totalData, date, 1);\n                const a = totalData[index - 1];\n                const b = totalData[index];\n                return b && (date - a.date > b.date - date) ? b : a;\n            };\n        }*/\n\n\n        const tooltipArea = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n                    .attr(\"id\", \"tooltip-line\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"0.5px\")\n                    .style(\"opacity\", \"0\");\n        //console.log(compiledData)\n        var mousePerLine = tooltipArea\n                                        .selectAll(\".mouse-per-line\")\n                                        .data(compiledData)\n                                        .enter()\n                                        .append(\"g\")\n                                        .attr(\"class\", \"mouse-per-line\");\n        \n        mousePerLine.append(\"circle\")\n                        .attr(\"r\", 2)\n                        .style(\"stroke\", function(d) {\n                            return color(d.name);\n                        })\n                        .style(\"fill\", \"none\")\n                        .style(\"stroke-width\", \"1px\")\n                        .style(\"opacity\", \"0\");\n        mousePerLine.append(\"text\")\n                    .attr(\"transform\", \"translate(10,3)\"); \n                    \n        var chart = tooltipArea\n                    .append(\"svg:rect\")\n                    .attr('width', width)\n                    .attr('height', height)\n                    .attr('fill', 'none')\n                    .attr('pointer-events', 'all')\n                    //.style(\"cursor\", \"pointer\")\n                    .on('mouseout', function() { // on mouse out hide line, circles and text\n                        d3.select(\"#tooltip-line\")\n                        .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                        .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line text\")\n                        .style(\"opacity\", \"0\")\n                    })\n                    .on('mouseover', function() { // on mouse in show line, circles and text\n                        d3.select(\"#tooltip-line\")\n                        .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                        .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                        .style(\"opacity\", \"1\")\n\n                    })\n                    .on('mousemove', function() { // mouse moving over canvas\n                        var mouse = d3.mouse(this);\n                        var xCoord = mouse[0];\n                        var yCoord = mouse[1];\n                        const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n                        if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n                            chart.attr(\"cursor\", \"pointer\");\n                        }\n                        else {\n                            chart.attr(\"cursor\", \"default\");\n                        }\n                        d3\n                            .select(\"#tooltip-line\")\n                            .attr(\"d\", function() {\n                                var d = \"M\" + xCoord + \",\" + height;\n                                d += \" \" + xCoord + \",\" + 0;\n                                return d;\n                            });\n                        d3\n                            .selectAll(\".mouse-per-line\")\n                            .attr(\"transform\", function(d, i) {\n                                if (d.data.length == 0) {return;}\n                                var date = x.invert(xCoord);\n                                const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n                                var a = null;\n                                if (index > 0) {\n                                    a = d.data[index - 1];\n                                }\n                                const b = d.data[index];\n                                //d = the data object corresponding to date and value pointed by the cursors\n                                var data = null;\n                                if (!a) {\n                                    data = b;\n                                }\n                                else if (!b) {\n                                    data = a;\n                                }\n                                else {\n                                    data = b && (date - a.date > b.date - date) ? b : a;\n                                }\n                                if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n                                    if (data.defined != 0) {\n                                        var element = d3.select(this)\n                                                        .select('text')\n                                                            .style(\"opacity\", \"1\")\n                                                            .text(Math.round(data.value));\n                                        element.select(\"circle\")\n                                                .style(\"opacity\", \"1\");\n                                        return \"translate(\" + mouse[0] + \",\" + y(data.value)+\")\";\n                                    }\n                                }\n                                var element = d3.select(this)\n                                                .select(\"text\")\n                                                .style(\"opacity\", \"0\")\n                                element\n                                        .select(\"circle\")\n                                        .style(\"opacity\", \"0\");\n                                \n                        });\n                    })\n\n        /////////////////////////////////////////////////////////////////////////////////////////////\n        const focusHeight = 100;\n        const contextMargin = 50;\n        var context = svg\n                            .append(\"g\")\n                                .attr(\"viewBox\", [0, 0, width, focusHeight])\n                                .attr(\"transform\", `translate(0,${height + contextMargin} )`)\n                                //.attr(\"width\", width + 100)\n                                //.attr(\"height\", height)\n                                .style(\"display\", \"block\")\n\n\n\n        /*const xAxis = (g, x, height) => g\n                                            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                            .call(d3.axisBottom(x))*/\n\n        var contextX = d3\n                            .scaleTime()\n                            .domain([confirmedStartDate, predEndDate])\n                            .range([0, width]);\n        \n        var contextXAxis = context\n                                    .append(\"g\")\n                                    .attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`)\n                                    .call(d3.axisBottom(contextX));\n        const brush = d3.brushX()\n                        .extent([[0, 0], [width, focusHeight - margin.bottom]])\n                        .on(\"brush\", brushed)\n                        .on(\"end\", brushended);\n\n        const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    \n        /*context.append(\"g\")\n                .call(xAxis, x, focusHeight);*/\n    \n        /*svg.append(\"path\")\n            .datum(confirmedData)\n            .attr(\"fill\", \"steelblue\")\n            .attr(\"d\", line(x, y.copy().range([focusHeight - margin.bottom, 4])));*/\n        function brushed() {\n            if (d3.event.selection) {\n                var extent = d3.event.selection;\n                //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                x.domain([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                xAxis\n                        //.transition()\n                        //.duration(1000)\n                        .call(d3.axisBottom(x))\n                var newX = x(confirmedData[confirmedData.length - 1].date);\n                newX = newX < 0 ? 0 : newX;\n                d3\n                    .select(\"#prediction-clip\")\n                    .select(\"rect\")\n                        .attr(\"width\", width - newX)\n                        .attr(\"x\", newX);\n\n                svg\n                    .selectAll(\".line\")\n                    //.transition()\n                    //.duration(1000)\n                    .attr('d', line)\n\n                svg\n                    .select(\"#your-line\")\n                    .attr(\"d\", predLine)\n                \n                //reposition draw your guess text and pointer\n                svg\n                    .select(\"#draw-guess\")\n                    .attr(\"x\", newX + (width - newX) / 2);\n                svg\n                    .select(\"#pointer\")\n                    .selectAll(\"circle\")\n                        .attr(\"cx\", newX);\n            }\n        }\n        \n        function brushended() {\n            if (!d3.event.selection) {\n                gb.call(brush.move, defaultSelection);\n            }\n\n        }\n        const gb = context\n                        .call(brush)\n                        .call(brush.move, defaultSelection);   \n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        var deleteButton = document.createElement(\"button\")\n        deleteButton.className = 'btn primary-btn'\n        deleteButton.id = 'delete-btn'\n        deleteButton.innerText = \"Reset\";\n        d3.select(\"#delete-btn\")\n        deleteButton.onclick = () => {\n            this.deletePrediction(category)\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            //update yourLine\n            var filtered = predictionData.filter(predLine.defined())\n            yourLine.datum(filtered)\n                    .attr('d', predLine)\n                    \n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        };\n        document.querySelector(\"body\").appendChild(deleteButton);\n        ////ADD TODAY LINE/////////////////////////////////////////////////////\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n    }\n\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = [];//where we will store formatted userPrediction\n        var defaultPredictionData = []\n        const savePrediction = this.savePrediction;\n        const createDefaultPrediction = this.createDefaultPrediction;\n        const category = this.state.category;\n        var compiledData = [];\n        //set up margin, width, height of chart\n        const legendWidth = 180;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        const titleHeight = 20;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                    .append(\"g\")\n                        .attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`);\n        \n        // add title\n        svg.append(\"text\")\n            .attr(\"x\", (width / 2))             \n            .attr(\"y\", -20)\n            .attr(\"text-anchor\", \"middle\")  \n            .style(\"font-size\", \"16px\") \n            .style(\"text-decoration\", \"underline\")  \n            .style(\"font-weight\", \"bold\")\n            .text(\"COVID-19 Forecasts of Daily Deaths in the US Over Time\");\n\n        const w = 710 - margin.left - margin.right;\n        const h = 360 - margin.top - margin.bottom;\n            \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", w/2 + margin.right)\n            .attr(\"y\", h + 4*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - margin.left)\n            .attr(\"x\", 0 - (h/2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = reformatData(confirmed);\n        var forecastData = forecast.map(f => {\n            return reformatData(f);\n        });\n        var aggregateData = reformatData(aggregate);\n\n        //store userPrediction in predictionData if it exists\n        if(Object.keys(userPrediction).length > 0) {\n            const mostRecentPred = getMostRecentPrediction(userPrediction);\n            predictionData = reformatPredData(mostRecentPred);\n        }\n  \n        //set other dates\n        const confirmedStartDate = confirmedData[4].date;\n        const predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n        const predLength = 155;\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis     \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        //var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n        var legendString = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(orgs);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n\n         //draw legend\n        var legend = svg.append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        const legendMarginL = 30;\n        legend.selectAll(\"rect\")\n            .data(legendString)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', width + legendMarginL)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", function(d){ return color(d)})\n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", width + 45)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .style(\"fill\", function(d){ return color(d)})\n                .text(function(d){ return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            //.curve(d3.curveBasis);\n            .curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //area where the confirmed curve will be drawn\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n\n        // Create the confirmed area variable\n        const mainArea = svg\n                                .append('g')\n                                .attr(\"clip-path\", \"url(#main-clip)\");\n\n        //display confirmed data\n        var confirmedLine = mainArea.append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")    \n                                    .datum(confirmedData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(legendString[0]))\n                                    .style(\"stroke-width\", \"3px\")\n        var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n        var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value);\n\n        //append clip-path for prediction curve\n        var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\")\n                                .attr(\"id\", \"prediction-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"id\", \"prediction-rect\")\n                                    .attr(\"width\", width - confirmedAreaEndX )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", confirmedAreaEndX)\n                                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n                            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        \n        //make sure aggregateData curve stems from confiremData curve\n        var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate);\n        //check if predStartDate exists in AD\n        if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date == +predStartDate) {\n            aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n        }\n        else {\n            aggregateData.splice(idxOfStartDate, 0, {\n                date: predStartDate,\n                value: confirmedData[confirmedData.length - 1].value\n            });\n        }\n        aggregateData = aggregateData.splice(idxOfStartDate, aggregateData.length);\n\n        //display aggregate data\n        var aggregateLine = predictionArea.append(\"path\")\n                                    .attr(\"id\", \"aggregate\")\n                                    .attr(\"class\", \"line\")        \n                                    .datum(aggregateData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(legendString[1]))\n                                    .style(\"stroke-width\", \"2px\")\n        \n        //display forecast data\n        forecastData.map((f, index) => {\n            //make sure they all stem from the confirmed curve!\n            //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n            var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate);\n            //check if predStartDate exists in f\n            if (f.length > 0 && +f[idxOfStartDate].date == +predStartDate) {\n                f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n            }\n            else {//add data point to forecastData array\n                f.splice(idxOfStartDate, 0, {\n                    date: predStartDate,\n                    value: confirmedData[confirmedData.length - 1].value\n                });\n                f = f.slice(idxOfStartDate, f.length);\n            }\n            forecastData[index] = f;\n            predictionArea.append(\"path\")\n                        .attr(\"class\", \"forecast line\")\n                        .attr(\"id\", orgs[index])\n                        .style(\"stroke\", color(orgs[index]))\n                        .datum(f)\n                            .attr(\"d\", line);\n        })\n        \n        var lines = document.getElementsByClassName('line');\n\n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = predictionArea\n                                        .append(\"path\")\n                                        .attr(\"id\", \"your-line\");\n        \n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n        \n        //check if userPrediction already exists in db\n        if (Object.keys(userPrediction).length > 0) {\n            predictionData = predictionData.filter(d => (+d.date >= +predStartDate) && (+d.date <= +predEndDate));\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            currDate = d3.timeDay.offset(predictionData[predictionData.length - 1].date, 1);\n            predictionData.concat(createDefaultPrediction(currDate, predEndDate));\n        }\n        else {\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n        }\n\n        var filteredData = null;\n//!!    //add forecast data to compiledData\n        //get complete dataset from paths\n        const forecastPaths = document.querySelectorAll(\".forecast\");\n        const confirmedPath = document.querySelector(\"#confirmed\");\n        const aggregatePath = document.querySelector(\"#aggregate\");\n        console.log(aggregatePath)\n        console.log(forecastPaths);\n        console.log(orgs);\n        orgs.map((o, index) => {\n            var lastDate = forecastData[index][forecastData[index].length - 1].date;\n            forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, lastDate);\n            compiledData.push({\n                name: o,\n                data: forecastData[index]\n            })\n        })\n        //confirmedData = getAllDataPoints(confirmedPath, x, y, confirmedStartDate, predStartDate);\n        compiledData.push({\n            name: \"Daily Confirmed Deaths\",\n            data: confirmedData\n        })\n        var lastDate = aggregateData[aggregateData.length - 1].date;\n        console.log(aggregateData);\n        console.log(lastDate);\n        aggregateData = getAllDataPoints(aggregatePath, x, y, aggregateData[0].date, lastDate)\n        console.log(aggregateData);\n        compiledData.push({\n            name: \"Aggregate Forecast\",\n            data: aggregateData\n        })\n        compiledData.push({\n            name: \"User Prediction\",\n            data: predictionData\n        })\n        //join data to yourLine\n        filteredData = predictionData.filter(predLine.defined())\n        yourLine.datum(filteredData)\n                .attr('d', predLine)\n                .style(\"stroke\", color(legendString[2]))\n                .style(\"stroke-width\", \"2px\")\n        //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append draw your guess text\n        const drawingInstruction = svg\n                                        .append(\"g\")\n                                        .attr(\"id\", \"drawing-instruction\")\n                                        .style(\"opacity\", \"0\");\n        drawingInstruction\n                            .append(\"text\")\n                            .attr(\"id\", \"draw-guess\")\n                            .attr(\"x\", confirmedAreaEndX + (width - confirmedAreaEndX) / 2)             \n                            .attr(\"y\", height - 100)\n                            .attr(\"text-anchor\", \"middle\")  \n                            .text(\"Draw your guess\")\n                            .style(\"font-size\", \"16px\");\n        //append circle at the end of confirmed curve\n        var selectCircle = drawingInstruction\n                                                .append(\"g\")\n                                                .attr(\"id\", \"pointer\");\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n        selectCircle.append(\"circle\")\n            .attr(\"class\", c)\n            .attr(\"cx\", confirmedAreaEndX)\n            .attr(\"cy\", confirmedAreaEndY)\n        })\n\n        if(Object.keys(userPrediction).length == 0) {\n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        }\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        //hide \"draw your guess\" text\n                        svg\n                            .select(\"#drawing-instruction\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"0\")\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        //update totalData everytime predictionData is updated\n                        compiledData[compiledData.length - 1].data = predictionData;\n                        //console.log(compiledData)\n                        /*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/\n                        filteredData = predictionData.filter(predLine.defined())\n                        yourLine.datum(filteredData)\n                                .attr('d', predLine)\n                                .style(\"stroke\", color(legendString[2]))\n                                .style(\"stroke-width\", \"2px\")\n                        });\n                    })\n                    .on(\"end\", function () {\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"1\")\n                        var lastPredDate = filteredData[filteredData.length - 1].date;\n                        getDataPointsFromPath(predictionData, yourLine.node(), x, y, lastPredDate);\n                        console.log(predictionData);\n                        savePrediction(predictionData, category);\n                    });\n        \n        svg.call(drag)\n\n        const tooltipArea = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n                    .attr(\"id\", \"tooltip-line\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"0.5px\")\n                    .style(\"opacity\", \"0\");\n        //console.log(compiledData)\n        var mousePerLine = tooltipArea\n                                        .selectAll(\".mouse-per-line\")\n                                        .data(compiledData)\n                                        .enter()\n                                        .append(\"g\")\n                                        .attr(\"class\", \"mouse-per-line\");\n        \n        mousePerLine.append(\"circle\")\n                        .attr(\"r\", 2)\n                        .style(\"stroke\", function(d) {\n                            return color(d.name);\n                        })\n                        .style(\"fill\", \"none\")\n                        .style(\"stroke-width\", \"1px\")\n                        .style(\"opacity\", \"0\");\n        mousePerLine.append(\"text\")\n                    .attr(\"transform\", \"translate(10,3)\"); \n        var chart = tooltipArea\n                            .append(\"svg:rect\")\n                            .attr('width', width)\n                            .attr('height', height)\n                            .attr('fill', 'none')\n                            .attr('pointer-events', 'all')\n                            //.style(\"cursor\", \"pointer\")\n                            .on('mouseout', function() { // on mouse out hide line, circles and text\n                                d3.select(\"#tooltip-line\")\n                                .style(\"opacity\", \"0\");\n                                d3.selectAll(\".mouse-per-line circle\")\n                                .style(\"opacity\", \"0\");\n                                d3.selectAll(\".mouse-per-line text\")\n                                .style(\"opacity\", \"0\")\n                            })\n                            .on('mouseover', function() { // on mouse in show line, circles and text\n                                d3.select(\"#tooltip-line\")\n                                .style(\"opacity\", \"1\");\n                                d3.selectAll(\".mouse-per-line circle\")\n                                .style(\"opacity\", \"1\");\n                                d3.selectAll(\".mouse-per-line text\")\n                                .style(\"opacity\", \"1\")\n\n                            })\n                            .on('mousemove', function() { // mouse moving over canvas\n                                var mouse = d3.mouse(this);\n                                var xCoord = mouse[0];\n                                var yCoord = mouse[1];\n                                const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n                                if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n                                    chart.attr(\"cursor\", \"pointer\");\n                                }\n                                else {\n                                    chart.attr(\"cursor\", \"default\");\n                                }\n                                d3\n                                    .select(\"#tooltip-line\")\n                                    .attr(\"d\", function() {\n                                        var d = \"M\" + xCoord + \",\" + height;\n                                        d += \" \" + xCoord + \",\" + 0;\n                                        return d;\n                                    });\n                                d3\n                                    .selectAll(\".mouse-per-line\")\n                                    .attr(\"transform\", function(d, i) {\n                                        if (d.data.length == 0) {return;}\n                                        var date = x.invert(xCoord);\n                                        const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n                                        var a = null;\n                                        if (index > 0) {\n                                            a = d.data[index - 1];\n                                        }\n                                        const b = d.data[index];\n                                        //d = the data object corresponding to date and value pointed by the cursors\n                                        var data = null;\n                                        if (!a) {\n                                            data = b;\n                                        }\n                                        else if (!b) {\n                                            data = a;\n                                        }\n                                        else {\n                                            data = b && (date - a.date > b.date - date) ? b : a;\n                                        }\n                                        if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n                                            if (data.defined != 0) {\n                                                var element = d3.select(this)\n                                                                .select('text')\n                                                                    .style(\"opacity\", \"1\")\n                                                                    .text(Math.round(data.value));\n                                                element.select(\"circle\")\n                                                        .style(\"opacity\", \"1\");\n                                                return \"translate(\" + mouse[0] + \",\" + y(data.value)+\")\";\n                                            }\n                                        }\n                                        var element = d3.select(this)\n                                                        .select(\"text\")\n                                                        .style(\"opacity\", \"0\")\n                                        element\n                                                .select(\"circle\")\n                                                .style(\"opacity\", \"0\");\n                                        \n                                });\n                            })\n                            // .on('mousemove', function() { // mouse moving over canvas\n                            //     var mouse = d3.mouse(this);\n                            //     var xCoord = mouse[0];\n                            //     var yCoord = mouse[1];\n                            //     const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n                            //     if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n                            //         chart.attr(\"cursor\", \"pointer\");\n                            //     }\n                            //     else {\n                            //         chart.attr(\"cursor\", \"default\");\n                            //     }\n                            //     d3\n                            //         .select(\"#tooltip-line\")\n                            //         .attr(\"d\", function() {\n                            //             var d = \"M\" + xCoord + \",\" + height;\n                            //             d += \" \" + xCoord + \",\" + 0;\n                            //             return d;\n                            //         });\n                            //     d3\n                            //         .selectAll(\".mouse-per-line\")\n                            //         .attr(\"transform\", function(d, i) {\n                            //             if (d.data.length == 0) {return;}\n                            //             var date = x.invert(xCoord);\n                            //             const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n                            //             var a = null;\n                            //             if (index > 0) {\n                            //                 a = d.data[index - 1];\n                            //             }\n                            //             const b = d.data[index];\n                            //             //d = the data object corresponding to date and value pointed by the cursors\n                            //             var data = null;\n                            //             if (!a) {\n                            //                 data = b;\n                            //             }\n                            //             else if (!b) {\n                            //                 data = a;\n                            //             }\n                            //             else {\n                            //                 data = b && (date - a.date > b.date - date) ? b : a;\n                            //             }\n                            //             if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n                            //                 if (data.defined != 0) {\n                            //                     var element = d3.select(this)\n                            //                                     .select('text')\n                            //                                         .style(\"opacity\", \"1\")\n                            //                                         .text(Math.round(data.value));\n                            //                     element.select(\"circle\")\n                            //                             .style(\"opacity\", \"1\");\n                            //                     return \"translate(\" + mouse[0] + \",\" + y(data.value)+\")\";\n                            //                 }\n                            //             }\n                            //             var element = d3.select(this)\n                            //                             .select(\"text\")\n                            //                             .style(\"opacity\", \"0\")\n                            //             element\n                            //                     .select(\"circle\")\n                            //                     .style(\"opacity\", \"0\");\n                                        \n                            //     });\n                            // })\n\n        /////////////////////////////////////////////////////////////////////////////////////////////\n        const focusHeight = 100;\n        const contextMargin = 50;\n        var context = svg\n                            .append(\"g\")\n                                .attr(\"viewBox\", [0, 0, width, focusHeight])\n                                .attr(\"transform\", `translate(0,${height + contextMargin} )`)\n                                //.attr(\"width\", width + 100)\n                                //.attr(\"height\", height)\n                                .style(\"display\", \"block\")\n\n\n\n        /*const xAxis = (g, x, height) => g\n                                            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                            .call(d3.axisBottom(x))*/\n\n        var contextX = d3\n                            .scaleTime()\n                            .domain([confirmedStartDate, predEndDate])\n                            .range([0, width]);\n        \n        var contextXAxis = context\n                                    .append(\"g\")\n                                    .attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`)\n                                    .call(d3.axisBottom(contextX));\n        const brush = d3.brushX()\n                        .extent([[0, 0], [width, focusHeight - margin.bottom]])\n                        .on(\"brush\", brushed)\n                        .on(\"end\", brushended);\n\n        const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    \n        /*context.append(\"g\")\n                .call(xAxis, x, focusHeight);*/\n    \n        /*svg.append(\"path\")\n            .datum(confirmedData)\n            .attr(\"fill\", \"steelblue\")\n            .attr(\"d\", line(x, y.copy().range([focusHeight - margin.bottom, 4])));*/\n        function brushed() {\n            if (d3.event.selection) {\n                var extent = d3.event.selection;\n                //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                x.domain([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                xAxis\n                        //.transition()\n                        //.duration(1000)\n                        .call(d3.axisBottom(x))\n                var newX = x(confirmedData[confirmedData.length - 1].date);\n                newX = newX < 0 ? 0 : newX;\n                d3\n                    .select(\"#prediction-clip\")\n                    .select(\"rect\")\n                        .attr(\"width\", width - newX)\n                        .attr(\"x\", newX);\n\n                svg\n                    .selectAll(\".line\")\n                    //.transition()\n                    //.duration(1000)\n                    .attr('d', line)\n\n                svg\n                    .select(\"#your-line\")\n                    .attr(\"d\", predLine)\n                \n                //reposition draw your guess text and pointer\n                svg\n                    .select(\"#draw-guess\")\n                    .attr(\"x\", newX + (width - newX) / 2);\n                svg\n                    .select(\"#pointer\")\n                    .selectAll(\"circle\")\n                        .attr(\"cx\", newX);\n            }\n        }\n        \n        function brushended() {\n            if (!d3.event.selection) {\n                gb.call(brush.move, defaultSelection);\n            }\n\n        }\n        const gb = context\n                        .call(brush)\n                        .call(brush.move, defaultSelection);   \n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        var deleteButton = document.createElement(\"button\")\n        deleteButton.className = 'btn primary-btn'\n        deleteButton.id = 'delete-btn'\n        deleteButton.innerText = \"Reset\";\n        d3.select(\"#delete-btn\")\n        deleteButton.onclick = () => {\n            this.deletePrediction(category)\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            //update yourLine\n            var filtered = predictionData.filter(predLine.defined())\n            yourLine.datum(filtered)\n                    .attr('d', predLine)\n                    \n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        };\n        document.querySelector(\"body\").appendChild(deleteButton);\n        ////ADD TODAY LINE/////////////////////////////////////////////////////\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n\n    }\n        \n    render() {\n        return(<div>\n            <h2>US Daily Deaths</h2>\n            <p>Daily deaths is the best indicator of the progression of the pandemic.</p>\n            {/*<p>Current total: {this.confirmedData.value}</p>*/}\n            <div ref={this.chartRef}></div>\n            </div>);\n    }\n}\n\nexport default InteractiveChart;"]},"metadata":{},"sourceType":"module"}