{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './InteractiveChart.css';\nimport { cleanConfirmedData, clamp } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\n\nclass InteractiveChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userPrediction: null\n    };\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    //console.log(this.props);\n    this.renderChart();\n  }\n\n  savePrediction(model, data) {\n    fetch('/update/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"model\": model,\n        \"data\": data\n      })\n    });\n  }\n\n  renderChart() {\n    const {\n      forecast,\n      orgs,\n      userPrediction,\n      confirmed\n    } = this.props;\n    const model = orgs; //console.log(model);\n\n    const confirmedResult = cleanConfirmedData(confirmed, Object.keys(forecast));\n    const savePrediction = this.savePrediction; //set up margin, width, height of chart\n\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        width = 800 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    var svg = d3.select(this.chartRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom + 50).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); //console.log(svg);\n    //line function        \n\n    /*var drawLine = d3.line()\n        .x(function(d) { return x(d.year) })\n        .y(function(d) { return y(d.debt) })*/\n    //process data\n\n    var confirmedData = Object.keys(confirmed).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: confirmed[key]\n    }));\n    var forecastData = forecast.map(f => {\n      return Object.keys(f).map(key => ({\n        date: d3.timeParse(\"%Y-%m-%d\")(key),\n        value: f[key]\n      }));\n    }); //get data starting 2020-02-01\n\n    confirmedData = confirmedData.filter(d => +d.date >= +new Date(\"2020-02-01\")); //draw x-axis\n\n    var predStartDate = confirmedData[0].date;\n    var predLength = 63;\n    var endDate = addDays(new Date(), predLength);\n    var x = d3.scaleTime().domain([predStartDate, endDate]).range([0, width]).nice();\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); //find max val in confirmedData and forecastData to determine the max of y-axis\n\n    var confirmedMax = d3.max(confirmedData, function (d) {\n      return +d.value;\n    });\n    var forecastMax = 0;\n    forecastData.map(f => {\n      var currMax = d3.max(f, d => {\n        return d.value;\n      });\n      forecastMax = currMax > forecastMax ? currMax : forecastMax;\n    });\n    var yAxisMax = Math.max(confirmedMax, forecastMax); // Add Y axis\n\n    var y = d3.scaleLinear().domain([0, yAxisMax]).range([height, 0]).nice();\n    svg.append(\"g\").call(d3.axisLeft(y));\n    var lineGenerator = d3.line().curve(d3.curveCatmullRom);\n    var predLineGenerator = d3.line().curve(d3.curveBasis); //d3.curveMonotoneX\n    //d3.curveBasis\n    //d3.curveCardinal\n\n    var line = lineGenerator.x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    });\n    console.log(confirmedData);\n    var confirmedLine = svg.append(\"path\").attr(\"id\", \"confirmed\").datum(confirmedData).attr('d', line); //draw forecasts\n\n    forecastData.map((f, index) => {\n      console.log(f);\n      svg.append(\"path\").attr(\"class\", \"forecast\").attr(\"id\", orgs[index]).datum(f).attr(\"d\", line);\n    }); //draw legend\n\n    var color = d3.scaleOrdinal().domain(orgs).range(d3.schemeSet2);\n    var legend = svg.append('div').attr(\"id\", \"legend\");\n    legend.selectAll(\"legend\").data(orgs).enter().append(\"circle\").attr(\"cx\", 100).attr(\"cy\", function (d, i) {\n      return 100 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .attr(\"r\", 7).style(\"fill\", function (d) {\n      return color(d);\n    });\n    var predictionData = [];\n    var currDate = confirmedData[confirmedData.length - 1].date;\n    var defined = true;\n    var value = confirmedData[confirmedData.length - 1].value;\n    var confirmedLastVal = value;\n\n    for (var i = 0; i < predLength; i++) {\n      predictionData.push({\n        date: currDate,\n        value: value,\n        defined: defined\n      });\n      currDate = addDays(currDate, 1);\n      defined = 0;\n      value = 0;\n    } //append click area rect\n\n\n    var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width;\n    var clickAreaWidth = width - confirmedAreaWidth; //console.log(confirmedLine.node().getBoundingClientRect().left);\n\n    svg.append(\"rect\").attr(\"id\", \"click-area\").attr(\"width\", clickAreaWidth).attr(\"height\", height).attr(\"transform\", \"translate (\" + confirmedAreaWidth + \" 0)\").attr(\"fill\", \"none\").style(\"pointer-events\", \"visible\");\n    var clickArea = d3.select(\"#click-area\");\n    var predLine = predLineGenerator.defined(d => d.defined).x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    });\n    var yourLine = svg.append(\"path\").attr(\"id\", \"your-line\");\n    /*var gapLine = svg.append(\"path\")\n                        .attr(\"id\", \"gap-line\");*/\n\n    var totalData = confirmedData.concat(predictionData);\n    var drag = d3.drag().on(\"drag\", function () {\n      var pos = d3.mouse(this);\n      var date = clamp(predStartDate, endDate, x.invert(pos[0]));\n      var value = clamp(0, yAxisMax, y.invert(pos[1])); //var date = x.invert(pos[0]);\n      //var value = y.invert(pos[1]);\n\n      console.log(value);\n      predictionData.forEach(function (d) {\n        if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date) && +d3.timeDay.round(d.date) != +predStartDate) {\n          d.value = value;\n          d.defined = true;\n        }\n\n        predictionData[0].value = confirmedLastVal; //update totalData everytime predictionData is updated\n\n        totalData = confirmedData.concat(predictionData);\n        /*yourLine.datum(predictionData)\n                .attr('d', predLine)*/\n\n        var filteredData = predictionData.filter(predLine.defined());\n        yourLine.datum(filteredData).attr('d', predLine);\n        /*gapLine.datum(filteredData)\n                .attr('d', predLine(filteredData));*/\n      });\n    });\n    svg.call(drag); //finds the datapoint closest to the mouse (along x)\n\n    var bisect = () => {\n      const bisectDate = d3.bisector(d => d.date).left;\n      return mx => {\n        const date = x.invert(mx);\n        const index = bisectDate(totalData, date, 1);\n        const a = totalData[index - 1];\n        const b = totalData[index];\n        return b && date - a.date > b.date - date ? b : a;\n      };\n    };\n\n    var callout = (g, value) => {\n      if (!value) return g.style(\"display\", \"none\");\n      g.style(\"display\", null).style(\"pointer-events\", \"none\").style(\"font\", \"10px sans-serif\");\n      const path = g.selectAll(\"path\").data([null]).join(\"path\").attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n      const text = g.selectAll(\"text\").data([null]).join(\"text\").call(text => text.selectAll(\"tspan\").data((value + \"\").split(/\\n/)).join(\"tspan\").attr(\"x\", 0).attr(\"y\", (d, i) => `${i * 1.1}em`).style(\"font-weight\", (_, i) => i ? null : \"bold\").text(d => d));\n      const {\n        x,\n        y,\n        width: w,\n        height: h\n      } = text.node().getBBox();\n      text.attr(\"transform\", `translate(${-w / 2},${15 - y})`);\n      path.attr(\"d\", `M${-w / 2 - 10},5H-5l5,-5l5,5H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n    };\n\n    const tooltip = svg.append(\"g\");\n    const mouseArea = svg.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"none\").style(\"pointer-events\", \"visible\");\n    svg.on(\"touchmove mousemove\", function () {\n      console.log(\"yep\");\n      var date = x.invert(d3.mouse(this)[0]);\n      const index = d3.bisector(d => d.date).left(totalData, date, 1);\n      const a = totalData[index - 1];\n      const b = totalData[index]; //d = the data object corresponding to date and value pointed by the cursors\n\n      var d = b && date - a.date > b.date - date ? b : a;\n      date = d.date;\n      var value = Math.round(d.value); //if (value != 0) {\n\n      tooltip.attr(\"transform\", `translate(${x(date)},${y(value)})`).call(callout, `${value}\n                ${formatDate(date)}`); //}\n    });\n    svg.on(\"touchend mouseleave\", () => tooltip.call(callout, null));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default InteractiveChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js"],"names":["React","Component","d3","cleanConfirmedData","clamp","elementType","addDays","formatDate","InteractiveChart","constructor","props","state","userPrediction","chartRef","createRef","componentDidMount","renderChart","savePrediction","model","data","fetch","method","headers","body","JSON","stringify","forecast","orgs","confirmed","confirmedResult","Object","keys","margin","top","right","bottom","left","width","height","svg","select","current","append","attr","confirmedData","map","key","date","timeParse","value","forecastData","f","filter","d","Date","predStartDate","predLength","endDate","x","scaleTime","domain","range","nice","call","axisBottom","confirmedMax","max","forecastMax","currMax","yAxisMax","Math","y","scaleLinear","axisLeft","lineGenerator","line","curve","curveCatmullRom","predLineGenerator","curveBasis","console","log","confirmedLine","datum","index","color","scaleOrdinal","schemeSet2","legend","selectAll","enter","i","style","predictionData","currDate","length","defined","confirmedLastVal","push","confirmedAreaWidth","node","getBoundingClientRect","clickAreaWidth","clickArea","predLine","yourLine","totalData","concat","drag","on","pos","mouse","invert","forEach","timeDay","round","filteredData","bisect","bisectDate","bisector","mx","a","b","callout","g","path","join","text","split","_","w","h","getBBox","tooltip","mouseArea","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,wBAAP;AACA,SAASC,kBAAT,EAA6BC,KAA7B,QAA0C,kBAA1C;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,kBAApC;;AAGA,MAAMC,gBAAN,SAA+BP,SAA/B,CAAyC;AACrCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,cAAc,EAAE;AAAlB,KAAb;AACA,SAAKC,QAAL,GAAgBb,KAAK,CAACc,SAAN,EAAhB;AACH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB;AACA,SAAKC,WAAL;AACH;;AAEDC,EAAAA,cAAc,CAACC,KAAD,EAAQC,IAAR,EAAc;AACxBC,IAAAA,KAAK,CAAC,UAAD,EAAY;AACfC,MAAAA,MAAM,EAAE,MADO;AAEfC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFM;AAKfC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAC,iBAASP,KAAV;AAAiB,gBAAQC;AAAzB,OAAf;AALS,KAAZ,CAAL;AAOH;;AAEDH,EAAAA,WAAW,GAAG;AACV,UAAM;AAAEU,MAAAA,QAAF;AAAYC,MAAAA,IAAZ;AAAkBf,MAAAA,cAAlB;AAAkCgB,MAAAA;AAAlC,QAAgD,KAAKlB,KAA3D;AACA,UAAMQ,KAAK,GAAGS,IAAd,CAFU,CAGV;;AACA,UAAME,eAAe,GAAG1B,kBAAkB,CAACyB,SAAD,EAAYE,MAAM,CAACC,IAAP,CAAYL,QAAZ,CAAZ,CAA1C;AACA,UAAMT,cAAc,GAAG,KAAKA,cAA5B,CALU,CAOV;;AACA,QAAIe,MAAM,GAAG;AAACC,MAAAA,GAAG,EAAE,EAAN;AAAUC,MAAAA,KAAK,EAAE,EAAjB;AAAqBC,MAAAA,MAAM,EAAE,EAA7B;AAAiCC,MAAAA,IAAI,EAAE;AAAvC,KAAb;AAAA,QACIC,KAAK,GAAG,MAAML,MAAM,CAACI,IAAb,GAAoBJ,MAAM,CAACE,KADvC;AAAA,QAEII,MAAM,GAAG,MAAMN,MAAM,CAACC,GAAb,GAAmBD,MAAM,CAACG,MAFvC;AAGA,QAAII,GAAG,GAAGrC,EAAE,CAACsC,MAAH,CAAU,KAAK3B,QAAL,CAAc4B,OAAxB,EACGC,MADH,CACU,KADV,EAEOC,IAFP,CAEY,OAFZ,EAEqBN,KAAK,GAAGL,MAAM,CAACI,IAAf,GAAsBJ,MAAM,CAACE,KAFlD,EAGOS,IAHP,CAGY,QAHZ,EAGsBL,MAAM,GAAGN,MAAM,CAACC,GAAhB,GAAsBD,MAAM,CAACG,MAA7B,GAAsC,EAH5D,EAIGO,MAJH,CAIU,GAJV,EAKOC,IALP,CAKY,WALZ,EAMM,eAAeX,MAAM,CAACI,IAAtB,GAA6B,GAA7B,GAAmCJ,MAAM,CAACC,GAA1C,GAAgD,GANtD,CAAV,CAXU,CAkBV;AAEA;;AACA;;;AAGA;;AACA,QAAIW,aAAa,GAAGd,MAAM,CAACC,IAAP,CAAYH,SAAZ,EAAuBiB,GAAvB,CAA2BC,GAAG,KAAK;AACnDC,MAAAA,IAAI,EAAE7C,EAAE,CAAC8C,SAAH,CAAa,UAAb,EAAyBF,GAAzB,CAD6C;AAEnDG,MAAAA,KAAK,EAAErB,SAAS,CAACkB,GAAD;AAFmC,KAAL,CAA9B,CAApB;AAIA,QAAII,YAAY,GAAGxB,QAAQ,CAACmB,GAAT,CAAaM,CAAC,IAAI;AACjC,aAAOrB,MAAM,CAACC,IAAP,CAAYoB,CAAZ,EAAeN,GAAf,CAAmBC,GAAG,KAAK;AAC9BC,QAAAA,IAAI,EAAE7C,EAAE,CAAC8C,SAAH,CAAa,UAAb,EAAyBF,GAAzB,CADwB;AAE9BG,QAAAA,KAAK,EAAEE,CAAC,CAACL,GAAD;AAFsB,OAAL,CAAtB,CAAP;AAIH,KALkB,CAAnB,CA7BU,CAoCV;;AACAF,IAAAA,aAAa,GAAGA,aAAa,CAACQ,MAAd,CAAqBC,CAAC,IAAI,CAACA,CAAC,CAACN,IAAH,IAAW,CAAC,IAAIO,IAAJ,CAAS,YAAT,CAAtC,CAAhB,CArCU,CAuCV;;AACA,QAAIC,aAAa,GAAGX,aAAa,CAAC,CAAD,CAAb,CAAiBG,IAArC;AACA,QAAIS,UAAU,GAAG,EAAjB;AACA,QAAIC,OAAO,GAAGnD,OAAO,CAAC,IAAIgD,IAAJ,EAAD,EAAaE,UAAb,CAArB;AACA,QAAIE,CAAC,GAAGxD,EAAE,CAACyD,SAAH,GACHC,MADG,CACI,CAACL,aAAD,EAAgBE,OAAhB,CADJ,EAEHI,KAFG,CAEG,CAAE,CAAF,EAAKxB,KAAL,CAFH,EAGHyB,IAHG,EAAR;AAICvB,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EACIC,IADJ,CACS,WADT,EACsB,iBAAiBL,MAAjB,GAA0B,GADhD,EAEIyB,IAFJ,CAES7D,EAAE,CAAC8D,UAAH,CAAcN,CAAd,CAFT,EA/CS,CAmDV;;AACA,QAAIO,YAAY,GAAG/D,EAAE,CAACgE,GAAH,CAAOtB,aAAP,EAAsB,UAASS,CAAT,EAAY;AAAE,aAAO,CAACA,CAAC,CAACJ,KAAV;AAAkB,KAAtD,CAAnB;AACA,QAAIkB,WAAW,GAAG,CAAlB;AACAjB,IAAAA,YAAY,CAACL,GAAb,CAAiBM,CAAC,IAAI;AAClB,UAAIiB,OAAO,GAAGlE,EAAE,CAACgE,GAAH,CAAOf,CAAP,EAAUE,CAAC,IAAI;AAAC,eAAOA,CAAC,CAACJ,KAAT;AAAgB,OAAhC,CAAd;AACAkB,MAAAA,WAAW,GAAGC,OAAO,GAAGD,WAAV,GAAwBC,OAAxB,GAAkCD,WAAhD;AACH,KAHD;AAIA,QAAIE,QAAQ,GAAGC,IAAI,CAACJ,GAAL,CAASD,YAAT,EAAuBE,WAAvB,CAAf,CA1DU,CA2DV;;AACA,QAAII,CAAC,GAAGrE,EAAE,CAACsE,WAAH,GACHZ,MADG,CACI,CAAC,CAAD,EAAIS,QAAJ,CADJ,EAEHR,KAFG,CAEG,CAAEvB,MAAF,EAAU,CAAV,CAFH,EAGHwB,IAHG,EAAR;AAIAvB,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EACKqB,IADL,CACU7D,EAAE,CAACuE,QAAH,CAAYF,CAAZ,CADV;AAGA,QAAIG,aAAa,GAAGxE,EAAE,CAACyE,IAAH,GACfC,KADe,CACT1E,EAAE,CAAC2E,eADM,CAApB;AAGA,QAAIC,iBAAiB,GAAG5E,EAAE,CAACyE,IAAH,GACnBC,KADmB,CACb1E,EAAE,CAAC6E,UADU,CAAxB,CAtEU,CAwEN;AACA;AACA;;AACJ,QAAIJ,IAAI,GAAGD,aAAa,CACnBhB,CADM,CACJ,UAASL,CAAT,EAAY;AAAE,aAAOK,CAAC,CAACL,CAAC,CAACN,IAAH,CAAR;AAAkB,KAD5B,EAENwB,CAFM,CAEJ,UAASlB,CAAT,EAAY;AAAE,aAAOkB,CAAC,CAAClB,CAAC,CAACJ,KAAH,CAAR;AAAmB,KAF7B,CAAX;AAIA+B,IAAAA,OAAO,CAACC,GAAR,CAAYrC,aAAZ;AACA,QAAIsC,aAAa,GAAG3C,GAAG,CAClBG,MADe,CACR,MADQ,EAEfC,IAFe,CAEV,IAFU,EAEJ,WAFI,EAGfwC,KAHe,CAGTvC,aAHS,EAIfD,IAJe,CAIV,GAJU,EAILgC,IAJK,CAApB,CAhFU,CAsFV;;AACAzB,IAAAA,YAAY,CAACL,GAAb,CAAiB,CAACM,CAAD,EAAIiC,KAAJ,KAAc;AAC3BJ,MAAAA,OAAO,CAACC,GAAR,CAAY9B,CAAZ;AACAZ,MAAAA,GAAG,CACEG,MADL,CACY,MADZ,EAESC,IAFT,CAEc,OAFd,EAEuB,UAFvB,EAGSA,IAHT,CAGc,IAHd,EAGoBhB,IAAI,CAACyD,KAAD,CAHxB,EAIKD,KAJL,CAIWhC,CAJX,EAKSR,IALT,CAKc,GALd,EAKmBgC,IALnB;AAMH,KARD,EAvFU,CAiGV;;AACA,QAAIU,KAAK,GAAGnF,EAAE,CACGoF,YADL,GAEK1B,MAFL,CAEYjC,IAFZ,EAGKkC,KAHL,CAGW3D,EAAE,CAACqF,UAHd,CAAZ;AAKA,QAAIC,MAAM,GAAGjD,GAAG,CAACG,MAAJ,CAAW,KAAX,EACIC,IADJ,CACS,IADT,EACe,QADf,CAAb;AAEA6C,IAAAA,MAAM,CAACC,SAAP,CAAiB,QAAjB,EACKtE,IADL,CACUQ,IADV,EAEK+D,KAFL,GAGKhD,MAHL,CAGY,QAHZ,EAISC,IAJT,CAIc,IAJd,EAIoB,GAJpB,EAKSA,IALT,CAKc,IALd,EAKoB,UAASU,CAAT,EAAWsC,CAAX,EAAa;AAAE,aAAO,MAAMA,CAAC,GAAC,EAAf;AAAkB,KALrD,EAKuD;AALvD,KAMShD,IANT,CAMc,GANd,EAMmB,CANnB,EAOSiD,KAPT,CAOe,MAPf,EAOuB,UAASvC,CAAT,EAAW;AAAE,aAAOgC,KAAK,CAAChC,CAAD,CAAZ;AAAgB,KAPpD;AAWA,QAAIwC,cAAc,GAAG,EAArB;AACA,QAAIC,QAAQ,GAAGlD,aAAa,CAACA,aAAa,CAACmD,MAAd,GAAuB,CAAxB,CAAb,CAAwChD,IAAvD;AACA,QAAIiD,OAAO,GAAG,IAAd;AACA,QAAI/C,KAAK,GAAGL,aAAa,CAACA,aAAa,CAACmD,MAAd,GAAuB,CAAxB,CAAb,CAAwC9C,KAApD;AACA,QAAIgD,gBAAgB,GAAGhD,KAAvB;;AACA,SAAK,IAAI0C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnC,UAApB,EAAgCmC,CAAC,EAAjC,EAAqC;AACjCE,MAAAA,cAAc,CAACK,IAAf,CAAoB;AAACnD,QAAAA,IAAI,EAAE+C,QAAP;AAAiB7C,QAAAA,KAAK,EAAEA,KAAxB;AAA+B+C,QAAAA,OAAO,EAAEA;AAAxC,OAApB;AACAF,MAAAA,QAAQ,GAAGxF,OAAO,CAACwF,QAAD,EAAW,CAAX,CAAlB;AACAE,MAAAA,OAAO,GAAG,CAAV;AACA/C,MAAAA,KAAK,GAAG,CAAR;AACH,KA9HS,CA+HV;;;AACA,QAAIkD,kBAAkB,GAAGjB,aAAa,CAACkB,IAAd,GAAqBC,qBAArB,GAA6ChE,KAAtE;AACA,QAAIiE,cAAc,GAAGjE,KAAK,GAAG8D,kBAA7B,CAjIU,CAkIV;;AACA5D,IAAAA,GAAG,CAACG,MAAJ,CAAW,MAAX,EACIC,IADJ,CACS,IADT,EACe,YADf,EAEIA,IAFJ,CAES,OAFT,EAEkB2D,cAFlB,EAGI3D,IAHJ,CAGS,QAHT,EAGkBL,MAHlB,EAIIK,IAJJ,CAIS,WAJT,EAIsB,gBAAgBwD,kBAAhB,GAAmC,KAJzD,EAKIxD,IALJ,CAKS,MALT,EAKiB,MALjB,EAMIiD,KANJ,CAMU,gBANV,EAM2B,SAN3B;AAOA,QAAIW,SAAS,GAAGrG,EAAE,CAACsC,MAAH,CAAU,aAAV,CAAhB;AAEA,QAAIgE,QAAQ,GAAG1B,iBAAiB,CACnBkB,OADE,CACM3C,CAAC,IAAIA,CAAC,CAAC2C,OADb,EAEFtC,CAFE,CAEA,UAASL,CAAT,EAAY;AAAE,aAAOK,CAAC,CAACL,CAAC,CAACN,IAAH,CAAR;AAAkB,KAFhC,EAGFwB,CAHE,CAGA,UAASlB,CAAT,EAAY;AAAE,aAAOkB,CAAC,CAAClB,CAAC,CAACJ,KAAH,CAAR;AAAmB,KAHjC,CAAf;AAKA,QAAIwD,QAAQ,GAAGlE,GAAG,CAACG,MAAJ,CAAW,MAAX,EACAC,IADA,CACK,IADL,EACW,WADX,CAAf;AAEA;;;AAGA,QAAI+D,SAAS,GAAG9D,aAAa,CAAC+D,MAAd,CAAqBd,cAArB,CAAhB;AAEA,QAAIe,IAAI,GAAG1G,EAAE,CAAC0G,IAAH,GACGC,EADH,CACM,MADN,EACc,YAAW;AACpB,UAAIC,GAAG,GAAG5G,EAAE,CAAC6G,KAAH,CAAS,IAAT,CAAV;AACA,UAAIhE,IAAI,GAAG3C,KAAK,CAACmD,aAAD,EAAgBE,OAAhB,EAAyBC,CAAC,CAACsD,MAAF,CAASF,GAAG,CAAC,CAAD,CAAZ,CAAzB,CAAhB;AACA,UAAI7D,KAAK,GAAG7C,KAAK,CAAC,CAAD,EAAIiE,QAAJ,EAAcE,CAAC,CAACyC,MAAF,CAASF,GAAG,CAAC,CAAD,CAAZ,CAAd,CAAjB,CAHoB,CAIpB;AACA;;AACA9B,MAAAA,OAAO,CAACC,GAAR,CAAYhC,KAAZ;AAEA4C,MAAAA,cAAc,CAACoB,OAAf,CAAuB,UAAS5D,CAAT,EAAW;AAC9B,YAAI,CAACnD,EAAE,CAACgH,OAAH,CAAWC,KAAX,CAAiB9D,CAAC,CAACN,IAAnB,CAAD,IAA6B,CAAC7C,EAAE,CAACgH,OAAH,CAAWC,KAAX,CAAiBpE,IAAjB,CAA9B,IAAyD,CAAC7C,EAAE,CAACgH,OAAH,CAAWC,KAAX,CAAiB9D,CAAC,CAACN,IAAnB,CAAD,IAA6B,CAACQ,aAA3F,EAA0G;AACtGF,UAAAA,CAAC,CAACJ,KAAF,GAAUA,KAAV;AACAI,UAAAA,CAAC,CAAC2C,OAAF,GAAY,IAAZ;AACH;;AACDH,QAAAA,cAAc,CAAC,CAAD,CAAd,CAAkB5C,KAAlB,GAA0BgD,gBAA1B,CAL8B,CAM9B;;AACAS,QAAAA,SAAS,GAAG9D,aAAa,CAAC+D,MAAd,CAAqBd,cAArB,CAAZ;AACA;;;AAEA,YAAIuB,YAAY,GAAGvB,cAAc,CAACzC,MAAf,CAAsBoD,QAAQ,CAACR,OAAT,EAAtB,CAAnB;AAEAS,QAAAA,QAAQ,CAACtB,KAAT,CAAeiC,YAAf,EACSzE,IADT,CACc,GADd,EACmB6D,QADnB;AAGA;;AAEH,OAjBD;AAkBH,KA3BF,CAAX;AA6BAjE,IAAAA,GAAG,CAACwB,IAAJ,CAAS6C,IAAT,EArLU,CAuLV;;AACA,QAAIS,MAAM,GAAG,MAAM;AACf,YAAMC,UAAU,GAAGpH,EAAE,CAACqH,QAAH,CAAYlE,CAAC,IAAIA,CAAC,CAACN,IAAnB,EAAyBX,IAA5C;AACA,aAAOoF,EAAE,IAAI;AACT,cAAMzE,IAAI,GAAGW,CAAC,CAACsD,MAAF,CAASQ,EAAT,CAAb;AACA,cAAMpC,KAAK,GAAGkC,UAAU,CAACZ,SAAD,EAAY3D,IAAZ,EAAkB,CAAlB,CAAxB;AACA,cAAM0E,CAAC,GAAGf,SAAS,CAACtB,KAAK,GAAG,CAAT,CAAnB;AACA,cAAMsC,CAAC,GAAGhB,SAAS,CAACtB,KAAD,CAAnB;AACA,eAAOsC,CAAC,IAAK3E,IAAI,GAAG0E,CAAC,CAAC1E,IAAT,GAAgB2E,CAAC,CAAC3E,IAAF,GAASA,IAA/B,GAAuC2E,CAAvC,GAA2CD,CAAlD;AACH,OAND;AAOH,KATD;;AAUA,QAAIE,OAAO,GAAG,CAACC,CAAD,EAAI3E,KAAJ,KAAc;AACxB,UAAI,CAACA,KAAL,EAAY,OAAO2E,CAAC,CAAChC,KAAF,CAAQ,SAAR,EAAmB,MAAnB,CAAP;AAEZgC,MAAAA,CAAC,CACIhC,KADL,CACW,SADX,EACsB,IADtB,EAEKA,KAFL,CAEW,gBAFX,EAE6B,MAF7B,EAGKA,KAHL,CAGW,MAHX,EAGmB,iBAHnB;AAKA,YAAMiC,IAAI,GAAGD,CAAC,CAACnC,SAAF,CAAY,MAAZ,EACVtE,IADU,CACL,CAAC,IAAD,CADK,EAEV2G,IAFU,CAEL,MAFK,EAGRnF,IAHQ,CAGH,MAHG,EAGK,OAHL,EAIRA,IAJQ,CAIH,QAJG,EAIO,OAJP,CAAb;AAMA,YAAMoF,IAAI,GAAGH,CAAC,CAACnC,SAAF,CAAY,MAAZ,EACVtE,IADU,CACL,CAAC,IAAD,CADK,EAEV2G,IAFU,CAEL,MAFK,EAGV/D,IAHU,CAGLgE,IAAI,IAAIA,IAAI,CACftC,SADW,CACD,OADC,EAEXtE,IAFW,CAEN,CAAC8B,KAAK,GAAG,EAAT,EAAa+E,KAAb,CAAmB,IAAnB,CAFM,EAGXF,IAHW,CAGN,OAHM,EAITnF,IAJS,CAIJ,GAJI,EAIC,CAJD,EAKTA,IALS,CAKJ,GALI,EAKC,CAACU,CAAD,EAAIsC,CAAJ,KAAW,GAAEA,CAAC,GAAG,GAAI,IALtB,EAMTC,KANS,CAMH,aANG,EAMY,CAACqC,CAAD,EAAItC,CAAJ,KAAUA,CAAC,GAAG,IAAH,GAAU,MANjC,EAOToC,IAPS,CAOJ1E,CAAC,IAAIA,CAPD,CAHH,CAAb;AAYA,YAAM;AAACK,QAAAA,CAAD;AAAIa,QAAAA,CAAJ;AAAOlC,QAAAA,KAAK,EAAE6F,CAAd;AAAiB5F,QAAAA,MAAM,EAAE6F;AAAzB,UAA8BJ,IAAI,CAAC3B,IAAL,GAAYgC,OAAZ,EAApC;AAEAL,MAAAA,IAAI,CAACpF,IAAL,CAAU,WAAV,EAAwB,aAAY,CAACuF,CAAD,GAAK,CAAE,IAAG,KAAK3D,CAAE,GAArD;AACAsD,MAAAA,IAAI,CAAClF,IAAL,CAAU,GAAV,EAAgB,IAAG,CAACuF,CAAD,GAAK,CAAL,GAAS,EAAG,kBAAiBA,CAAC,GAAG,CAAJ,GAAQ,EAAG,IAAGC,CAAC,GAAG,EAAG,KAAID,CAAC,GAAG,EAAG,GAAhF;AACH,KA9BD;;AA+BA,UAAMG,OAAO,GAAG9F,GAAG,CAACG,MAAJ,CAAW,GAAX,CAAhB;AACA,UAAM4F,SAAS,GAAG/F,GAAG,CAACG,MAAJ,CAAW,MAAX,EACGC,IADH,CACQ,OADR,EACiBN,KADjB,EAEGM,IAFH,CAEQ,QAFR,EAEkBL,MAFlB,EAGGK,IAHH,CAGQ,MAHR,EAGgB,MAHhB,EAIGiD,KAJH,CAIS,gBAJT,EAI0B,SAJ1B,CAAlB;AAOArD,IAAAA,GAAG,CAACsE,EAAJ,CAAO,qBAAP,EAA8B,YAAW;AACrC7B,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,UAAIlC,IAAI,GAAGW,CAAC,CAACsD,MAAF,CAAS9G,EAAE,CAAC6G,KAAH,CAAS,IAAT,EAAe,CAAf,CAAT,CAAX;AACA,YAAM3B,KAAK,GAAGlF,EAAE,CAACqH,QAAH,CAAYlE,CAAC,IAAIA,CAAC,CAACN,IAAnB,EAAyBX,IAAzB,CAA8BsE,SAA9B,EAAyC3D,IAAzC,EAA+C,CAA/C,CAAd;AACA,YAAM0E,CAAC,GAAGf,SAAS,CAACtB,KAAK,GAAG,CAAT,CAAnB;AACA,YAAMsC,CAAC,GAAGhB,SAAS,CAACtB,KAAD,CAAnB,CALqC,CAMrC;;AACA,UAAI/B,CAAC,GAAGqE,CAAC,IAAK3E,IAAI,GAAG0E,CAAC,CAAC1E,IAAT,GAAgB2E,CAAC,CAAC3E,IAAF,GAASA,IAA/B,GAAuC2E,CAAvC,GAA2CD,CAAnD;AACA1E,MAAAA,IAAI,GAAGM,CAAC,CAACN,IAAT;AACA,UAAIE,KAAK,GAAGqB,IAAI,CAAC6C,KAAL,CAAW9D,CAAC,CAACJ,KAAb,CAAZ,CATqC,CAUrC;;AACAoF,MAAAA,OAAO,CACF1F,IADL,CACU,WADV,EACwB,aAAYe,CAAC,CAACX,IAAD,CAAO,IAAGwB,CAAC,CAACtB,KAAD,CAAQ,GADxD,EAEKc,IAFL,CAEU4D,OAFV,EAEoB,GAAE1E,KAAM;kBACtB1C,UAAU,CAACwC,IAAD,CAAO,EAHvB,EAXqC,CAgBrC;AACH,KAjBD;AAmBAR,IAAAA,GAAG,CAACsE,EAAJ,CAAO,qBAAP,EAA8B,MAAMwB,OAAO,CAACtE,IAAR,CAAa4D,OAAb,EAAsB,IAAtB,CAApC;AACH;;AAEDY,EAAAA,MAAM,GAAG;AACL,wBAAO;AAAK,MAAA,GAAG,EAAE,KAAK1H,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAtRoC;;AAyRzC,eAAeL,gBAAf","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport './InteractiveChart.css';\nimport { cleanConfirmedData, clamp } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\n\n\nclass InteractiveChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { userPrediction: null };\n        this.chartRef = React.createRef();\n    }\n    componentDidMount() {\n        //console.log(this.props);\n        this.renderChart();\n    }\n\n    savePrediction(model, data) {\n        fetch('/update/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"model\": model, \"data\": data}),\n        });\n    }\n\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed } = this.props;\n        const model = orgs;\n        //console.log(model);\n        const confirmedResult = cleanConfirmedData(confirmed, Object.keys(forecast));\n        const savePrediction = this.savePrediction;\n        \n        //set up margin, width, height of chart\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right)\n                        .attr(\"height\", height + margin.top + margin.bottom + 50)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        //console.log(svg);\n\n        //line function        \n        /*var drawLine = d3.line()\n            .x(function(d) { return x(d.year) })\n            .y(function(d) { return y(d.debt) })*/\n        //process data\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }))\n        var forecastData = forecast.map(f => {\n            return Object.keys(f).map(key => ({\n                date: d3.timeParse(\"%Y-%m-%d\")(key),\n                value: f[key]\n            }))\n        });\n\n        //get data starting 2020-02-01\n        confirmedData = confirmedData.filter(d => +d.date >= +new Date(\"2020-02-01\"));\n\n        //draw x-axis\n        var predStartDate = confirmedData[0].date;\n        var predLength = 63;\n        var endDate = addDays(new Date(), predLength);\n        var x = d3.scaleTime()\n            .domain([predStartDate, endDate])\n            .range([ 0, width ])\n            .nice();\n         svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        // Add Y axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg.append(\"g\")\n            .call(d3.axisLeft(y));\n        \n        var lineGenerator = d3.line()\n            .curve(d3.curveCatmullRom)\n            \n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis);\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        console.log(confirmedData);\n        var confirmedLine = svg\n            .append(\"path\")\n            .attr(\"id\", \"confirmed\")    \n            .datum(confirmedData)    \n            .attr('d', line);\n        \n        //draw forecasts\n        forecastData.map((f, index) => {\n            console.log(f);\n            svg\n                .append(\"path\")\n                    .attr(\"class\", \"forecast\")\n                    .attr(\"id\", orgs[index])\n                .datum(f)\n                    .attr(\"d\", line);\n        })\n        \n        //draw legend\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(orgs)\n                        .range(d3.schemeSet2);\n\n        var legend = svg.append('div')\n                        .attr(\"id\", \"legend\");\n        legend.selectAll(\"legend\")\n            .data(orgs)\n            .enter()\n            .append(\"circle\")\n                .attr(\"cx\", 100)\n                .attr(\"cy\", function(d,i){ return 100 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 7)\n                .style(\"fill\", function(d){ return color(d)})\n\n\n\n        var predictionData = [];\n        var currDate = confirmedData[confirmedData.length - 1].date;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        var confirmedLastVal = value;\n        for (var i = 0; i < predLength; i++) {            \n            predictionData.push({date: currDate, value: value, defined: defined});\n            currDate = addDays(currDate, 1);\n            defined = 0;\n            value = 0;\n        }\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width;\n        var clickAreaWidth = width - confirmedAreaWidth;\n        //console.log(confirmedLine.node().getBoundingClientRect().left);\n        svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");\n        var clickArea = d3.select(\"#click-area\");\n        \n        var predLine = predLineGenerator\n                    .defined(d => d.defined)\n                    .x(function(d) { return x(d.date) })\n                    .y(function(d) { return y(d.value) })\n       \n        var yourLine = svg.append(\"path\")\n                      .attr(\"id\", \"your-line\");\n        /*var gapLine = svg.append(\"path\")\n                            .attr(\"id\", \"gap-line\");*/\n        \n        var totalData = confirmedData.concat(predictionData);\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, endDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        //var date = x.invert(pos[0]);\n                        //var value = y.invert(pos[1]);\n                        console.log(value);\n                \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date) && (+d3.timeDay.round(d.date) != +predStartDate)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                            predictionData[0].value = confirmedLastVal;\n                            //update totalData everytime predictionData is updated\n                            totalData = confirmedData.concat(predictionData);\n                            /*yourLine.datum(predictionData)\n                                    .attr('d', predLine)*/\n                            var filteredData = predictionData.filter(predLine.defined())\n\n                            yourLine.datum(filteredData)\n                                    .attr('d', predLine)\n                            \n                            /*gapLine.datum(filteredData)\n                                    .attr('d', predLine(filteredData));*/\n                        });\n                    })\n        \n        svg.call(drag)\n\n        //finds the datapoint closest to the mouse (along x)\n        var bisect = () => {\n            const bisectDate = d3.bisector(d => d.date).left;\n            return mx => {\n                const date = x.invert(mx);\n                const index = bisectDate(totalData, date, 1);\n                const a = totalData[index - 1];\n                const b = totalData[index];\n                return b && (date - a.date > b.date - date) ? b : a;\n            };\n        }\n        var callout = (g, value) => {\n            if (!value) return g.style(\"display\", \"none\");\n          \n            g\n                .style(\"display\", null)\n                .style(\"pointer-events\", \"none\")\n                .style(\"font\", \"10px sans-serif\");\n          \n            const path = g.selectAll(\"path\")\n              .data([null])\n              .join(\"path\")\n                .attr(\"fill\", \"white\")\n                .attr(\"stroke\", \"black\");\n          \n            const text = g.selectAll(\"text\")\n              .data([null])\n              .join(\"text\")\n              .call(text => text\n                .selectAll(\"tspan\")\n                .data((value + \"\").split(/\\n/))\n                .join(\"tspan\")\n                  .attr(\"x\", 0)\n                  .attr(\"y\", (d, i) => `${i * 1.1}em`)\n                  .style(\"font-weight\", (_, i) => i ? null : \"bold\")\n                  .text(d => d));\n          \n            const {x, y, width: w, height: h} = text.node().getBBox();\n          \n            text.attr(\"transform\", `translate(${-w / 2},${15 - y})`);\n            path.attr(\"d\", `M${-w / 2 - 10},5H-5l5,-5l5,5H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n        }\n        const tooltip = svg.append(\"g\");\n        const mouseArea = svg.append(\"rect\")\n                            .attr(\"width\", width)\n                            .attr(\"height\", height)\n                            .attr(\"fill\", \"none\")\n                            .style(\"pointer-events\",\"visible\");\n\n\n        svg.on(\"touchmove mousemove\", function() {\n            console.log(\"yep\");\n            var date = x.invert(d3.mouse(this)[0]);\n            const index = d3.bisector(d => d.date).left(totalData, date, 1);\n            const a = totalData[index - 1];\n            const b = totalData[index];\n            //d = the data object corresponding to date and value pointed by the cursors\n            var d = b && (date - a.date > b.date - date) ? b : a;\n            date = d.date;\n            var value = Math.round(d.value);\n            //if (value != 0) {\n            tooltip\n                .attr(\"transform\", `translate(${x(date)},${y(value)})`)\n                .call(callout, `${value}\n                ${formatDate(date)}`);\n\n            //}\n        });\n\n        svg.on(\"touchend mouseleave\", () => tooltip.call(callout, null));\n    }\n        \n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default InteractiveChart;"]},"metadata":{},"sourceType":"module"}