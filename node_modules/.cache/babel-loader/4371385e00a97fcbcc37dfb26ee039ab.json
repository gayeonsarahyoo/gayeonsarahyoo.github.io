{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/Mapportal/index.js\";\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport L from 'leaflet';\nimport { Map, TileLayer, Marker, Popup, GeoJSON } from 'react-leaflet';\nimport countries from './countries.json';\nimport states from './us-states.json';\nconst style = {\n  width: \"100%\",\n  height: \"600px\"\n};\n\nconst getColor = d => {\n  return d > 1000 ? '#800026' : d > 500 ? '#BD0026' : d > 200 ? '#E31A1C' : d > 100 ? '#FC4E2A' : d > 50 ? '#FD8D3C' : d > 20 ? '#FEB24C' : d > 10 ? '#FED976' : '#FFEDA0';\n};\n\nconst mapstyle = feature => {\n  return {\n    fillColor: getColor(feature.properties.bloop),\n    weight: 2,\n    opacity: 1,\n    color: 'white',\n    dashArray: '3',\n    fillOpacity: 0.7\n  };\n};\n\nclass Mapportal extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onEachFeature = (feature, layer) => {\n      layer.bindTooltip(feature.properties.name.toString(), {\n        noHide: true\n      }).openTooltip();\n      layer.on({\n        mouseover: this.highlightFeature,\n        mouseout: this.resetHighlight //click: this.zoomToFeature\n\n      });\n    };\n\n    this.highlightFeature = e => {\n      var layer = e.target;\n      layer.setStyle({\n        weight: 5,\n        color: \"#666\",\n        dashArray: \"\",\n        fillOpacity: 0.7\n      });\n      layer.bringToFront();\n    };\n\n    this.resetHighlight = event => {\n      this.geojson.resetStyle(event.target);\n    };\n  }\n\n  componentDidMount() {\n    var country;\n    this.map = L.map(\"map\", {\n      center: [37.8, -96],\n      zoom: 4,\n      layers: [L.tileLayer(\"https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoicmFjaGVsb21ib2siLCJhIjoiY2tjODZ6c3UzMTh3ZTJyb2JndHN0dXhlOSJ9.h8aubFClamI3kiUsjIgNTg\", {\n        maxZoom: 18,\n        attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"http://mapbox.com\">Mapbox</a>',\n        id: \"mapbox/dark-v10\"\n      })]\n    });\n    this.geojson = L.geoJson(countries, {\n      style: mapstyle,\n      onEachFeature: this.onEachFeature\n    }).addTo(this.map);\n    this.states = L.geoJSON(states, {\n      style: mapstyle,\n      onEachFeature: this.onEachFeature\n    }).addTo(this.map);\n    var overlay = {\n      \"Countries\": this.geojson,\n      \"States\": this.states\n    };\n    L.control.layers(overlay).addTo(this.map);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"map\",\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 12\n      }\n    });\n  } // `component` is now the first argument, since it's passed through the Function.bind method, we'll need to pass it through here to the relevant handlers\n\n\n}\n\nexport default Mapportal; //ReactDOM.render(<Mapportal />, document.getElementById('mapportal'))","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/Mapportal/index.js"],"names":["React","Component","render","L","Map","TileLayer","Marker","Popup","GeoJSON","countries","states","style","width","height","getColor","d","mapstyle","feature","fillColor","properties","bloop","weight","opacity","color","dashArray","fillOpacity","Mapportal","onEachFeature","layer","bindTooltip","name","toString","noHide","openTooltip","on","mouseover","highlightFeature","mouseout","resetHighlight","e","target","setStyle","bringToFront","event","geojson","resetStyle","componentDidMount","country","map","center","zoom","layers","tileLayer","maxZoom","attribution","id","geoJson","addTo","geoJSON","overlay","control"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { render } from 'react-dom'\nimport L from 'leaflet';\nimport {Map, TileLayer, Marker, Popup, GeoJSON} from 'react-leaflet';\nimport countries from './countries.json';\nimport states from './us-states.json';\n\nconst style = {\n  width: \"100%\",\n  height: \"600px\"\n};\n\nconst getColor = (d) => {\n  return d > 1000 ? '#800026' :\n         d > 500  ? '#BD0026' :\n         d > 200  ? '#E31A1C' :\n         d > 100  ? '#FC4E2A' :\n         d > 50   ? '#FD8D3C' :\n         d > 20   ? '#FEB24C' :\n         d > 10   ? '#FED976' :\n                    '#FFEDA0';\n}\n\nconst mapstyle = (feature) => {\n  return {\n    fillColor: getColor(feature.properties.bloop),\n    weight: 2,\n    opacity: 1,\n    color: 'white',\n    dashArray: '3',\n    fillOpacity: 0.7\n  };\n};\nclass Mapportal extends React.Component {\n  componentDidMount() {\n    var country;\n\n\n    this.map = L.map(\"map\", {\n      center: [37.8, -96],\n      zoom: 4,\n      layers: [\n        L.tileLayer(\"https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoicmFjaGVsb21ib2siLCJhIjoiY2tjODZ6c3UzMTh3ZTJyb2JndHN0dXhlOSJ9.h8aubFClamI3kiUsjIgNTg\",\n        {\n          maxZoom: 18,\n          attribution:\n            'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"http://mapbox.com\">Mapbox</a>',\n          id: \"mapbox/dark-v10\"\n        })\n      ]\n    });\n\n \n\n    this.geojson = L.geoJson(countries, {\n      style: mapstyle,\n      onEachFeature: this.onEachFeature\n    }).addTo(this.map);\n\n    this.states = L.geoJSON(states, {\n      style: mapstyle,\n      onEachFeature: this.onEachFeature\n    }).addTo(this.map);\n\n    var overlay = {\n      \"Countries\": this.geojson,\n      \"States\" : this.states\n  };\n  L.control.layers(overlay).addTo(this.map);\n\n  }\n\n  \n\n  onEachFeature = (feature, layer) => {\n    layer.bindTooltip(feature.properties.name.toString(),{noHide:true}).openTooltip();\n    layer.on({\n      mouseover: this.highlightFeature,\n      mouseout: this.resetHighlight\n      //click: this.zoomToFeature\n    });\n  }\n\n  highlightFeature = (e) => {\n    var layer = e.target;\n    layer.setStyle({\n      weight: 5,\n      color: \"#666\",\n      dashArray: \"\",\n      fillOpacity: 0.7\n    });\n\n    layer.bringToFront();\n\n  }\n\n  resetHighlight = (event) => {\n    this.geojson.resetStyle(event.target);\n  \n  }\n\n\n\n  render() {\n    return <div id=\"map\" style={style} />;\n  }\n\n    // `component` is now the first argument, since it's passed through the Function.bind method, we'll need to pass it through here to the relevant handlers\n\n  }\n  \n\nexport default Mapportal;\n//ReactDOM.render(<Mapportal />, document.getElementById('mapportal'))"]},"metadata":{},"sourceType":"module"}