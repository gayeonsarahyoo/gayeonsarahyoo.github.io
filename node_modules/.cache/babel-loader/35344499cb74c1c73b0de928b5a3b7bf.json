{"ast":null,"code":"import _classCallCheck from\"/Users/sarah/Documents/Sarah/Projects/reu/gayeonsarahyoo.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/sarah/Documents/Sarah/Projects/reu/gayeonsarahyoo.github.io/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/sarah/Documents/Sarah/Projects/reu/gayeonsarahyoo.github.io/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/sarah/Documents/Sarah/Projects/reu/gayeonsarahyoo.github.io/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import Chart from'chart.js';import'chartjs-plugin-dragdata';import'chartjs-plugin-zoom';import{getDates,cleanConfirmedData}from'../../utils/data';var ModelsChart=/*#__PURE__*/function(_React$Component){_inherits(ModelsChart,_React$Component);var _super=_createSuper(ModelsChart);function ModelsChart(props){var _this;_classCallCheck(this,ModelsChart);_this=_super.call(this,props);_this.chartRef=React.createRef();return _this;}_createClass(ModelsChart,[{key:\"componentDidMount\",value:function componentDidMount(){this.renderChart();}},{key:\"renderChart\",value:function renderChart(){var _this$props=this.props,data=_this$props.data,orgs=_this$props.orgs,confirmed=_this$props.confirmed,aggregate=_this$props.aggregate;var options={scales:{yAxes:[{ticks:{beginAtZero:true}}]},title:{display:true,text:'All Model Forecasts',fontSize:30},spanGaps:true};var dates=getDates();var datasets=[];// Set colors for each organization\nvar colors={'Columbia':'rgb(172, 204, 230)','Georgia Tech':'rgb(179, 163, 105)','UCLA':'rgb(39, 116, 174)','IHME':'rgb(87, 175, 85)','Youyang Gu':'rgb(196, 129, 14)'};for(var i=0;i<data.length;i++){var modelDates=Object.keys(data[i]);for(var j=0;j<dates.length;j++){if(modelDates.includes(dates[j])==false){data[i][dates[j]]=null;}}// Sort key-value pairs by key (dates)\nvar keys=Object.keys(data[i]);var newDict={};keys.sort();for(var k=0;k<keys.length;k++){var key=keys[k];var value=data[i][key];newDict[key]=value;}data[i]=newDict;// Add each models data to datasets\ndatasets.push({label:orgs[i],data:Object.values(data[i]),borderColor:colors[orgs[i]],borderWidth:3,fill:false,pointBackgroundColor:colors[orgs[i]],pointRadius:4,pointBorderWidth:1,pointHoverRadius:7,pointHoverBorderColor:'black'});}// Add confirmed data to chart\nvar confirmedResult=cleanConfirmedData(confirmed,dates);datasets.push({label:'Confirmed Deaths',data:Object.values(confirmedResult),borderColor:'black',fill:false,pointBackgroundColor:'clear',pointBorderColor:'clear',pointStyle:'dash',pointHoverRadius:7,pointHoverBorderColor:'black',borderDash:[15,10]});// Add aggregate data to chart\nvar aggregateResult=cleanConfirmedData(aggregate,dates);datasets.push({label:'Aggregate Forecast (average)',data:Object.values(aggregateResult),borderColor:'red',borderWidth:3,fill:false,pointBackgroundColor:colors[orgs[i]],pointRadius:4,pointBorderWidth:1,pointHoverRadius:7,pointHoverBorderColor:'black'});// Create chart with all models\nthis.myChart=new Chart(this.chartRef.current,{type:'line',data:{labels:dates,datasets:datasets},options:options});}},{key:\"render\",value:function render(){var _this$props2=this.props,data=_this$props2.data,orgs=_this$props2.orgs;if(!data||!orgs)return'Loading...';return/*#__PURE__*/React.createElement(\"div\",{className:\"chart-container\",style:{position:\"relative\",width:\"80vw\",margin:\"0 10%\"}},/*#__PURE__*/React.createElement(\"canvas\",{ref:this.chartRef}));}}]);return ModelsChart;}(React.Component);export default ModelsChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/gayeonsarahyoo.github.io/src/components/ModelsChart/index.js"],"names":["React","Chart","getDates","cleanConfirmedData","ModelsChart","props","chartRef","createRef","renderChart","data","orgs","confirmed","aggregate","options","scales","yAxes","ticks","beginAtZero","title","display","text","fontSize","spanGaps","dates","datasets","colors","i","length","modelDates","Object","keys","j","includes","newDict","sort","k","key","value","push","label","values","borderColor","borderWidth","fill","pointBackgroundColor","pointRadius","pointBorderWidth","pointHoverRadius","pointHoverBorderColor","confirmedResult","pointBorderColor","pointStyle","borderDash","aggregateResult","myChart","current","type","labels","position","width","margin","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Chart from 'chart.js';\nimport 'chartjs-plugin-dragdata';\nimport 'chartjs-plugin-zoom';\nimport { getDates, cleanConfirmedData } from '../../utils/data'\n\n\nclass ModelsChart extends React.Component {\n    constructor(props) {\n      super(props);\n      this.chartRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.renderChart();\n    }\n  \n    renderChart() {\n      const { data, orgs, confirmed, aggregate } = this.props;\n\n      var options = {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }],\n        },\n        title: {\n          display: true,\n          text: 'All Model Forecasts',\n          fontSize: 30\n        },\n        spanGaps: true\n      };\n\n      const dates = getDates();  \n      var datasets = [];\n      // Set colors for each organization\n      var colors = {\n        'Columbia': 'rgb(172, 204, 230)',\n        'Georgia Tech': 'rgb(179, 163, 105)',\n        'UCLA': 'rgb(39, 116, 174)',\n        'IHME': 'rgb(87, 175, 85)',\n        'Youyang Gu': 'rgb(196, 129, 14)'\n      }\n\n      for (var i = 0; i < data.length; i++) {\n        const modelDates = Object.keys(data[i]);\n        for (var j = 0; j < dates.length; j++) {\n            if (modelDates.includes(dates[j]) == false) {\n                data[i][dates[j]] = null;\n            }\n        }\n\n        // Sort key-value pairs by key (dates)\n        var keys = Object.keys(data[i]);\n        var newDict = {}; \n        keys.sort(); \n        for (var k = 0; k < keys.length; k++) {\n            var key = keys[k];\n            var value = data[i][key];\n            newDict[key] = value;\n        } \n        data[i] = newDict;\n\n        // Add each models data to datasets\n        datasets.push({\n          label: orgs[i],\n          data: Object.values(data[i]),\n          borderColor: colors[orgs[i]],\n          borderWidth: 3,\n          fill: false,\n          pointBackgroundColor: colors[orgs[i]],\n          pointRadius: 4,\n          pointBorderWidth: 1,\n          pointHoverRadius: 7,\n          pointHoverBorderColor: 'black'\n        })\n      }\n\n      // Add confirmed data to chart\n      const confirmedResult = cleanConfirmedData(confirmed, dates);\n      datasets.push({\n        label: 'Confirmed Deaths',\n        data: Object.values(confirmedResult),\n        borderColor: 'black',\n        fill: false,\n        pointBackgroundColor: 'clear',\n        pointBorderColor: 'clear',\n        pointStyle: 'dash',\n        pointHoverRadius: 7,\n        pointHoverBorderColor: 'black',\n        borderDash: [15, 10]\n      })\n\n      // Add aggregate data to chart\n      const aggregateResult = cleanConfirmedData(aggregate, dates);\n      datasets.push({\n        label: 'Aggregate Forecast (average)',\n        data: Object.values(aggregateResult),\n        borderColor: 'red',\n        borderWidth: 3,\n        fill: false,\n        pointBackgroundColor: colors[orgs[i]],\n        pointRadius: 4,\n        pointBorderWidth: 1,\n        pointHoverRadius: 7,\n        pointHoverBorderColor: 'black'\n      })\n  \n      // Create chart with all models\n      this.myChart = new Chart(this.chartRef.current, {\n        type: 'line',\n        data: {\n          labels: dates,\n          datasets: datasets\n        },\n        options: options\n      });\n  \n    }\n  \n    render() {\n        const { data, orgs } = this.props;\n        if (!data || !orgs) return 'Loading...';\n\n        return (\n            <div className=\"chart-container\" style={{position: \"relative\", width: \"80vw\", margin: \"0 10%\"}}>\n                <canvas ref={this.chartRef} />\n            </div>\n        );\n    }\n  }\n\n  export default ModelsChart;"]},"metadata":{},"sourceType":"module"}