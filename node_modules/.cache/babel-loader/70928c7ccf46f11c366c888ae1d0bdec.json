{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/gayeonsarahyoo.github.io/src/containers/ChartContainer/index.js\";\nimport React from 'react';\nimport LineChart from '../../components/LineChart';\nimport ModelsChart from '../../components/ModelsChart';\nimport { cleanConfirmedData, organizeData } from '../../utils/data';\n\nfunction LineCharts({\n  dataSet,\n  orgs,\n  userPrediction,\n  confirmed\n}) {\n  return dataSet.map((data, index) => {\n    return /*#__PURE__*/React.createElement(LineChart, {\n      data: data,\n      org: orgs[index],\n      userPrediction: userPrediction,\n      confirmed: confirmed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 7\n      }\n    });\n  });\n}\n\nclass ChartContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n      orgs: null,\n      confirmed: null,\n      userPrediction: null,\n      aggregate: null\n    };\n  }\n\n  componentDidMount() {\n    fetch('/us-cum-deaths-forecasts').then(res => res.json()).then(data => {\n      const [results, orgs] = organizeData(data);\n      this.setState({\n        data: results,\n        orgs\n      });\n    });\n    fetch('/user-prediction').then(res => res.json()).then(data => {\n      this.setState({\n        userPrediction: data\n      });\n    });\n    fetch('/us-cum-deaths-confirmed').then(res => res.json()).then(data => {\n      this.setState({\n        confirmed: data\n      });\n    });\n    fetch('/us-agg-cum-deaths').then(res => res.json()).then(data => {\n      this.setState({\n        aggregate: data\n      });\n    });\n  }\n\n  render() {\n    //const { data, orgs, userPrediction, confirmed } = this.state;\n    const {\n      data,\n      orgs,\n      confirmed,\n      userPrediction,\n      aggregate\n    } = this.state; //if (!data || !orgs || !userPrediction || !confirmed) return 'Loading...';\n\n    if (!data || !orgs || !confirmed || !userPrediction || !aggregate) return 'Loading...';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chartContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LineCharts, {\n      dataSet: data,\n      orgs: orgs,\n      userPrediction: userPrediction,\n      confirmed: confirmed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ModelsChart, {\n      data: data,\n      orgs: orgs,\n      confirmed: confirmed,\n      aggregate: aggregate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default ChartContainer;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/gayeonsarahyoo.github.io/src/containers/ChartContainer/index.js"],"names":["React","LineChart","ModelsChart","cleanConfirmedData","organizeData","LineCharts","dataSet","orgs","userPrediction","confirmed","map","data","index","ChartContainer","Component","constructor","props","state","aggregate","componentDidMount","fetch","then","res","json","results","setState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,SAASC,kBAAT,EAA6BC,YAA7B,QAAiD,kBAAjD;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA,cAAjB;AAAiCC,EAAAA;AAAjC,CAApB,EAAkE;AAChE,SAAOH,OAAO,CAACI,GAAR,CAAY,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAClC,wBACE,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAED,IAAjB;AAAuB,MAAA,GAAG,EAAEJ,IAAI,CAACK,KAAD,CAAhC;AAAyC,MAAA,cAAc,EAAEJ,cAAzD;AAAyE,MAAA,SAAS,EAAEC,SAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD,GAJM,CAAP;AAKD;;AAED,MAAMI,cAAN,SAA6Bb,KAAK,CAACc,SAAnC,CAA6C;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXN,MAAAA,IAAI,EAAE,IADK;AAEXJ,MAAAA,IAAI,EAAE,IAFK;AAGXE,MAAAA,SAAS,EAAE,IAHA;AAIXD,MAAAA,cAAc,EAAE,IAJL;AAKXU,MAAAA,SAAS,EAAE;AALA,KAAb;AAOD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAAC,0BAAD,CAAL,CAAkCC,IAAlC,CAAuCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA9C,EAA0DF,IAA1D,CAA+DV,IAAI,IAAI;AACrE,YAAM,CAACa,OAAD,EAAUjB,IAAV,IAAkBH,YAAY,CAACO,IAAD,CAApC;AACA,WAAKc,QAAL,CAAc;AAAEd,QAAAA,IAAI,EAAEa,OAAR;AAAiBjB,QAAAA;AAAjB,OAAd;AACD,KAHD;AAIAa,IAAAA,KAAK,CAAC,kBAAD,CAAL,CAA0BC,IAA1B,CAA+BC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAtC,EAAkDF,IAAlD,CAAuDV,IAAI,IAAI;AAC7D,WAAKc,QAAL,CAAc;AAAEjB,QAAAA,cAAc,EAAEG;AAAlB,OAAd;AACD,KAFD;AAGAS,IAAAA,KAAK,CAAC,0BAAD,CAAL,CAAkCC,IAAlC,CAAuCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA9C,EAA0DF,IAA1D,CAA+DV,IAAI,IAAI;AACrE,WAAKc,QAAL,CAAc;AAAEhB,QAAAA,SAAS,EAAEE;AAAb,OAAd;AACD,KAFD;AAGAS,IAAAA,KAAK,CAAC,oBAAD,CAAL,CAA4BC,IAA5B,CAAiCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAxC,EAAoDF,IAApD,CAAyDV,IAAI,IAAI;AAC/D,WAAKc,QAAL,CAAc;AAAEP,QAAAA,SAAS,EAAEP;AAAb,OAAd;AACD,KAFD;AAGD;;AAEDe,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAEf,MAAAA,IAAF;AAAQJ,MAAAA,IAAR;AAAcE,MAAAA,SAAd;AAAyBD,MAAAA,cAAzB;AAAyCU,MAAAA;AAAzC,QAAuD,KAAKD,KAAlE,CAFO,CAIP;;AACA,QAAI,CAACN,IAAD,IAAS,CAACJ,IAAV,IAAkB,CAACE,SAAnB,IAAgC,CAACD,cAAjC,IAAmD,CAACU,SAAxD,EAAmE,OAAO,YAAP;AAEnE,wBACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AACE,MAAA,OAAO,EAAEP,IADX;AAEE,MAAA,IAAI,EAAEJ,IAFR;AAGE,MAAA,cAAc,EAAEC,cAHlB;AAIE,MAAA,SAAS,EAAEC,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAOE,oBAAC,WAAD;AACE,MAAA,IAAI,EAAEE,IADR;AAEE,MAAA,IAAI,EAAEJ,IAFR;AAGE,MAAA,SAAS,EAAEE,SAHb;AAIE,MAAA,SAAS,EAAES,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADF;AAgBD;;AAnD0C;;AAsD7C,eAAeL,cAAf","sourcesContent":["import React from 'react';\nimport LineChart from '../../components/LineChart';\nimport ModelsChart from '../../components/ModelsChart';\nimport { cleanConfirmedData, organizeData } from '../../utils/data';\n\nfunction LineCharts({ dataSet, orgs, userPrediction, confirmed }) {\n  return dataSet.map((data, index) => {\n    return (\n      <LineChart data={data} org={orgs[index]} userPrediction={userPrediction} confirmed={confirmed} />\n     );\n  })\n}\n\nclass ChartContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n      orgs: null,\n      confirmed: null,\n      userPrediction: null,\n      aggregate: null\n    };\n  }\n\n  componentDidMount() {\n    fetch('/us-cum-deaths-forecasts').then(res => res.json()).then(data => {\n      const [results, orgs] = organizeData(data);\n      this.setState({ data: results, orgs });\n    });\n    fetch('/user-prediction').then(res => res.json()).then(data => {\n      this.setState({ userPrediction: data });\n    });\n    fetch('/us-cum-deaths-confirmed').then(res => res.json()).then(data => {\n      this.setState({ confirmed: data });\n    });\n    fetch('/us-agg-cum-deaths').then(res => res.json()).then(data => {\n      this.setState({ aggregate: data });\n    });\n  }\n\n  render() {\n    //const { data, orgs, userPrediction, confirmed } = this.state;\n    const { data, orgs, confirmed, userPrediction, aggregate } = this.state;\n\n    //if (!data || !orgs || !userPrediction || !confirmed) return 'Loading...';\n    if (!data || !orgs || !confirmed || !userPrediction || !aggregate) return 'Loading...';\n\n    return (\n      <div className=\"chartContainer\">\n        <LineCharts\n          dataSet={data}\n          orgs={orgs}\n          userPrediction={userPrediction}\n          confirmed={confirmed}\n        />\n        <ModelsChart \n          data={data} \n          orgs={orgs}\n          confirmed={confirmed}\n          aggregate={aggregate} \n        />\n      </div>\n    );\n  }\n}\n\nexport default ChartContainer;\n"]},"metadata":{},"sourceType":"module"}