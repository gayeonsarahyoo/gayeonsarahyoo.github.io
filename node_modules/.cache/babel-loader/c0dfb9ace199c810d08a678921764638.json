{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './InteractiveChart.css';\nimport { clamp, callout } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\n\nclass InteractiveChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      category: \"us_daily_deaths\"\n    };\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    //console.log(this.props);\n    this.renderChart();\n  } //move to utils\n\n\n  savePrediction(data, category) {\n    fetch('/update/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"data\": data,\n        \"category\": category\n      })\n    });\n  }\n\n  renderChart() {\n    const {\n      forecast,\n      orgs,\n      userPrediction,\n      confirmed,\n      aggregate\n    } = this.props;\n    var predictionData = []; //where we will store formatted userPrediction\n\n    const savePrediction = this.savePrediction;\n    const category = this.state.category;\n    var compiledData = []; //set up margin, width, height of chart\n\n    var legendWidth = 180;\n    var toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        width = 800 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    var svg = d3.select(this.chartRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right + legendWidth).attr(\"height\", height + margin.top + margin.bottom + toolTipHeight).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n\n    var confirmedData = Object.keys(confirmed).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: confirmed[key]\n    }));\n    var forecastData = forecast.map(f => {\n      return Object.keys(f).map(key => ({\n        date: d3.timeParse(\"%Y-%m-%d\")(key),\n        value: f[key]\n      }));\n    });\n    console.log(forecastData);\n    var aggregateData = Object.keys(aggregate).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: aggregate[key]\n    }));\n\n    if (userPrediction) {\n      predictionData = userPrediction.map(p => ({\n        date: d3.timeParse(\"%Y-%m-%d\")(p.date.substring(0, 10)),\n        value: p.value,\n        defined: p.defined\n      }));\n    } //set other dates\n\n\n    var confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\"); //date format: y-m-d\n\n    var predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n\n    var predLength = 365;\n    var predEndDateString = addDays(new Date(), predLength).toISOString().substring(0, 10);\n    var predEndDate = d3.timeParse(\"%Y-%m-%d\")(predEndDateString); //get confirmedData starting from confirmedStartDate\n\n    confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate); //draw x-axis        \n\n    var x = d3.scaleTime().domain([confirmedStartDate, predEndDate]).range([0, width]); //.nice(); //rounds up/down the max and mind of x axis\n\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); //find max val in confirmedData and forecastData to determine the max of y-axis\n\n    var confirmedMax = d3.max(confirmedData, function (d) {\n      return +d.value;\n    });\n    var forecastMax = 0;\n    forecastData.map(f => {\n      var currMax = d3.max(f, d => {\n        return d.value;\n      });\n      forecastMax = currMax > forecastMax ? currMax : forecastMax;\n    });\n    var yAxisMax = Math.max(confirmedMax, forecastMax); //draw y-axis\n\n    var y = d3.scaleLinear().domain([0, yAxisMax]).range([height, 0]).nice();\n    svg.append(\"g\").call(d3.axisLeft(y)); //list of data displayed in graph - for legend\n\n    var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]); //color function that assigns random colors to each data\n\n    var color = d3.scaleOrdinal().domain(legendString).range(d3.schemeSet2); //draw legend\n\n    var legend = svg.append('g').attr(\"id\", \"legend\");\n    var size = 10;\n    legend.selectAll(\"rect\").data(legendString).enter().append(\"circle\").attr('cx', width + 30).attr(\"cy\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .attr(\"r\", 6) //.attr(\"width\", size)\n    //.attr(\"height\", size)\n    .style(\"fill\", function (d) {\n      return color(d);\n    });\n    legend.selectAll(\"labels\").data(legendString).enter().append(\"text\").attr(\"x\", width + 45).attr(\"y\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .style(\"fill\", function (d) {\n      return color(d);\n    }).text(function (d) {\n      return d;\n    }).attr(\"text-anchor\", \"left\").style(\"alignment-baseline\", \"middle\"); //create line generator for confirmed/forecast data and prediction data\n\n    var lineGenerator = d3.line().curve(d3.curveCatmullRom); //curve that goes through all data points\n\n    var predLineGenerator = d3.line().curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n    //d3.curveMonotoneX\n    //d3.curveBasis\n    //d3.curveCardinal\n    //function that draws curve\n\n    var line = lineGenerator.x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }); //display confirmed data\n\n    var confirmedLine = svg.append(\"path\").attr(\"id\", \"confirmed\").datum(confirmedData).attr('d', line).attr(\"stroke\", color(legendString[legendString.length - 2])); //display aggregate data\n\n    var confirmedLine = svg.append(\"path\").attr(\"id\", \"confirmed\").datum(aggregateData).attr('d', line).attr(\"stroke\", 'black'); //display forecast data\n\n    forecastData.map((f, index) => {\n      svg.append(\"path\").attr(\"class\", \"forecast\").attr(\"id\", orgs[index]).style(\"stroke\", color(orgs[index])).datum(f).attr(\"d\", line);\n    }); //function that generates the prediction curve\n\n    var predLine = predLineGenerator.defined(d => d.defined).x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }); //append path for prediction data\n\n    var yourLine = svg.append(\"path\").attr(\"id\", \"your-line\"); //variables used to initialize user prediction data if it doesn't exist in the db\n\n    var currDate = predStartDate;\n    var defined = true;\n    var value = confirmedData[confirmedData.length - 1].value;\n    var confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n    //check if userPrediction already exists in db\n\n    if (userPrediction) {\n      predictionData = predictionData.filter(d => +d.date >= +predStartDate && +d.date <= +predEndDate);\n      predictionData[0].value = value;\n      defined = false;\n      value = 0;\n      currDate = addDays(predictionData[predictionData.length - 1].date, 1);\n    }\n\n    while (+currDate <= +predEndDate) {\n      predictionData.push({\n        date: currDate,\n        value: value,\n        defined: defined\n      });\n      currDate = addDays(currDate, 1);\n      defined = 0;\n      value = 0;\n    }\n\n    var filteredData = null;\n    var totalData = confirmedData.concat(predictionData);\n\n    if (userPrediction) {\n      filteredData = predictionData.filter(predLine.defined());\n      yourLine.datum(filteredData).attr('d', predLine).style(\"stroke\", color(legendString[legendString.length - 1]));\n    } //append new rect  \n\n\n    const mouseArea = svg.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"none\").style(\"pointer-events\", \"visible\"); //append click area rect\n\n    var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n\n    var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n\n    svg.append(\"rect\").attr(\"id\", \"click-area\").attr(\"width\", clickAreaWidth).attr(\"height\", height).attr(\"transform\", \"translate (\" + confirmedAreaWidth + \" 0)\").attr(\"fill\", \"none\").style(\"pointer-events\", \"visible\"); //var clickArea = d3.select(\"#click-area\");\n    //append circle at the end of confirmed curve\n\n    var selectCircle = svg.append(\"g\").attr(\"class\", \"pointer\");\n    var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n    pointerCircles.map(c => {\n      selectCircle.append(\"circle\").attr(\"class\", c).attr(\"cx\", x(confirmedData[confirmedData.length - 1].date)).attr(\"cy\", y(confirmedData[confirmedData.length - 1].value));\n    });\n\n    if (!userPrediction) {\n      //append draw your guess text\n      svg.append(\"text\").attr(\"id\", \"draw-guess\").attr(\"x\", confirmedAreaWidth + clickAreaWidth / 2).attr(\"y\", height - 60).attr(\"text-anchor\", \"middle\").style(\"font-size\", \"16px\").text(\"Draw your guess\"); //append circle at the end of confirmed curve\n\n      var selectCircle = svg.append(\"g\").attr(\"class\", \"pointer\");\n      var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n      pointerCircles.map(c => {\n        selectCircle.append(\"circle\").attr(\"class\", c).attr(\"cx\", x(confirmedData[confirmedData.length - 1].date)).attr(\"cy\", y(confirmedData[confirmedData.length - 1].value));\n      });\n    }\n\n    var drag = d3.drag().on(\"drag\", function () {\n      tooltip.call(callout, null); //hide tooltip\n\n      var pos = d3.mouse(this);\n      var date = clamp(predStartDate, predEndDate, x.invert(x));\n      var value = clamp(0, yAxisMax, y.invert(pos[1])); //var date = x.invert(x);\n      //var value = y.invert(pos[1]);\n\n      predictionData.forEach(function (d) {\n        if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)) {\n          d.value = value;\n          d.defined = true;\n        }\n\n        predictionData[0].value = confirmedLastVal; //make sure the prediction curve is always connected to the confirmed curve\n        //update totalData everytime predictionData is updated\n\n        totalData = confirmedData.concat(predictionData);\n        /*yourLine.datum(predictionData)\n                .attr('d', predLine)*/\n\n        var filteredData = predictionData.filter(predLine.defined());\n        yourLine.datum(filteredData).attr('d', predLine).style(\"stroke\", color(legendString[legendString.length - 1]));\n      });\n    }).on(\"end\", function () {\n      savePrediction(predictionData, category);\n    });\n    svg.call(drag); //finds the datapoint closest to the mouse (along x)\n\n    /*var bisect = () => {\n        const bisectDate = d3.bisector(d => d.date).left;\n        return mx => {\n            const date = x.invert(mx);\n            const index = bisectDate(totalData, date, 1);\n            const a = totalData[index - 1];\n            const b = totalData[index];\n            return b && (date - a.date > b.date - date) ? b : a;\n        };\n    }*/\n\n    const tooltipArea = svg.append(\"g\").attr(\"class\", \"tooltip\");\n    tooltipArea.append(\"path\") //vertical line\n    .attr(\"id\", \"tooltip-line\").style(\"stroke\", \"black\").style(\"stroke-width\", \"0.5px\").style(\"opacity\", \"0\");\n    var mousePerLine = tooltipArea.selectAll(\".mouse-per-line\").data(legendString).enter().append(\"g\").attr(\"class\", \"mouse-per-line\");\n    mousePerLine.append(\"circle\").attr(\"r\", 2).style(\"stroke\", function (d) {\n      return color(d);\n    }).style(\"fill\", \"none\").style(\"stroke-width\", \"1px\").style(\"opacity\", \"0\");\n    mousePerLine.append(\"text\").attr(\"transform\", \"translate(10,3)\");\n    tooltipArea.append(\"svg:rect\").attr('width', width).attr('height', height).attr('fill', 'none').attr('pointer-events', 'all').on('mouseout', function () {\n      // on mouse out hide line, circles and text\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"0\");\n    }).on('mouseover', function () {\n      // on mouse in show line, circles and text\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"1\");\n    }).on('mousemove', function () {\n      // mouse moving over canvas\n      console.log(\"yes\");\n      var mouse = d3.mouse(this);\n      var x = mouse[0];\n      var y = mouse[1];\n      d3.select(\"#tooltip-line\").attr(\"d\", function () {\n        var d = \"M\" + x + \",\" + height;\n        d += \" \" + x + \",\" + 0;\n        return d;\n      });\n      d3.selectAll(\".mouse-per-line\").attr(\"transform\", function (d, i) {\n        var xDate = x.invert(mouse[0]),\n            bisect = d3.bisector(function (d) {\n          return d.date;\n        }).right;\n        idx = bisect(d.values, xDate);\n        var beginning = 0,\n            end = lines[i].getTotalLength(),\n            target = null;\n\n        while (true) {\n          target = Math.floor((beginning + end) / 2);\n          pos = lines[i].getPointAtLength(target);\n\n          if ((target === end || target === beginning) && pos.x !== mouse[0]) {\n            break;\n          }\n\n          if (pos.x > mouse[0]) end = target;else if (pos.x < mouse[0]) beginning = target;else break; //position found\n        }\n\n        d3.select(this).select('text').text(y.invert(pos.y).toFixed(2));\n        return \"translate(\" + mouse[0] + \",\" + pos.y + \")\";\n      });\n    }); ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    const tooltip = svg.append(\"g\");\n    /*svg.on(\"touchmove mousemove\", function() {\n        console.log(\"working\");\n        var date = x.invert(d3.mouse(this)[0]);\n        const index = d3.bisector(d => d.date).left(totalData, date, 1);\n        const a = totalData[index - 1];\n        const b = totalData[index];\n        //d = the data object corresponding to date and value pointed by the cursors\n        var d = b && (date - a.date > b.date - date) ? b : a;\n        date = d.date;\n        var defined = d.defined;\n        var value = Math.round(d.value);\n        if (defined != 0) {\n            tooltip\n                .attr(\"transform\", `translate(${x(date)},${y(value)})`)\n                .call(callout, `${value}\n                ${formatDate(date)}`);\n        }\n    });*/\n    //svg.on(\"touchend mouseleave\", () => tooltip.call(callout, null));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default InteractiveChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js"],"names":["React","Component","d3","clamp","callout","elementType","addDays","formatDate","InteractiveChart","constructor","props","state","category","chartRef","createRef","componentDidMount","renderChart","savePrediction","data","fetch","method","headers","body","JSON","stringify","forecast","orgs","userPrediction","confirmed","aggregate","predictionData","compiledData","legendWidth","toolTipHeight","margin","top","right","bottom","left","width","height","svg","select","current","append","attr","confirmedData","Object","keys","map","key","date","timeParse","value","forecastData","f","console","log","aggregateData","p","substring","defined","confirmedStartDate","predStartDate","length","predLength","predEndDateString","Date","toISOString","predEndDate","filter","d","x","scaleTime","domain","range","call","axisBottom","confirmedMax","max","forecastMax","currMax","yAxisMax","Math","y","scaleLinear","nice","axisLeft","legendString","concat","color","scaleOrdinal","schemeSet2","legend","size","selectAll","enter","i","style","text","lineGenerator","line","curve","curveCatmullRom","predLineGenerator","curveBasis","confirmedLine","datum","index","predLine","yourLine","currDate","confirmedLastVal","push","filteredData","totalData","mouseArea","confirmedAreaWidth","node","getBoundingClientRect","clickAreaWidth","selectCircle","pointerCircles","c","drag","on","tooltip","pos","mouse","invert","forEach","timeDay","round","tooltipArea","mousePerLine","xDate","bisect","bisector","idx","values","beginning","end","lines","getTotalLength","target","floor","getPointAtLength","toFixed","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport './InteractiveChart.css';\nimport { clamp, callout } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\n\n\nclass InteractiveChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\" };\n        this.chartRef = React.createRef();\n    }\n    componentDidMount() {\n        //console.log(this.props);\n        this.renderChart();\n    }\n\n    //move to utils\n    savePrediction(data, category) {\n        fetch('/update/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"data\": data, \"category\": category}),\n        });\n    }\n\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = [];//where we will store formatted userPrediction\n        const savePrediction = this.savePrediction;\n        const category = this.state.category;\n        var compiledData = [];\n        //set up margin, width, height of chart\n        var legendWidth = 180;\n        var toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n        \n        var forecastData = forecast.map(f => {\n            return Object.keys(f).map(key => ({\n                date: d3.timeParse(\"%Y-%m-%d\")(key),\n                value: f[key]\n            }))\n        });\n        console.log(forecastData)\n\n        var aggregateData = Object.keys(aggregate).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: aggregate[key]\n        }));\n        \n\n        if(userPrediction) {\n            predictionData = userPrediction.map(p => ({\n                date: d3.timeParse(\"%Y-%m-%d\")((p.date).substring(0,10)),\n                value: p.value,\n                defined: p.defined\n                })\n            );\n        }\n\n        //set other dates\n        var confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\"); //date format: y-m-d\n        var predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n        var predLength = 365;\n        var predEndDateString = addDays(new Date(), predLength).toISOString().substring(0, 10);\n        var predEndDate = d3.timeParse(\"%Y-%m-%d\")(predEndDateString)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis        \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n         svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg.append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeSet2);\n\n         //draw legend\n        var legend = svg.append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        legend.selectAll(\"rect\")\n            .data(legendString)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', width + 30)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", function(d){ return color(d)})\n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", width + 45)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .style(\"fill\", function(d){ return color(d)})\n                .text(function(d){ return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            .curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //display confirmed data\n        var confirmedLine = svg\n            .append(\"path\")\n            .attr(\"id\", \"confirmed\")    \n            .datum(confirmedData)    \n            .attr('d', line)\n            .attr(\"stroke\", color(legendString[legendString.length - 2]))\n\n        //display aggregate data\n        var confirmedLine = svg\n            .append(\"path\")\n            .attr(\"id\", \"confirmed\")    \n            .datum(aggregateData)    \n            .attr('d', line)\n            .attr(\"stroke\", 'black')\n        \n        //display forecast data\n        forecastData.map((f, index) => {\n            svg\n                .append(\"path\")\n                    .attr(\"class\", \"forecast\")\n                    .attr(\"id\", orgs[index])\n                    .style(\"stroke\", color(orgs[index]))\n                .datum(f)\n                    .attr(\"d\", line);\n        })\n        \n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = svg.append(\"path\")\n                .attr(\"id\", \"your-line\");\n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        var confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n\n        //check if userPrediction already exists in db\n        if (userPrediction) {\n            predictionData = predictionData.filter(d => (+d.date >= +predStartDate) && (+d.date <= +predEndDate));\n            predictionData[0].value = value;\n            defined = false;\n            value = 0;\n            currDate = addDays(predictionData[predictionData.length - 1].date, 1);\n        }\n        \n        while (+currDate <= +predEndDate) {            \n            predictionData.push({date: currDate, value: value, defined: defined});\n            currDate = addDays(currDate, 1);\n            defined = 0;\n            value = 0;\n        }\n        var filteredData = null;\n        var totalData = confirmedData.concat(predictionData);\n\n        if(userPrediction) {\n            filteredData = predictionData.filter(predLine.defined())\n            yourLine.datum(filteredData)\n                    .attr('d', predLine)\n                    .style(\"stroke\", color(legendString[legendString.length - 1]))\n            }\n    //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append circle at the end of confirmed curve\n        var selectCircle = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"pointer\")\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n            selectCircle.append(\"circle\")\n                        .attr(\"class\", c)\n                        .attr(\"cx\", x(confirmedData[confirmedData.length - 1].date))\n                        .attr(\"cy\", y(confirmedData[confirmedData.length - 1].value))\n        })\n\n        if(!userPrediction) {\n            //append draw your guess text\n            svg.append(\"text\")\n                .attr(\"id\", \"draw-guess\")\n                .attr(\"x\", confirmedAreaWidth + (clickAreaWidth / 2))             \n                .attr(\"y\", height - 60)\n                .attr(\"text-anchor\", \"middle\")  \n                .style(\"font-size\", \"16px\") \n                .text(\"Draw your guess\");\n            //append circle at the end of confirmed curve\n            var selectCircle = svg\n                                    .append(\"g\")\n                                    .attr(\"class\", \"pointer\")\n            var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n            pointerCircles.map((c) => {\n            selectCircle.append(\"circle\")\n                .attr(\"class\", c)\n                .attr(\"cx\", x(confirmedData[confirmedData.length - 1].date))\n                .attr(\"cy\", y(confirmedData[confirmedData.length - 1].value))\n            })\n        }\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        tooltip.call(callout, null); //hide tooltip\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(x));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        //var date = x.invert(x);\n                        //var value = y.invert(pos[1]);\n                \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                            predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                            //update totalData everytime predictionData is updated\n                            totalData = confirmedData.concat(predictionData);\n                            /*yourLine.datum(predictionData)\n                                    .attr('d', predLine)*/\n                            var filteredData = predictionData.filter(predLine.defined())\n\n                            yourLine.datum(filteredData)\n                                    .attr('d', predLine)\n                                    .style(\"stroke\", color(legendString[legendString.length - 1]))\n\n                        });\n                    })\n                    .on(\"end\", function () {\n                        savePrediction(predictionData, category);\n                    });\n        \n        svg.call(drag)\n\n        //finds the datapoint closest to the mouse (along x)\n        /*var bisect = () => {\n            const bisectDate = d3.bisector(d => d.date).left;\n            return mx => {\n                const date = x.invert(mx);\n                const index = bisectDate(totalData, date, 1);\n                const a = totalData[index - 1];\n                const b = totalData[index];\n                return b && (date - a.date > b.date - date) ? b : a;\n            };\n        }*/\n\n\n        const tooltipArea = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n                    .attr(\"id\", \"tooltip-line\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"0.5px\")\n                    .style(\"opacity\", \"0\");\n        \n        var mousePerLine = tooltipArea\n                                        .selectAll(\".mouse-per-line\")\n                                        .data(legendString)\n                                        .enter()\n                                        .append(\"g\")\n                                        .attr(\"class\", \"mouse-per-line\");\n        \n        mousePerLine.append(\"circle\")\n                        .attr(\"r\", 2)\n                        .style(\"stroke\", function(d) {\n                            return color(d);\n                        })\n                        .style(\"fill\", \"none\")\n                        .style(\"stroke-width\", \"1px\")\n                        .style(\"opacity\", \"0\");\n        mousePerLine.append(\"text\")\n                    .attr(\"transform\", \"translate(10,3)\");\n        tooltipArea\n                    .append(\"svg:rect\")\n                    .attr('width', width)\n                    .attr('height', height)\n                    .attr('fill', 'none')\n                    .attr('pointer-events', 'all')\n                    .on('mouseout', function() { // on mouse out hide line, circles and text\n                        d3.select(\"#tooltip-line\")\n                          .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                          .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line text\")\n                          .style(\"opacity\", \"0\");\n                    })\n                    .on('mouseover', function() { // on mouse in show line, circles and text\n                        d3.select(\"#tooltip-line\")\n                          .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                          .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                          .style(\"opacity\", \"1\");\n                    })\n                    .on('mousemove', function() { // mouse moving over canvas\n                        console.log(\"yes\")\n                        var mouse = d3.mouse(this);\n                        var x = mouse[0];\n                        var y = mouse[1];\n                        d3\n                            .select(\"#tooltip-line\")\n                            .attr(\"d\", function() {\n                                var d = \"M\" + x + \",\" + height;\n                                d += \" \" + x + \",\" + 0;\n                                return d;\n                            });\n                        d3.\n                            selectAll(\".mouse-per-line\")\n                            .attr(\"transform\", function(d, i) {\n                                var xDate = x.invert(mouse[0]),\n                                    bisect = d3.bisector(function(d) { return d.date; }).right;\n                                    idx = bisect(d.values, xDate);\n                                \n                                var beginning = 0,\n                                    end = lines[i].getTotalLength(),\n                                    target = null;\n                    \n                                while (true){\n                                    target = Math.floor((beginning + end) / 2);\n                                    pos = lines[i].getPointAtLength(target);\n                                    if ((target === end || target === beginning) && pos.x !== mouse[0]) {\n                                        break;\n                                    }\n                                    if (pos.x > mouse[0])      end = target;\n                                    else if (pos.x < mouse[0]) beginning = target;\n                                    else break; //position found\n                                }\n                                \n                                d3.select(this).select('text')\n                                .text(y.invert(pos.y).toFixed(2));\n                                \n                                return \"translate(\" + mouse[0] + \",\" + pos.y +\")\";\n                        });\n                    })\n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        const tooltip = svg\n                            .append(\"g\")\n\n        /*svg.on(\"touchmove mousemove\", function() {\n            console.log(\"working\");\n            var date = x.invert(d3.mouse(this)[0]);\n            const index = d3.bisector(d => d.date).left(totalData, date, 1);\n            const a = totalData[index - 1];\n            const b = totalData[index];\n            //d = the data object corresponding to date and value pointed by the cursors\n            var d = b && (date - a.date > b.date - date) ? b : a;\n            date = d.date;\n            var defined = d.defined;\n            var value = Math.round(d.value);\n            if (defined != 0) {\n                tooltip\n                    .attr(\"transform\", `translate(${x(date)},${y(value)})`)\n                    .call(callout, `${value}\n                    ${formatDate(date)}`);\n            }\n        });*/\n\n        //svg.on(\"touchend mouseleave\", () => tooltip.call(callout, null));\n    }\n        \n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default InteractiveChart;"]},"metadata":{},"sourceType":"module"}