{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { cleanConfirmedData } from '../../utils/data';\nimport { elementType } from 'prop-types';\n\nclass InteractiveChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userPrediction: null\n    };\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    //console.log(this.props);\n    this.renderChart();\n  }\n\n  savePrediction(model, data) {\n    fetch('/update/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"model\": model,\n        \"data\": data\n      })\n    });\n  }\n\n  renderChart() {\n    const {\n      forecast,\n      org,\n      userPrediction,\n      confirmed\n    } = this.props;\n    console.log(confirmed);\n    const model = org; //console.log(model);\n\n    const confirmedResult = cleanConfirmedData(confirmed, Object.keys(forecast));\n    const savePrediction = this.savePrediction; //set up margin, width, height of chart\n\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        width = 800 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    var svg = d3.select(this.chartRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); //console.log(svg);\n    //line function        \n\n    /*var drawLine = d3.line()\n        .x(function(d) { return x(d.year) })\n        .y(function(d) { return y(d.debt) })*/\n    //process data\n\n    var data = Object.keys(confirmed).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: confirmed[key]\n    })); //draw x-axis\n\n    var x = d3.scaleTime().domain(d3.extent(data, function (d) {\n      return d.date;\n    })).range([0, width]).nice();\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Add Y axis\n\n    var y = d3.scaleLinear().domain([0, d3.max(data, function (d) {\n      return +d.value;\n    })]).range([height, 0]).nice();\n    svg.append(\"g\").call(d3.axisLeft(y));\n    data.filter(d => +d.date >= +new Date(\"2020-02-01\"));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default InteractiveChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js"],"names":["React","Component","d3","cleanConfirmedData","elementType","InteractiveChart","constructor","props","state","userPrediction","chartRef","createRef","componentDidMount","renderChart","savePrediction","model","data","fetch","method","headers","body","JSON","stringify","forecast","org","confirmed","console","log","confirmedResult","Object","keys","margin","top","right","bottom","left","width","height","svg","select","current","append","attr","map","key","date","timeParse","value","x","scaleTime","domain","extent","d","range","nice","call","axisBottom","y","scaleLinear","max","axisLeft","filter","Date","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { cleanConfirmedData } from '../../utils/data';\nimport { elementType } from 'prop-types';\n\n\nclass InteractiveChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { userPrediction: null };\n        this.chartRef = React.createRef();\n    }\n    componentDidMount() {\n        //console.log(this.props);\n        this.renderChart();\n    }\n\n    savePrediction(model, data) {\n        fetch('/update/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"model\": model, \"data\": data}),\n        });\n    }\n\n    renderChart() {\n        const { forecast, org, userPrediction, confirmed } = this.props;\n        console.log(confirmed);\n        const model = org;\n        //console.log(model);\n        const confirmedResult = cleanConfirmedData(confirmed, Object.keys(forecast));\n        const savePrediction = this.savePrediction;\n        \n        //set up margin, width, height of chart\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right)\n                        .attr(\"height\", height + margin.top + margin.bottom)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\")\n        //console.log(svg);\n\n        //line function        \n        /*var drawLine = d3.line()\n            .x(function(d) { return x(d.year) })\n            .y(function(d) { return y(d.debt) })*/\n        //process data\n        var data = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }))\n        //draw x-axis\n        var x = d3.scaleTime()\n            .domain(d3.extent(data, function(d) { return d.date; }))\n            .range([ 0, width ])\n            .nice();\n         svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x));\n      // Add Y axis\n        var y = d3.scaleLinear()\n            .domain([0, d3.max(data, function(d) { return +d.value; })])\n            .range([ height, 0 ])\n            .nice();\n         svg.append(\"g\")\n            .call(d3.axisLeft(y));\n        \n        data.filter(d => +d.date >= +new Date(\"2020-02-01\"));\n    }\n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default InteractiveChart;"]},"metadata":{},"sourceType":"module"}