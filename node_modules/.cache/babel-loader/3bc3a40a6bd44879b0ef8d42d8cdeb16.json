{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/UserPredictionChart/index.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './UserPredictionChart.css';\nimport { getMostRecentPrediction, sortDictByDate, sortStringDates } from '../../utils/data';\n\nclass UserPredictionChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      category: \"us_daily_deaths\"\n    };\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const userStatus = this.props.userStatus;\n    console.log(userStatus);\n\n    if (userStatus['logged in']) {\n      this.renderChart();\n    } else {\n      this.chartRef.current.innerHTML = \"Please log in\";\n    }\n  }\n\n  renderChart() {\n    const {\n      forecast,\n      orgs,\n      userPrediction,\n      confirmed,\n      aggregate\n    } = this.props;\n    var predictionData = {}; //where we will store formatted userPrediction\n\n    var mostRecentPred = [];\n    const category = this.state.category;\n    var compiledData = []; //IMPORTANT BOUNDARIES// \n\n    const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\");\n    var confirmedEndDate = null;\n    const predLength = 155;\n    var predEndDate = null;\n    const valueMax = 5000; //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n\n    var confirmedData = Object.keys(confirmed).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: confirmed[key]\n    }));\n    var confirmedEndDate = confirmedData[confirmedData.length - 1].date;\n    predEndDate = d3.timeDay.offset(confirmedEndDate, predLength); //store userPrediction in predictionData if it exists; parse dates and store as d3 date objects\n\n    if (Object.keys(userPrediction).length > 0) {\n      Object.keys(userPrediction).map(p => {\n        predictionData[p] = userPrediction[p].map(d => ({\n          date: d3.timeParse(\"%Y-%m-%d\")(d.date.substring(0, 10)),\n          value: d.value,\n          defined: d.defined\n        }));\n      });\n      predictionData = sortDictByDate(predictionData); //get most recent prediction\n\n      var dates = sortStringDates(Object.keys(userPrediction));\n      const mostRecentPred = predictionData[dates[dates.length - 1]];\n      console.log(mostRecentPred);\n      predEndDate = mostRecentPred[mostRecentPred.length - 1].date; //push to compiledData\n\n      console.log(dates[0]);\n      console.log(d3.timeFormat(\"%B %d, %Y\")(dates[0]));\n    }\n\n    compiledData = [confirmedData, mostRecentPred]; /////////////////////////////////////////////////DRAW CHART//////////////////////////////\n    //set up margin, width, height of chart\n\n    const legendWidth = 180;\n    const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n\n    const contextHeight = 100;\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        width = 800 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    var svg = d3.select(this.chartRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right + legendWidth).attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    var x = d3.scaleTime().domain([confirmedStartDate, predEndDate]).range([0, width]);\n    var xAxis = svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x));\n    var y = d3.scaleLinear().domain([0, valueMax]).range([height, 0]);\n    var yAxis = svg.append(\"g\").call(d3.axisLeft(y)); //DRAW LEGEND//\n\n    const legendString = [\"Daily Confirmed Deaths\", \"User Prediction\"];\n    const color = d3.scaleOrdinal().domain(legendString).range(d3.schemeTableau10);\n    const legend = svg.append('g').attr(\"id\", \"legend\");\n    legend.selectAll(\"rect\").data(legendString).enter().append(\"circle\").attr('cx', width + 30).attr(\"cy\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .attr(\"r\", 6) //.attr(\"width\", size)\n    //.attr(\"height\", size)\n    .style(\"fill\", function (d) {\n      return color(d);\n    });\n    legend.selectAll(\"labels\").data(legendString).enter().append(\"text\").attr(\"x\", width + 45).attr(\"y\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .style(\"fill\", function (d) {\n      return color(d);\n    }).text(function (d) {\n      return d;\n    }).attr(\"text-anchor\", \"left\").style(\"alignment-baseline\", \"middle\"); //DRAW TODAY LINE//\n\n    const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0, 10));\n    console.log(today);\n    var todayMarker = svg.append(\"g\").attr(\"id\", \"today-marker\");\n    todayMarker.append(\"line\").attr(\"id\", \"today-line\").attr(\"x1\", x(today)).attr(\"x2\", x(today)).attr(\"y1\", 0).attr(\"y2\", height).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1).attr(\"stroke-dasharray\", \"8, 8\");\n    todayMarker.append(\"text\").attr(\"id\", \"today-text\").attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`).text(\"Today\").style(\"text-anchor\", \"end\"); //SET UP CLIP PATH//\n\n    var mainClip = svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\", \"main-clip\").append(\"svg:rect\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", 0).attr(\"y\", 0);\n    const mainArea = svg.append(\"g\").attr(\"clip-path\", \"url(#main-clip)\"); //SET UP CURVES//\n\n    const lineGenerator = d3.line().curve(d3.curveCatmullRom);\n    const predLineGenerator = d3.line().curve(d3.curveBasis);\n    const line = lineGenerator.x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    });\n    const predLine = predLineGenerator.defined(d => d.defined).x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }); //DRAW CURVES//\n\n    var confirmedCurve = mainArea.append(\"path\").attr(\"id\", \"confirmed\").attr(\"class\", \"line\").datum(confirmedData).attr(\"d\", line).attr(\"stroke\", color(legendString[0]));\n    var predCurve = mainArea.append(\"path\").attr(\"id\", \"prediction\").attr(\"class\", \"line\").datum(mostRecentPred.filter(predLine.defined())).attr(\"d\", predLine).attr(\"stroke\", color(legendString[1])); //SET UP TOOLTIP//\n\n    const tooltip = svg.append(\"g\").attr(\"class\", \"tooltip\");\n    tooltip.append(\"path\").attr(\"id\", \"tooltip-line\").style(\"stroke\", \"black\").style(\"stroke-width\", \"0.5px\").style(\"display\", \"none\");\n    var mousePerLine = tooltip.selectAll(\".mouse-per-line\").data(compiledData).enter().append(\"g\").attr(\"class\", \"mouse-per-line\");\n    mousePerLine.append(\"circle\").attr(\"r\", 2).style(\"stroke\", function (d, index) {\n      return color(legendString[index]);\n    }).attr(\"id\", \"circle\").style(\"fill\", \"none\").style(\"stroke-width\", \"1px\").style(\"display\", \"none\");\n    mousePerLine.append(\"text\").attr(\"id\", \"value\").attr(\"transform\", \"translate(10,3)\");\n    mousePerLine.append(\"text\").attr(\"id\", \"date\").attr(\"text-anchor\", \"end\").attr(\"transform\", \"rotate(-90)\");\n    svg.append(\"svg:rect\").attr('width', width).attr('height', height).attr(\"id\", \"interactive-area\").attr('fill', 'none').attr('pointer-events', 'all').style(\"cursor\", \"pointer\").on('mouseout', function () {\n      // on mouse out hide line, circles and text\n      d3.select(\"#tooltip-line\").style(\"display\", \"none\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"display\", \"none\");\n      d3.selectAll(\".mouse-per-line text\").style(\"display\", \"none\");\n    })\n    /*.on('mouseover', function() { // on mouse in show line, circles and text\n        d3.select(\"#tooltip-line\")\n            .style(\"opacity\", \"1\");\n        d3.selectAll(\".mouse-per-line circle\")\n            .style(\"opacity\", \"1\");\n        d3.selectAll(\".mouse-per-line text\")\n            .style(\"opacity\", \"1\")\n    })*/\n    .on('mousemove', function () {\n      // mouse moving over canvas\n      var todayDate = new Date();\n      todayDate = d3.timeParse(\"%Y-%m-%d\")(todayDate.toISOString().substring(0, 10));\n      var date = x.invert(d3.mouse(this)[0]);\n\n      if (predictionData.length == 0) {\n        return;\n      }\n\n      if (+date > +todayDate) {\n        date = todayDate;\n      }\n\n      const index = d3.bisectRight(dates, date);\n\n      if (predictionData[date]) {\n        console.log(\"exists\");\n        svg.select(\"#prediction\").datum(predictionData[date].filter(predLine.defined())).attr(\"d\", predLine);\n        compiledData[1] = predictionData[date];\n      } else {\n        if (index == 0) {\n          svg.select(\"#prediction\").datum([]).attr(\"d\", predLine);\n          compiledData[1] = [];\n        } else {\n          var newDate = dates[index - 1];\n          console.log(+predictionData[newDate][0].date, +date);\n          var pred = predictionData[newDate].filter(d => +d.date >= +date);\n          console.log(pred);\n          svg.select(\"#prediction\").datum(pred.filter(predLine.defined())).attr(\"d\", predLine);\n          compiledData[1] = pred;\n        }\n      }\n\n      mousePerLine.data(compiledData); ////////////////////\n\n      var mouse = d3.mouse(this);\n      var xCoord = mouse[0];\n      d3.select(\"#tooltip-line\").attr(\"d\", function () {\n        var d = \"M\" + xCoord + \",\" + height;\n        d += \" \" + xCoord + \",\" + 0;\n        return d;\n      });\n      d3.selectAll(\".mouse-per-line\").attr(\"transform\", function (d, i) {\n        if (d.length == 0) {\n          return;\n        }\n\n        var date = x.invert(xCoord);\n        const index = d3.bisector(f => f.date).left(d, date);\n        var a = null;\n\n        if (index > 0) {\n          a = d[index - 1];\n        }\n\n        const b = d[index]; //d = the data object corresponding to date and value pointed by the cursors\n\n        var data = null;\n\n        if (!a) {\n          data = b;\n        } else if (!b) {\n          data = a;\n        } else {\n          data = b && date - a.date > b.date - date ? b : a;\n        }\n\n        if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n          if (data.defined != 0) {\n            var element = d3.select(this);\n            element.select('#value').style(\"display\", \"block\").text(Math.round(data.value)).attr(\"transform\", `translate(${mouse[0]}, ${y(data.value)})`);\n            element.select(\"#date\").style(\"display\", \"block\").attr(\"transform\", `translate(${mouse[0] + 15}, 0) rotate(-90)`).text(d3.timeFormat(\"%B %d, %Y\")(data.date));\n            element.select(\"circle\").style(\"display\", \"block\").attr(\"transform\", `translate(${mouse[0]}, ${y(data.value)})`);\n            return \"translate(0,0)\";\n          }\n        }\n\n        var element = d3.select(this);\n        element.selectAll(\"text\").style(\"display\", \"none\");\n        element.select(\"circle\").style(\"display\", \"none\");\n      });\n    }).on(\"click\", function () {\n      var date = x.invert(d3.mouse(this)[0]);\n      const index = d3.bisectRight(dates, date);\n      console.log(dates);\n      console.log(date);\n      console.log(index);\n\n      if (predictionData[date]) {\n        console.log(\"exists\");\n        svg.select(\"#prediction\").datum(predictionData[date].filter(predLine.defined())).attr(\"d\", predLine);\n        compiledData[1] = predictionData[date];\n      } else {\n        if (index == 0) {\n          svg.select(\"#prediction\").datum([]).attr(\"d\", predLine);\n          compiledData[1] = [];\n        } else {\n          var newDate = dates[index - 1];\n          console.log(+predictionData[newDate][0].date, +date);\n          var pred = predictionData[newDate].filter(d => +d.date >= +date);\n          console.log(pred);\n          svg.select(\"#prediction\").datum(pred.filter(predLine.defined())).attr(\"d\", predLine);\n          compiledData[1] = pred;\n        }\n      }\n\n      mousePerLine.data(compiledData);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default UserPredictionChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/UserPredictionChart/index.js"],"names":["React","Component","d3","getMostRecentPrediction","sortDictByDate","sortStringDates","UserPredictionChart","constructor","props","state","category","chartRef","createRef","componentDidMount","userStatus","console","log","renderChart","current","innerHTML","forecast","orgs","userPrediction","confirmed","aggregate","predictionData","mostRecentPred","compiledData","confirmedStartDate","timeParse","confirmedEndDate","predLength","predEndDate","valueMax","confirmedData","Object","keys","map","key","date","value","length","timeDay","offset","p","d","substring","defined","dates","timeFormat","legendWidth","toolTipHeight","contextHeight","margin","top","right","bottom","left","width","height","svg","select","append","attr","x","scaleTime","domain","range","xAxis","call","axisBottom","y","scaleLinear","yAxis","axisLeft","legendString","color","scaleOrdinal","schemeTableau10","legend","selectAll","data","enter","i","style","text","today","Date","toISOString","todayMarker","mainClip","mainArea","lineGenerator","line","curve","curveCatmullRom","predLineGenerator","curveBasis","predLine","confirmedCurve","datum","predCurve","filter","tooltip","mousePerLine","index","on","todayDate","invert","mouse","bisectRight","newDate","pred","xCoord","bisector","f","a","b","floor","ceil","element","Math","round","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './UserPredictionChart.css';\nimport { getMostRecentPrediction, sortDictByDate, sortStringDates } from '../../utils/data';\n\nclass UserPredictionChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\" };\n        this.chartRef = React.createRef();\n    }\n\n    componentDidMount() {\n        const userStatus = this.props.userStatus;\n        console.log(userStatus)\n        if (userStatus['logged in']) {\n            this.renderChart();\n        }\n        else {\n            this.chartRef.current.innerHTML = \"Please log in\"\n        }\n    }\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = {};//where we will store formatted userPrediction\n        var mostRecentPred = [];\n        const category = this.state.category;\n        var compiledData = [];\n        //IMPORTANT BOUNDARIES// \n        const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\");\n        var confirmedEndDate = null;\n        const predLength = 155;\n        var predEndDate = null;\n        const valueMax = 5000;\n\n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n        var confirmedEndDate = confirmedData[confirmedData.length - 1].date;\n        predEndDate = d3.timeDay.offset(confirmedEndDate, predLength)\n\n        //store userPrediction in predictionData if it exists; parse dates and store as d3 date objects\n        if(Object.keys(userPrediction).length > 0) {\n            Object.keys(userPrediction).map(p => {\n                predictionData[p]= userPrediction[p].map(d => ({\n                    date: d3.timeParse(\"%Y-%m-%d\")((d.date).substring(0,10)),\n                    value: d.value,\n                    defined: d.defined\n                }))\n            })\n            predictionData = sortDictByDate(predictionData);\n            //get most recent prediction\n            var dates = sortStringDates(Object.keys(userPrediction))\n            const mostRecentPred = predictionData[dates[dates.length - 1]]\n            console.log(mostRecentPred)\n            predEndDate = mostRecentPred[mostRecentPred.length - 1].date;\n\n            //push to compiledData\n            console.log(dates[0])\n            console.log(d3.timeFormat(\"%B %d, %Y\")(dates[0]))\n        }\n        compiledData = [confirmedData, mostRecentPred]\n\n        \n\n        /////////////////////////////////////////////////DRAW CHART//////////////////////////////\n        //set up margin, width, height of chart\n        const legendWidth = 180;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        var x = d3\n                    .scaleTime()\n                    .domain([confirmedStartDate, predEndDate])\n                    .range([0, width]);\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        var y = d3\n                    .scaleLinear()\n                    .domain([0, valueMax])\n                    .range([height, 0]);\n        var yAxis = svg\n                        .append(\"g\")\n                        .call(d3.axisLeft(y));\n        \n        //DRAW LEGEND//\n        const legendString = [\"Daily Confirmed Deaths\", \"User Prediction\"];\n        const color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n        const legend = svg\n                            .append('g')\n                            .attr(\"id\", \"legend\");\n        legend\n                .selectAll(\"rect\")\n                .data(legendString)\n                .enter()\n                .append(\"circle\")\n                    .attr('cx', width + 30)\n                    .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .attr(\"r\", 6)\n                    //.attr(\"width\", size)\n                    //.attr(\"height\", size)\n                    .style(\"fill\", function(d){ return color(d)})\n        legend\n                .selectAll(\"labels\")\n                .data(legendString)\n                .enter()\n                .append(\"text\")\n                    .attr(\"x\", width + 45)\n                    .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .style(\"fill\", function(d){ return color(d)})\n                    .text(function(d){ return d})\n                        .attr(\"text-anchor\", \"left\")\n                        .style(\"alignment-baseline\", \"middle\")\n        \n        //DRAW TODAY LINE//\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        console.log(today);\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n\n        //SET UP CLIP PATH//\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n        const mainArea = svg.append(\"g\")\n                            .attr(\"clip-path\", \"url(#main-clip)\");\n        \n        //SET UP CURVES//\n        const lineGenerator = d3.line()\n                                .curve(d3.curveCatmullRom);\n        const predLineGenerator = d3.line()\n                                    .curve(d3.curveBasis);\n        const line = lineGenerator\n                        .x(function(d) { return x(d.date) })\n                        .y(function(d) { return y(d.value) })\n        const predLine = predLineGenerator\n                            .defined(d => d.defined)\n                            .x(function(d) { return x(d.date) })\n                            .y(function(d) { return y(d.value) })\n        //DRAW CURVES//\n        var confirmedCurve = mainArea\n                                    .append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")\n                                    .datum(confirmedData)\n                                    .attr(\"d\", line)\n                                    .attr(\"stroke\", color(legendString[0]))\n        var predCurve = mainArea\n                                .append(\"path\")\n                                .attr(\"id\", \"prediction\")\n                                .attr(\"class\", \"line\")\n                                .datum(mostRecentPred.filter(predLine.defined()))\n                                .attr(\"d\", predLine)\n                                .attr(\"stroke\",  color(legendString[1]))\n        \n        //SET UP TOOLTIP//\n        const tooltip = svg \n                            .append(\"g\")\n                            .attr(\"class\", \"tooltip\")\n        tooltip\n                .append(\"path\")\n                .attr(\"id\", \"tooltip-line\")\n                .style(\"stroke\", \"black\")\n                .style(\"stroke-width\", \"0.5px\")\n                .style(\"display\", \"none\");\n        var mousePerLine = tooltip\n                                    .selectAll(\".mouse-per-line\")\n                                    .data(compiledData)\n                                    .enter()\n                                    .append(\"g\")\n                                    .attr(\"class\", \"mouse-per-line\");\n        mousePerLine.append(\"circle\")\n                    .attr(\"r\", 2)\n                    .style(\"stroke\", function(d, index) {\n                        return color(legendString[index]);\n                    })\n                    .attr(\"id\", \"circle\")\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke-width\", \"1px\")\n                    .style(\"display\", \"none\");\n        mousePerLine.append(\"text\")\n                    .attr(\"id\", \"value\")\n                    .attr(\"transform\", \"translate(10,3)\"); \n        mousePerLine.append(\"text\")\n                    .attr(\"id\", \"date\")\n                    .attr(\"text-anchor\", \"end\")\n                    .attr(\"transform\", \"rotate(-90)\")\n        \n        svg\n                .append(\"svg:rect\")\n                    .attr('width', width)\n                    .attr('height', height)\n                    .attr(\"id\", \"interactive-area\")\n                    .attr('fill', 'none')\n                    .attr('pointer-events', 'all')\n                    .style(\"cursor\", \"pointer\")\n                    .on('mouseout', function() { // on mouse out hide line, circles and text\n                        d3.select(\"#tooltip-line\")\n                            .style(\"display\", \"none\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"display\", \"none\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"display\", \"none\")\n                    })\n                    /*.on('mouseover', function() { // on mouse in show line, circles and text\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"1\")\n                    })*/\n                    .on('mousemove', function() { // mouse moving over canvas\n                        var todayDate = new Date();\n                        todayDate = d3.timeParse(\"%Y-%m-%d\")(todayDate.toISOString().substring(0,10));\n                        var date = x.invert(d3.mouse(this)[0])\n                        if (predictionData.length == 0) {\n                            return;\n                        }\n                        if (+date > +todayDate) {\n                            date = todayDate;\n                        }\n                        const index = d3.bisectRight(dates, date);\n                        if(predictionData[date]) {\n                            console.log(\"exists\")\n                            svg\n                                .select(\"#prediction\")\n                                .datum(predictionData[date].filter(predLine.defined()))\n                                .attr(\"d\", predLine)\n                            compiledData[1] = predictionData[date];\n                        }\n                        else {\n                            if (index == 0) {\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum([])\n                                    .attr(\"d\", predLine)\n                                compiledData[1] = [];\n                            }\n                            else {\n                                var newDate = dates[index - 1];\n                                console.log(+predictionData[newDate][0].date, +date);\n                                var pred = predictionData[newDate].filter(d => +d.date >= +date)\n                                console.log(pred)\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum(pred.filter(predLine.defined()))\n                                    .attr(\"d\", predLine);\n                                compiledData[1] = pred;\n                            }\n                        }\n                        mousePerLine.data(compiledData);\n                        ////////////////////\n\n\n\n                        var mouse = d3.mouse(this);\n                        var xCoord = mouse[0];\n                        d3\n                            .select(\"#tooltip-line\")\n                            .attr(\"d\", function() {\n                                var d = \"M\" + xCoord + \",\" + height;\n                                d += \" \" + xCoord + \",\" + 0;\n                                return d;\n                            });\n                        d3\n                            .selectAll(\".mouse-per-line\")\n                            .attr(\"transform\", function(d, i) {\n                                if (d.length == 0) {return;}\n                                var date = x.invert(xCoord);\n                                const index = d3.bisector(f => f.date).left(d, date);\n                                var a = null;\n                                if (index > 0) {\n                                    a = d[index - 1];\n                                }\n                                const b = d[index];\n                                //d = the data object corresponding to date and value pointed by the cursors\n                                var data = null;\n                                if (!a) {\n                                    data = b;\n                                }\n                                else if (!b) {\n                                    data = a;\n                                }\n                                else {\n                                    data = b && (date - a.date > b.date - date) ? b : a;\n                                }\n                                if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n                                    if (data.defined != 0) {\n                                        var element = d3.select(this)\n                                        element\n                                                .select('#value')\n                                                .style(\"display\", \"block\")\n                                                .text(Math.round(data.value))\n                                                .attr(\"transform\", `translate(${mouse[0]}, ${y(data.value)})`);\n                                            \n                                        element\n                                                .select(\"#date\")\n                                                .style(\"display\", \"block\")\n                                                .attr(\"transform\", `translate(${mouse[0] + 15}, 0) rotate(-90)`)\n                                                .text(d3.timeFormat(\"%B %d, %Y\")(data.date));\n                                        element\n                                                .select(\"circle\")\n                                                .style(\"display\", \"block\")\n                                                .attr(\"transform\", `translate(${mouse[0]}, ${y(data.value)})`);\n                                        return \"translate(0,0)\";\n                                    }\n                                }\n                                var element = d3.select(this)\n                                element                \n                                    .selectAll(\"text\")\n                                        .style(\"display\", \"none\")\n                                element\n                                        .select(\"circle\")\n                                        .style(\"display\", \"none\");\n                            });\n                    })\n                    .on(\"click\", function() {\n                        var date = x.invert(d3.mouse(this)[0])\n                        const index = d3.bisectRight(dates, date);\n                        console.log(dates)\n                        console.log(date)\n                        console.log(index)\n                        if(predictionData[date]) {\n                            console.log(\"exists\")\n                            svg\n                                .select(\"#prediction\")\n                                .datum(predictionData[date].filter(predLine.defined()))\n                                .attr(\"d\", predLine)\n                            compiledData[1] = predictionData[date];\n                        }\n                        else {\n                            if (index == 0) {\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum([])\n                                    .attr(\"d\", predLine)\n                                compiledData[1] = [];\n                            }\n                            else {\n                                var newDate = dates[index - 1];\n                                console.log(+predictionData[newDate][0].date, +date);\n                                var pred = predictionData[newDate].filter(d => +d.date >= +date)\n                                console.log(pred)\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum(pred.filter(predLine.defined()))\n                                    .attr(\"d\", predLine);\n                                compiledData[1] = pred;\n                            }\n                        }\n                        mousePerLine.data(compiledData);\n                    })\n                \n    }\n\n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default UserPredictionChart;\n"]},"metadata":{},"sourceType":"module"}