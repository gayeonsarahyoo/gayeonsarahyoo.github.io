{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './InteractiveChart.css';\nimport { clamp, callout } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\n\nclass InteractiveChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      category: \"us_daily_deaths\"\n    };\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    //console.log(this.props);\n    this.renderChart();\n  } //move to utils\n\n\n  savePrediction(data, category) {\n    fetch('/update/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"data\": data,\n        \"category\": category\n      })\n    });\n  }\n\n  deletePrediction(category) {\n    console.log(category);\n    fetch('/delete/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"category\": category\n      })\n    });\n    console.log(\"deleted\");\n  }\n\n  createDefaultPrediction(predStartDate, predEndDate) {\n    var defaultData = [];\n    var currDate = predStartDate; //var defined = true;\n    //var value = confirmedData[confirmedData.length - 1].value;\n    //create defaultPredictionData\n\n    console.log(currDate);\n    console.log(predEndDate);\n\n    while (+d3.timeParse(\"%Y-%m-%d\")(currDate.toISOString().substring(0, 10)) <= +predEndDate) {\n      defaultData.push({\n        date: d3.timeParse(\"%Y-%m-%d\")(currDate.toISOString().substring(0, 10)),\n        value: 0,\n        defined: 0\n      });\n      currDate = addDays(currDate, 1);\n    }\n\n    return defaultData;\n  }\n\n  renderChart() {\n    const {\n      forecast,\n      orgs,\n      userPrediction,\n      confirmed,\n      aggregate\n    } = this.props;\n    var predictionData = []; //where we will store formatted userPrediction\n\n    var defaultPredictionData = [];\n    const savePrediction = this.savePrediction;\n    const createDefaultPrediction = this.createDefaultPrediction;\n    const category = this.state.category;\n    var compiledData = []; //set up margin, width, height of chart\n\n    var legendWidth = 180;\n    var toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        width = 800 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    var svg = d3.select(this.chartRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right + legendWidth).attr(\"height\", height + margin.top + margin.bottom + toolTipHeight).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n\n    var confirmedData = Object.keys(confirmed).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: confirmed[key]\n    }));\n    var forecastData = forecast.map(f => {\n      return Object.keys(f).map(key => ({\n        date: d3.timeParse(\"%Y-%m-%d\")(key),\n        value: f[key]\n      }));\n    });\n    var aggregateData = Object.keys(aggregate).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: aggregate[key]\n    })); //store userPrediction in predictionData if it exists\n\n    console.log(userPrediction);\n\n    if (Object.keys(userPrediction).length > 0) {\n      predictionData = userPrediction.map(p => ({\n        date: d3.timeParse(\"%Y-%m-%d\")(p.date.substring(0, 10)),\n        value: p.value,\n        defined: p.defined\n      }));\n    }\n\n    console.log(predictionData); //set other dates\n\n    var confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\"); //date format: y-m-d\n\n    var predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n\n    var predLength = 365;\n    console.log(d3.timeDay.offset(predStartDate, predLength));\n    var predEndDateString = addDays(new Date(), predLength).toISOString().substring(0, 10);\n    var predEndDate = d3.timeParse(\"%Y-%m-%d\")(predEndDateString);\n    console.log(predEndDate); //get confirmedData starting from confirmedStartDate\n\n    confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate); //draw x-axis        \n\n    var x = d3.scaleTime().domain([confirmedStartDate, predEndDate]).range([0, width]); //.nice(); //rounds up/down the max and mind of x axis\n\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); //find max val in confirmedData and forecastData to determine the max of y-axis\n\n    var confirmedMax = d3.max(confirmedData, function (d) {\n      return +d.value;\n    });\n    var forecastMax = 0;\n    forecastData.map(f => {\n      var currMax = d3.max(f, d => {\n        return d.value;\n      });\n      forecastMax = currMax > forecastMax ? currMax : forecastMax;\n    });\n    var yAxisMax = Math.max(confirmedMax, forecastMax); //draw y-axis\n\n    var y = d3.scaleLinear().domain([0, yAxisMax]).range([height, 0]).nice();\n    svg.append(\"g\").call(d3.axisLeft(y)); //list of data displayed in graph - for legend\n\n    var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]); //color function that assigns random colors to each data\n\n    var color = d3.scaleOrdinal().domain(legendString).range(d3.schemeTableau10); //draw legend\n\n    var legend = svg.append('g').attr(\"id\", \"legend\");\n    var size = 10;\n    legend.selectAll(\"rect\").data(legendString).enter().append(\"circle\").attr('cx', width + 30).attr(\"cy\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .attr(\"r\", 6) //.attr(\"width\", size)\n    //.attr(\"height\", size)\n    .style(\"fill\", function (d) {\n      return color(d);\n    });\n    legend.selectAll(\"labels\").data(legendString).enter().append(\"text\").attr(\"x\", width + 45).attr(\"y\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .style(\"fill\", function (d) {\n      return color(d);\n    }).text(function (d) {\n      return d;\n    }).attr(\"text-anchor\", \"left\").style(\"alignment-baseline\", \"middle\"); //create line generator for confirmed/forecast data and prediction data\n\n    var lineGenerator = d3.line().curve(d3.curveCatmullRom); //curve that goes through all data points\n\n    var predLineGenerator = d3.line().curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n    //d3.curveMonotoneX\n    //d3.curveBasis\n    //d3.curveCardinal\n    //function that draws curve\n\n    var line = lineGenerator.x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }); //display confirmed data\n\n    var confirmedLine = svg.append(\"path\").attr(\"id\", \"confirmed\").attr(\"class\", \"line\").datum(confirmedData).attr('d', line).attr(\"stroke\", color(legendString[legendString.length - 3])); //display aggregate data\n\n    var aggregateLine = svg.append(\"path\").attr(\"id\", \"aggregate\").attr(\"class\", \"line\").datum(aggregateData).attr('d', line).attr(\"stroke\", color(legendString[legendString.length - 2])); //display forecast data\n\n    forecastData.map((f, index) => {\n      svg.append(\"path\").attr(\"class\", \"forecast line\").attr(\"id\", orgs[index]).style(\"stroke\", color(orgs[index])).datum(f).attr(\"d\", line);\n    });\n    var lines = document.getElementsByClassName('line'); //function that generates the prediction curve\n\n    var predLine = predLineGenerator.defined(d => d.defined).x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }); //append path for prediction data\n\n    var yourLine = svg.append(\"path\").attr(\"id\", \"your-line\"); //variables used to initialize user prediction data if it doesn't exist in the db\n\n    var currDate = predStartDate;\n    var defined = true;\n    var value = confirmedData[confirmedData.length - 1].value;\n    const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n    //check if userPrediction already exists in db\n\n    if (Object.keys(userPrediction).length > 0) {\n      predictionData = predictionData.filter(d => +d.date >= +predStartDate && +d.date <= +predEndDate);\n      predictionData[0].value = confirmedLastVal;\n      predictionData[0].defined = true;\n      currDate = addDays(predictionData[predictionData.length - 1].date, 1);\n      console.log(predictionData);\n      console.log(createDefaultPrediction(currDate, predEndDate));\n      predictionData.concat(createDefaultPrediction(currDate, predEndDate));\n      console.log(predictionData);\n    } else {\n      predictionData = createDefaultPrediction(predStartDate, predEndDate);\n      predictionData[0].value = confirmedLastVal;\n      predictionData[0].defined = true;\n      console.log(predictionData);\n    } //create defaultPredictionData\n\n    /*var tempDate = predStartDate;\n    var tempVal = confirmedLastVal\n    while(+tempDate <= +predEndDate) {\n        defaultPredictionData.push({date: tempDate, value: tempVal, defined: 0});\n        tempVal = 0;\n        tempDate = addDays(tempDate, 1);\n    }\n    console.log(defaultPredictionData)\n    //initialize data\n    while (+currDate <= +predEndDate) {            \n        predictionData.push({date: currDate, value: value, defined: defined});\n        currDate = addDays(currDate, 1);\n        defined = 0;\n        value = 0;\n    }*/\n\n\n    var filteredData = null; //var totalData = confirmedData.concat(predictionData);\n    //!!    //add forecast data to compiledData\n\n    orgs.map((o, index) => {\n      compiledData.push({\n        name: o,\n        data: forecastData[index]\n      });\n    });\n    compiledData.push({\n      name: \"Daily Confirmed Deaths\",\n      data: confirmedData\n    });\n    compiledData.push({\n      name: \"Aggregate Forecast\",\n      data: aggregateData\n    }); //if (userPrediction) {\n\n    compiledData.push({\n      name: \"User Prediction\",\n      data: predictionData\n    }); //}\n    //join data to yourLine\n\n    if (Object.keys(userPrediction).length > 0) {\n      filteredData = predictionData.filter(predLine.defined());\n      yourLine.datum(filteredData).attr('d', predLine).style(\"stroke\", color(legendString[legendString.length - 1]));\n    } //append new rect  \n\n\n    const mouseArea = svg.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"none\").style(\"pointer-events\", \"visible\"); //append click area rect\n\n    var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n\n    var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n\n    svg.append(\"rect\").attr(\"id\", \"click-area\").attr(\"width\", clickAreaWidth).attr(\"height\", height).attr(\"transform\", \"translate (\" + confirmedAreaWidth + \" 0)\").attr(\"fill\", \"none\").style(\"pointer-events\", \"visible\"); //var clickArea = d3.select(\"#click-area\");\n    //append circle at the end of confirmed curve\n\n    /*var selectCircle = svg\n                            .append(\"g\")\n                            .attr(\"class\", \"pointer\")\n    var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n    pointerCircles.map((c) => {\n        selectCircle.append(\"circle\")\n                    .attr(\"class\", c)\n                    .attr(\"cx\", x(confirmedData[confirmedData.length - 1].date))\n                    .attr(\"cy\", y(confirmedData[confirmedData.length - 1].value))\n    })*/\n\n    if (Object.keys(userPrediction).length == 0) {\n      //append draw your guess text\n      svg.append(\"text\").attr(\"id\", \"draw-guess\").attr(\"x\", confirmedAreaWidth + clickAreaWidth / 2).attr(\"y\", height - 60).attr(\"text-anchor\", \"middle\").style(\"font-size\", \"16px\").text(\"Draw your guess\"); //append circle at the end of confirmed curve\n\n      var selectCircle = svg.append(\"g\").attr(\"class\", \"pointer\");\n      var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n      pointerCircles.map(c => {\n        selectCircle.append(\"circle\").attr(\"class\", c).attr(\"cx\", x(confirmedData[confirmedData.length - 1].date)).attr(\"cy\", y(confirmedData[confirmedData.length - 1].value));\n      });\n    }\n\n    var drag = d3.drag().on(\"drag\", function () {\n      //hide \"draw your guess\" text\n      d3.select(\"#draw-guess\").remove();\n      d3.select(\".pointer\").remove();\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"0\");\n      var pos = d3.mouse(this);\n      var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n      var value = clamp(0, yAxisMax, y.invert(pos[1]));\n      predictionData.forEach(function (d) {\n        if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)) {\n          d.value = value;\n          d.defined = true;\n        }\n\n        predictionData[0].value = confirmedLastVal; //make sure the prediction curve is always connected to the confirmed curve\n        //update totalData everytime predictionData is updated\n\n        compiledData[compiledData.length - 1].data = predictionData; //console.log(compiledData)\n\n        /*yourLine.datum(predictionData)\n                .attr('d', predLine)*/\n\n        var filteredData = predictionData.filter(predLine.defined());\n        yourLine.datum(filteredData).attr('d', predLine).style(\"stroke\", color(legendString[legendString.length - 1]));\n      });\n    }).on(\"end\", function () {\n      savePrediction(predictionData, category);\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"1\");\n    });\n    svg.call(drag); //finds the datapoint closest to the mouse (along x)\n\n    /*var bisect = () => {\n        const bisectDate = d3.bisector(d => d.date).left;\n        return mx => {\n            const date = x.invert(mx);\n            const index = bisectDate(totalData, date, 1);\n            const a = totalData[index - 1];\n            const b = totalData[index];\n            return b && (date - a.date > b.date - date) ? b : a;\n        };\n    }*/\n\n    const tooltipArea = svg.append(\"g\").attr(\"class\", \"tooltip\");\n    tooltipArea.append(\"path\") //vertical line\n    .attr(\"id\", \"tooltip-line\").style(\"stroke\", \"black\").style(\"stroke-width\", \"0.5px\").style(\"opacity\", \"0\");\n    var mousePerLine = tooltipArea.selectAll(\".mouse-per-line\").data(compiledData).enter().append(\"g\").attr(\"class\", \"mouse-per-line\");\n    mousePerLine.append(\"circle\").attr(\"r\", 2).style(\"stroke\", function (d) {\n      return color(d.name);\n    }).style(\"fill\", \"none\").style(\"stroke-width\", \"1px\").style(\"opacity\", \"0\");\n    mousePerLine.append(\"text\").attr(\"transform\", \"translate(10,3)\");\n    tooltipArea.append(\"svg:rect\").attr('width', width).attr('height', height).attr('fill', 'none').attr('pointer-events', 'all').on('mouseout', function () {\n      // on mouse out hide line, circles and text\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"0\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"0\");\n    }).on('mouseover', function () {\n      // on mouse in show line, circles and text\n      d3.select(\"#tooltip-line\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line circle\").style(\"opacity\", \"1\");\n      d3.selectAll(\".mouse-per-line text\").style(\"opacity\", \"1\");\n    }).on('mousemove', function () {\n      // mouse moving over canvas\n      var mouse = d3.mouse(this);\n      var xCoord = mouse[0];\n      d3.select(\"#tooltip-line\").attr(\"d\", function () {\n        var d = \"M\" + xCoord + \",\" + height;\n        d += \" \" + xCoord + \",\" + 0;\n        return d;\n      });\n      d3.selectAll(\".mouse-per-line\").attr(\"transform\", function (d, i) {\n        if (d.data.length == 0) {\n          return;\n        }\n\n        var date = x.invert(xCoord);\n        const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n        var a = null;\n\n        if (index > 0) {\n          a = d.data[index - 1];\n        }\n\n        const b = d.data[index]; //d = the data object corresponding to date and value pointed by the cursors\n\n        var data = null;\n\n        if (!a) {\n          data = b;\n        } else if (!b) {\n          data = a;\n        } else {\n          data = b && date - a.date > b.date - date ? b : a;\n        }\n\n        if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n          if (data.defined != 0) {\n            var element = d3.select(this).select('text').style(\"opacity\", \"1\").text(Math.round(data.value).toFixed(2));\n            element.select(\"circle\").style(\"opacity\", \"1\");\n            return \"translate(\" + mouse[0] + \",\" + y(data.value) + \")\";\n          }\n        }\n\n        var element = d3.select(this).select(\"text\").style(\"opacity\", \"0\");\n        element.select(\"circle\").style(\"opacity\", \"0\");\n      });\n    }); ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    var deleteButton = document.createElement(\"button\");\n    deleteButton.innerText = \"Delete\";\n\n    deleteButton.onclick = () => {\n      this.deletePrediction(category);\n      console.log(predStartDate);\n      predictionData = createDefaultPrediction(predStartDate, predEndDate);\n      predictionData[0].value = confirmedLastVal;\n      predictionData[0].defined = true;\n      console.log(predictionData); //update yourLine\n\n      var filtered = predictionData.filter(predLine.defined());\n      console.log(filtered);\n      yourLine.datum(filtered).attr('d', predLine);\n    };\n\n    document.querySelector(\"body\").appendChild(deleteButton);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default InteractiveChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js"],"names":["React","Component","d3","clamp","callout","elementType","addDays","formatDate","InteractiveChart","constructor","props","state","category","chartRef","createRef","componentDidMount","renderChart","savePrediction","data","fetch","method","headers","body","JSON","stringify","deletePrediction","console","log","createDefaultPrediction","predStartDate","predEndDate","defaultData","currDate","timeParse","toISOString","substring","push","date","value","defined","forecast","orgs","userPrediction","confirmed","aggregate","predictionData","defaultPredictionData","compiledData","legendWidth","toolTipHeight","margin","top","right","bottom","left","width","height","svg","select","current","append","attr","confirmedData","Object","keys","map","key","forecastData","f","aggregateData","length","p","confirmedStartDate","predLength","timeDay","offset","predEndDateString","Date","filter","d","x","scaleTime","domain","range","call","axisBottom","confirmedMax","max","forecastMax","currMax","yAxisMax","Math","y","scaleLinear","nice","axisLeft","legendString","concat","color","scaleOrdinal","schemeTableau10","legend","size","selectAll","enter","i","style","text","lineGenerator","line","curve","curveCatmullRom","predLineGenerator","curveBasis","confirmedLine","datum","aggregateLine","index","lines","document","getElementsByClassName","predLine","yourLine","confirmedLastVal","filteredData","o","name","mouseArea","confirmedAreaWidth","node","getBoundingClientRect","clickAreaWidth","selectCircle","pointerCircles","c","drag","on","remove","pos","mouse","invert","forEach","round","tooltipArea","mousePerLine","xCoord","bisector","a","b","floor","ceil","element","toFixed","deleteButton","createElement","innerText","onclick","filtered","querySelector","appendChild","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport './InteractiveChart.css';\nimport { clamp, callout } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\n\n\nclass InteractiveChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\" };\n        this.chartRef = React.createRef();\n    }\n    componentDidMount() {\n        //console.log(this.props);\n        this.renderChart();\n    }\n\n    //move to utils\n    savePrediction(data, category) {\n        fetch('/update/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"data\": data, \"category\": category}),\n        });\n    }\n    deletePrediction(category) {\n        console.log(category)\n        fetch('/delete/',{\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\"category\": category}),\n          });\n        console.log(\"deleted\")\n    }\n\n    createDefaultPrediction(predStartDate, predEndDate) {\n        var defaultData = [];\n        var currDate = predStartDate;\n        //var defined = true;\n        //var value = confirmedData[confirmedData.length - 1].value;\n        \n        //create defaultPredictionData\n        console.log(currDate)\n        console.log(predEndDate)\n        while(+d3.timeParse(\"%Y-%m-%d\")(currDate.toISOString().substring(0,10)) <= +predEndDate) {\n            defaultData.push({date: d3.timeParse(\"%Y-%m-%d\")(currDate.toISOString().substring(0,10)), value: 0, defined: 0});\n            currDate = addDays(currDate, 1);\n        }\n        return defaultData;\n    }\n\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = [];//where we will store formatted userPrediction\n        var defaultPredictionData = []\n        const savePrediction = this.savePrediction;\n        const createDefaultPrediction = this.createDefaultPrediction;\n        const category = this.state.category;\n        var compiledData = [];\n        //set up margin, width, height of chart\n        var legendWidth = 180;\n        var toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        \n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n        \n        var forecastData = forecast.map(f => {\n            return Object.keys(f).map(key => ({\n                date: d3.timeParse(\"%Y-%m-%d\")(key),\n                value: f[key]\n            }))\n        });\n\n        var aggregateData = Object.keys(aggregate).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: aggregate[key]\n        }));\n        //store userPrediction in predictionData if it exists\n        console.log(userPrediction);\n        if(Object.keys(userPrediction).length > 0) {\n            predictionData = userPrediction.map(p => ({\n                date: d3.timeParse(\"%Y-%m-%d\")((p.date).substring(0,10)),\n                value: p.value,\n                defined: p.defined\n                })\n            );\n        }\n        console.log(predictionData)\n  \n\n        //set other dates\n        var confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\"); //date format: y-m-d\n        var predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n        var predLength = 365;\n        console.log(d3.timeDay.offset(predStartDate, predLength))\n        \n        var predEndDateString = addDays(new Date(), predLength).toISOString().substring(0, 10);\n        var predEndDate = d3.timeParse(\"%Y-%m-%d\")(predEndDateString)\n        console.log(predEndDate)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis        \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n         svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg.append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n\n         //draw legend\n        var legend = svg.append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        legend.selectAll(\"rect\")\n            .data(legendString)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', width + 30)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", function(d){ return color(d)})\n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", width + 45)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .style(\"fill\", function(d){ return color(d)})\n                .text(function(d){ return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            .curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //display confirmed data\n        var confirmedLine = svg\n            .append(\"path\")\n            .attr(\"id\", \"confirmed\")\n            .attr(\"class\", \"line\")    \n            .datum(confirmedData)    \n            .attr('d', line)\n            .attr(\"stroke\", color(legendString[legendString.length - 3]))\n\n        //display aggregate data\n        var aggregateLine = svg\n            .append(\"path\")\n            .attr(\"id\", \"aggregate\")\n            .attr(\"class\", \"line\")        \n            .datum(aggregateData)    \n            .attr('d', line)\n            .attr(\"stroke\", color(legendString[legendString.length - 2]))\n        \n        //display forecast data\n        forecastData.map((f, index) => {\n            svg\n                .append(\"path\")\n                    .attr(\"class\", \"forecast line\")\n                    .attr(\"id\", orgs[index])\n                    .style(\"stroke\", color(orgs[index]))\n                .datum(f)\n                    .attr(\"d\", line);\n        })\n        \n        var lines = document.getElementsByClassName('line');\n\n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = svg.append(\"path\")\n                .attr(\"id\", \"your-line\");\n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n        \n        //check if userPrediction already exists in db\n        if (Object.keys(userPrediction).length > 0) {\n            predictionData = predictionData.filter(d => (+d.date >= +predStartDate) && (+d.date <= +predEndDate));\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            currDate = addDays(predictionData[predictionData.length - 1].date, 1);\n            console.log(predictionData)\n            console.log(createDefaultPrediction(currDate, predEndDate))\n            predictionData.concat(createDefaultPrediction(currDate, predEndDate));\n            console.log(predictionData);\n        }\n        else {\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            console.log(predictionData);\n        }\n        //create defaultPredictionData\n        /*var tempDate = predStartDate;\n        var tempVal = confirmedLastVal\n        while(+tempDate <= +predEndDate) {\n            defaultPredictionData.push({date: tempDate, value: tempVal, defined: 0});\n            tempVal = 0;\n            tempDate = addDays(tempDate, 1);\n        }\n        console.log(defaultPredictionData)\n        //initialize data\n        while (+currDate <= +predEndDate) {            \n            predictionData.push({date: currDate, value: value, defined: defined});\n            currDate = addDays(currDate, 1);\n            defined = 0;\n            value = 0;\n        }*/\n        var filteredData = null;\n        //var totalData = confirmedData.concat(predictionData);\n\n//!!    //add forecast data to compiledData\n        orgs.map((o, index) => {\n            compiledData.push({\n                name: o,\n                data: forecastData[index]\n            })\n        })\n        compiledData.push({\n            name: \"Daily Confirmed Deaths\",\n            data: confirmedData\n        })\n        compiledData.push({\n            name: \"Aggregate Forecast\",\n            data: aggregateData\n        })\n        //if (userPrediction) {\n        compiledData.push({\n            name: \"User Prediction\",\n            data: predictionData\n        })\n        //}\n        //join data to yourLine\n        if(Object.keys(userPrediction).length > 0) {\n            filteredData = predictionData.filter(predLine.defined())\n            yourLine.datum(filteredData)\n                    .attr('d', predLine)\n                    .style(\"stroke\", color(legendString[legendString.length - 1]))\n        }\n        //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append circle at the end of confirmed curve\n        /*var selectCircle = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"pointer\")\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n            selectCircle.append(\"circle\")\n                        .attr(\"class\", c)\n                        .attr(\"cx\", x(confirmedData[confirmedData.length - 1].date))\n                        .attr(\"cy\", y(confirmedData[confirmedData.length - 1].value))\n        })*/\n\n        if(Object.keys(userPrediction).length == 0) {\n            //append draw your guess text\n            svg.append(\"text\")\n                .attr(\"id\", \"draw-guess\")\n                .attr(\"x\", confirmedAreaWidth + (clickAreaWidth / 2))             \n                .attr(\"y\", height - 60)\n                .attr(\"text-anchor\", \"middle\")  \n                .style(\"font-size\", \"16px\") \n                .text(\"Draw your guess\");\n            //append circle at the end of confirmed curve\n            var selectCircle = svg\n                                    .append(\"g\")\n                                    .attr(\"class\", \"pointer\")\n            var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n            pointerCircles.map((c) => {\n            selectCircle.append(\"circle\")\n                .attr(\"class\", c)\n                .attr(\"cx\", x(confirmedData[confirmedData.length - 1].date))\n                .attr(\"cy\", y(confirmedData[confirmedData.length - 1].value))\n            })\n        }\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        //hide \"draw your guess\" text\n                        d3.select(\"#draw-guess\").remove()\n                        d3.select(\".pointer\").remove()\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"0\")\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        //update totalData everytime predictionData is updated\n                        compiledData[compiledData.length - 1].data = predictionData;\n                        //console.log(compiledData)\n                        /*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/\n                        var filteredData = predictionData.filter(predLine.defined())\n\n                        yourLine.datum(filteredData)\n                                .attr('d', predLine)\n                                .style(\"stroke\", color(legendString[legendString.length - 1]))\n\n                        });\n                    })\n                    .on(\"end\", function () {\n                        savePrediction(predictionData, category);\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"1\")\n                    });\n        \n        svg.call(drag)\n\n        //finds the datapoint closest to the mouse (along x)\n        /*var bisect = () => {\n            const bisectDate = d3.bisector(d => d.date).left;\n            return mx => {\n                const date = x.invert(mx);\n                const index = bisectDate(totalData, date, 1);\n                const a = totalData[index - 1];\n                const b = totalData[index];\n                return b && (date - a.date > b.date - date) ? b : a;\n            };\n        }*/\n\n\n        const tooltipArea = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n                    .attr(\"id\", \"tooltip-line\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"0.5px\")\n                    .style(\"opacity\", \"0\");\n        \n        var mousePerLine = tooltipArea\n                                        .selectAll(\".mouse-per-line\")\n                                        .data(compiledData)\n                                        .enter()\n                                        .append(\"g\")\n                                        .attr(\"class\", \"mouse-per-line\");\n        \n        mousePerLine.append(\"circle\")\n                        .attr(\"r\", 2)\n                        .style(\"stroke\", function(d) {\n                            return color(d.name);\n                        })\n                        .style(\"fill\", \"none\")\n                        .style(\"stroke-width\", \"1px\")\n                        .style(\"opacity\", \"0\");\n        mousePerLine.append(\"text\")\n                    .attr(\"transform\", \"translate(10,3)\"); \n        tooltipArea\n                    .append(\"svg:rect\")\n                    .attr('width', width)\n                    .attr('height', height)\n                    .attr('fill', 'none')\n                    .attr('pointer-events', 'all')\n                    .on('mouseout', function() { // on mouse out hide line, circles and text\n                        d3.select(\"#tooltip-line\")\n                          .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                          .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line text\")\n                          .style(\"opacity\", \"0\")\n                    })\n                    .on('mouseover', function() { // on mouse in show line, circles and text\n                        d3.select(\"#tooltip-line\")\n                          .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                          .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line text\")\n                          .style(\"opacity\", \"1\")\n\n                    })\n                    .on('mousemove', function() { // mouse moving over canvas\n                        var mouse = d3.mouse(this);\n                        var xCoord = mouse[0];\n                        d3\n                            .select(\"#tooltip-line\")\n                            .attr(\"d\", function() {\n                                var d = \"M\" + xCoord + \",\" + height;\n                                d += \" \" + xCoord + \",\" + 0;\n                                return d;\n                            });\n                        d3\n                            .selectAll(\".mouse-per-line\")\n                            .attr(\"transform\", function(d, i) {\n                                if (d.data.length == 0) {return;}\n                                var date = x.invert(xCoord);\n                                const index = d3.bisector(f => f.date).left(compiledData[i].data, date);\n                                var a = null;\n                                if (index > 0) {\n                                    a = d.data[index - 1];\n                                }\n                                const b = d.data[index];\n                                //d = the data object corresponding to date and value pointed by the cursors\n                                var data = null;\n                                if (!a) {\n                                    data = b;\n                                }\n                                else if (!b) {\n                                    data = a;\n                                }\n                                else {\n                                    data = b && (date - a.date > b.date - date) ? b : a;\n                                }\n                                if (+d3.timeDay.floor(date) == +data.date || +d3.timeDay.ceil(date) == +data.date) {\n                                    if (data.defined != 0) {\n                                        var element = d3.select(this)\n                                                        .select('text')\n                                                            .style(\"opacity\", \"1\")\n                                                            .text(Math.round(data.value).toFixed(2));\n                                        element.select(\"circle\")\n                                                .style(\"opacity\", \"1\");\n                                        return \"translate(\" + mouse[0] + \",\" + y(data.value)+\")\";\n                                    }\n                                }\n                                var element = d3.select(this)\n                                                .select(\"text\")\n                                                .style(\"opacity\", \"0\")\n                                element\n                                        .select(\"circle\")\n                                        .style(\"opacity\", \"0\");\n                                \n                        });\n                    })\n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        var deleteButton = document.createElement(\"button\")\n        deleteButton.innerText = \"Delete\";\n        deleteButton.onclick = () => {\n            this.deletePrediction(category)\n            console.log(predStartDate)\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            console.log(predictionData)\n            //update yourLine\n            var filtered = predictionData.filter(predLine.defined())\n            console.log(filtered)\n            yourLine.datum(filtered)\n                    .attr('d', predLine)\n        };\n        document.querySelector(\"body\").appendChild(deleteButton);\n    }\n        \n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default InteractiveChart;"]},"metadata":{},"sourceType":"module"}