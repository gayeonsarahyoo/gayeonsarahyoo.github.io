{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/LineChart/index.js\";\nimport React from 'react';\nimport Chart from 'chart.js';\nimport 'chartjs-plugin-dragdata';\nimport PropTypes from 'prop-types';\n\nclass LineChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userPrediction: null\n    };\n    this.chartRef = React.createRef(); // create reference for chart in class\n  }\n\n  componentDidMount() {\n    this.renderChart();\n  }\n\n  savePrediction(model, data) {\n    fetch('/update/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"model\": model,\n        \"data\": data\n      })\n    });\n  }\n\n  renderChart() {\n    const {\n      data,\n      org,\n      userPrediction,\n      confirmed\n    } = this.props;\n    const model = org;\n    const savePrediction = this.savePrediction;\n    this.myChart = new Chart(this.chartRef.current, {\n      type: 'line',\n      data: {\n        labels: Object.keys(data),\n        datasets: [// Settings for user prediction graph\n        {\n          label: \"User's Prediciton\",\n          data: userPrediction[model].value,\n          backgroundColor: ['rgba(64, 64, 64, 0.2)'],\n          borderWidth: 1,\n          dragData: true // User's predictions are draggable\n\n        }, // Settings for graph of forecasted deaths\n        {\n          label: 'Estimated Deaths',\n          data: Object.values(data),\n          backgroundColor: ['rgba(255, 99, 130, 0.2)'],\n          borderWidth: 1,\n          dragData: false\n        }, // Settings for graph of confirmed deaths\n        {\n          label: 'Confirmed Deaths',\n          data: Object.values(confirmed),\n          backgroundColor: ['rgba(130, 99, 255, 0.2)'],\n          borderWidth: 1,\n          dragData: false\n        }]\n      },\n      options: {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        },\n        title: {\n          display: true,\n          text: this.props.org,\n          fontSize: 30\n        },\n        dragData: true,\n        dragDataRound: 1,\n        dragOptions: {\n          showTooltip: true\n        },\n        onDragStart: function (e) {// console.log(e)\n        },\n        onDrag: function (e, datasetIndex, index, value) {\n          e.target.style.cursor = 'grabbing';\n        },\n        onDragEnd: function (e, datasetIndex, index, value) {\n          e.target.style.cursor = 'default';\n          savePrediction(model, userPrediction[model]);\n        },\n        hover: {\n          onHover: function (e) {\n            const point = this.getElementAtEvent(e);\n            if (point.length) e.target.style.cursor = 'grab';else e.target.style.cursor = 'default';\n          }\n        }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nLineChart.propTypes = {\n  data: PropTypes.object.isRequired,\n  org: PropTypes.string.isRequired,\n  userPrediction: PropTypes.object.isRequired,\n  confirmed: PropTypes.object.isRequired\n};\nexport default LineChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/LineChart/index.js"],"names":["React","Chart","PropTypes","LineChart","Component","constructor","props","state","userPrediction","chartRef","createRef","componentDidMount","renderChart","savePrediction","model","data","fetch","method","headers","body","JSON","stringify","org","confirmed","myChart","current","type","labels","Object","keys","datasets","label","value","backgroundColor","borderWidth","dragData","values","options","scales","yAxes","ticks","beginAtZero","title","display","text","fontSize","dragDataRound","dragOptions","showTooltip","onDragStart","e","onDrag","datasetIndex","index","target","style","cursor","onDragEnd","hover","onHover","point","getElementAtEvent","length","render","propTypes","object","isRequired","string"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,yBAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,SAAN,SAAwBH,KAAK,CAACI,SAA9B,CAAwC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,cAAc,EAAE;AAAlB,KAAb;AACA,SAAKC,QAAL,GAAgBT,KAAK,CAACU,SAAN,EAAhB,CAHiB,CAGkB;AACpC;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,WAAL;AACD;;AAEDC,EAAAA,cAAc,CAACC,KAAD,EAAQC,IAAR,EAAc;AAC1BC,IAAAA,KAAK,CAAC,UAAD,EAAY;AACfC,MAAAA,MAAM,EAAE,MADO;AAEfC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFM;AAKfC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAC,iBAASP,KAAV;AAAiB,gBAAQC;AAAzB,OAAf;AALS,KAAZ,CAAL;AAOD;;AAEDH,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAEG,MAAAA,IAAF;AAAQO,MAAAA,GAAR;AAAad,MAAAA,cAAb;AAA6Be,MAAAA;AAA7B,QAA2C,KAAKjB,KAAtD;AACA,UAAMQ,KAAK,GAAGQ,GAAd;AACA,UAAMT,cAAc,GAAG,KAAKA,cAA5B;AACA,SAAKW,OAAL,GAAe,IAAIvB,KAAJ,CAAU,KAAKQ,QAAL,CAAcgB,OAAxB,EAAiC;AAC9CC,MAAAA,IAAI,EAAE,MADwC;AAE9CX,MAAAA,IAAI,EAAE;AACJY,QAAAA,MAAM,EAAEC,MAAM,CAACC,IAAP,CAAYd,IAAZ,CADJ;AAEJe,QAAAA,QAAQ,EAAE,CAAE;AACV;AACIC,UAAAA,KAAK,EAAE,mBADX;AAEIhB,UAAAA,IAAI,EAAEP,cAAc,CAACM,KAAD,CAAd,CAAsBkB,KAFhC;AAGIC,UAAAA,eAAe,EAAE,CACf,uBADe,CAHrB;AAMIC,UAAAA,WAAW,EAAE,CANjB;AAOIC,UAAAA,QAAQ,EAAE,IAPd,CAOoB;;AAPpB,SADQ,EAUR;AACA;AACIJ,UAAAA,KAAK,EAAE,kBADX;AAEIhB,UAAAA,IAAI,EAAEa,MAAM,CAACQ,MAAP,CAAcrB,IAAd,CAFV;AAGIkB,UAAAA,eAAe,EAAE,CACb,yBADa,CAHrB;AAMIC,UAAAA,WAAW,EAAE,CANjB;AAOIC,UAAAA,QAAQ,EAAE;AAPd,SAXQ,EAoBR;AACA;AACIJ,UAAAA,KAAK,EAAE,kBADX;AAEIhB,UAAAA,IAAI,EAAEa,MAAM,CAACQ,MAAP,CAAcb,SAAd,CAFV;AAGIU,UAAAA,eAAe,EAAE,CACf,yBADe,CAHrB;AAMIC,UAAAA,WAAW,EAAE,CANjB;AAOIC,UAAAA,QAAQ,EAAE;AAPd,SArBQ;AAFN,OAFwC;AAoC9CE,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE,CAAC;AACJC,YAAAA,KAAK,EAAE;AACHC,cAAAA,WAAW,EAAE;AADV;AADH,WAAD;AADH,SADH;AAQLC,QAAAA,KAAK,EAAE;AACLC,UAAAA,OAAO,EAAE,IADJ;AAELC,UAAAA,IAAI,EAAE,KAAKtC,KAAL,CAAWgB,GAFZ;AAGLuB,UAAAA,QAAQ,EAAE;AAHL,SARF;AAaLV,QAAAA,QAAQ,EAAE,IAbL;AAcLW,QAAAA,aAAa,EAAE,CAdV;AAeLC,QAAAA,WAAW,EAAE;AACXC,UAAAA,WAAW,EAAE;AADF,SAfR;AAkBLC,QAAAA,WAAW,EAAE,UAASC,CAAT,EAAY,CACvB;AACD,SApBI;AAqBLC,QAAAA,MAAM,EAAE,UAASD,CAAT,EAAYE,YAAZ,EAA0BC,KAA1B,EAAiCrB,KAAjC,EAAwC;AAC9CkB,UAAAA,CAAC,CAACI,MAAF,CAASC,KAAT,CAAeC,MAAf,GAAwB,UAAxB;AACD,SAvBI;AAwBLC,QAAAA,SAAS,EAAE,UAASP,CAAT,EAAYE,YAAZ,EAA0BC,KAA1B,EAAiCrB,KAAjC,EAAwC;AACjDkB,UAAAA,CAAC,CAACI,MAAF,CAASC,KAAT,CAAeC,MAAf,GAAwB,SAAxB;AACA3C,UAAAA,cAAc,CAACC,KAAD,EAAQN,cAAc,CAACM,KAAD,CAAtB,CAAd;AACD,SA3BI;AA4BL4C,QAAAA,KAAK,EAAE;AACLC,UAAAA,OAAO,EAAE,UAAST,CAAT,EAAY;AACnB,kBAAMU,KAAK,GAAG,KAAKC,iBAAL,CAAuBX,CAAvB,CAAd;AACA,gBAAIU,KAAK,CAACE,MAAV,EAAkBZ,CAAC,CAACI,MAAF,CAASC,KAAT,CAAeC,MAAf,GAAwB,MAAxB,CAAlB,KACKN,CAAC,CAACI,MAAF,CAASC,KAAT,CAAeC,MAAf,GAAwB,SAAxB;AACN;AALI;AA5BF;AApCqC,KAAjC,CAAf;AAyED;;AAEDO,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAQ,MAAA,GAAG,EAAE,KAAKtD,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAtGqC;;AAyGxCN,SAAS,CAAC6D,SAAV,GAAsB;AACpBjD,EAAAA,IAAI,EAAEb,SAAS,CAAC+D,MAAV,CAAiBC,UADH;AAEpB5C,EAAAA,GAAG,EAAEpB,SAAS,CAACiE,MAAV,CAAiBD,UAFF;AAGpB1D,EAAAA,cAAc,EAAEN,SAAS,CAAC+D,MAAV,CAAiBC,UAHb;AAIpB3C,EAAAA,SAAS,EAAErB,SAAS,CAAC+D,MAAV,CAAiBC;AAJR,CAAtB;AAOA,eAAe/D,SAAf","sourcesContent":["import React from 'react';\nimport Chart from 'chart.js';\nimport 'chartjs-plugin-dragdata';\nimport PropTypes from 'prop-types';\n\nclass LineChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { userPrediction: null };\n    this.chartRef = React.createRef(); // create reference for chart in class\n  }\n\n  componentDidMount() {\n    this.renderChart();\n  }\n\n  savePrediction(model, data) {\n    fetch('/update/',{\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\"model\": model, \"data\": data}),\n    });\n  }\n\n  renderChart() {\n    const { data, org, userPrediction, confirmed } = this.props;\n    const model = org;\n    const savePrediction = this.savePrediction;\n    this.myChart = new Chart(this.chartRef.current, {\n      type: 'line',\n      data: {\n        labels: Object.keys(data),\n        datasets: [ // Settings for user prediction graph\n          {\n              label: \"User's Prediciton\",\n              data: userPrediction[model].value,\n              backgroundColor: [\n                'rgba(64, 64, 64, 0.2)',\n              ],\n              borderWidth: 1,\n              dragData: true, // User's predictions are draggable\n          },\n          // Settings for graph of forecasted deaths\n          {\n              label: 'Estimated Deaths',\n              data: Object.values(data),\n              backgroundColor: [\n                  'rgba(255, 99, 130, 0.2)',\n              ],\n              borderWidth: 1,\n              dragData: false,\n          }, \n          // Settings for graph of confirmed deaths\n          {\n              label: 'Confirmed Deaths',\n              data: Object.values(confirmed),\n              backgroundColor: [\n                'rgba(130, 99, 255, 0.2)',\n              ],\n              borderWidth: 1,\n              dragData: false,\n          }\n        ]\n      },\n      options: {\n          scales: {\n              yAxes: [{\n                  ticks: {\n                      beginAtZero: true\n                  }\n              }]\n          },\n          title: {\n            display: true,\n            text: this.props.org,\n            fontSize: 30\n          },\n          dragData: true,\n          dragDataRound: 1,\n          dragOptions: {\n            showTooltip: true\n          },\n          onDragStart: function(e) {\n            // console.log(e)\n          },\n          onDrag: function(e, datasetIndex, index, value) {\n            e.target.style.cursor = 'grabbing'\n          },\n          onDragEnd: function(e, datasetIndex, index, value) {\n            e.target.style.cursor = 'default';\n            savePrediction(model, userPrediction[model]);\n          },\n          hover: {\n            onHover: function(e) {\n              const point = this.getElementAtEvent(e)\n              if (point.length) e.target.style.cursor = 'grab'\n              else e.target.style.cursor = 'default'\n            }\n          }\n      }\n    });\n  }\n\n  render() {\n    return <canvas ref={this.chartRef} />;\n  }\n}\n\nLineChart.propTypes = {\n  data: PropTypes.object.isRequired,\n  org: PropTypes.string.isRequired,\n  userPrediction: PropTypes.object.isRequired,\n  confirmed: PropTypes.object.isRequired,\n};\n\nexport default LineChart;\n"]},"metadata":{},"sourceType":"module"}