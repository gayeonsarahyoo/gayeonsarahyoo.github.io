{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/containers/InteractiveChartContainer/index.js\";\nimport React, { Component } from 'react';\nimport InteractiveChart from '../../components/InteractiveChart';\nimport { cleanConfirmedData, organizeData } from '../../utils/data';\n/*function InteractiveCharts({ dataSet, orgs, userPrediction, confirmed }) {\n    return dataSet.map((data, index) => {\n      return (\n        <InteractiveChart forecast={data} org={orgs[index]} userPrediction={userPrediction} confirmed={confirmed} />\n       );\n    })\n  }*/\n\nclass InteractiveChartContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      forecast: null,\n      orgs: null,\n      confirmed: null,\n      userPrediction: null,\n      aggregate: null,\n      userStatus\n    };\n  }\n\n  componentDidMount() {\n    fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n      const [results, orgs] = organizeData(data);\n      this.setState({\n        forecast: results,\n        orgs\n      });\n    });\n    fetch('/user-prediction?category=us_daily_deaths').then(res => res.json()).then(data => {\n      this.setState({\n        userPrediction: data\n      });\n      console.log(data);\n    });\n    fetch('/us-inc-deaths-confirmed-wk-avg').then(res => res.json()).then(data => {\n      //const result = JSON.parse(data);\n      this.setState({\n        confirmed: data\n      });\n    });\n    fetch('/us-agg-inc-deaths').then(res => res.json()).then(data => {\n      this.setState({\n        aggregate: data\n      });\n    });\n    fetch('/user-status').then(res => res.json()).then(data => {\n      this.setState({\n        userStatus: data\n      });\n    });\n  }\n\n  render() {\n    const {\n      forecast,\n      orgs,\n      userPrediction,\n      confirmed,\n      aggregate,\n      userStatus\n    } = this.state;\n    if (!forecast || !orgs || !userPrediction || !confirmed || !aggregate || !userStatus) return 'Loading...';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chartContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InteractiveChart, {\n      forecast: forecast,\n      orgs: orgs,\n      userPrediction: userPrediction,\n      confirmed: confirmed,\n      aggregate: aggregate,\n      userStatus: userStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default InteractiveChartContainer;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/containers/InteractiveChartContainer/index.js"],"names":["React","Component","InteractiveChart","cleanConfirmedData","organizeData","InteractiveChartContainer","constructor","props","state","forecast","orgs","confirmed","userPrediction","aggregate","userStatus","componentDidMount","fetch","then","res","json","data","results","setState","console","log","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport InteractiveChart from '../../components/InteractiveChart';\nimport { cleanConfirmedData, organizeData } from '../../utils/data';\n\n/*function InteractiveCharts({ dataSet, orgs, userPrediction, confirmed }) {\n    return dataSet.map((data, index) => {\n      return (\n        <InteractiveChart forecast={data} org={orgs[index]} userPrediction={userPrediction} confirmed={confirmed} />\n       );\n    })\n  }*/\n\nclass InteractiveChartContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            forecast: null,\n            orgs: null,\n            confirmed: null,\n            userPrediction: null,\n            aggregate: null,\n            userStatus\n        };\n    }\n\n    componentDidMount() {\n        fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n            const [results, orgs] = organizeData(data);\n            this.setState({ forecast: results, orgs });\n        });\n            fetch('/user-prediction?category=us_daily_deaths').then(res => res.json()).then(data => {\n            this.setState({ userPrediction: data });\n            console.log(data);\n        });\n        fetch('/us-inc-deaths-confirmed-wk-avg').then(res => res.json()).then(data => {\n            //const result = JSON.parse(data);\n            this.setState({ confirmed: data });\n        });\n        fetch('/us-agg-inc-deaths').then(res => res.json()).then(data => {\n            this.setState({ aggregate: data });\n        });\n        fetch('/user-status').then(res => res.json()).then(data => {\n            this.setState({ userStatus: data });\n        });\n    }\n    render() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate, userStatus } = this.state;\n        if (!forecast || !orgs || !userPrediction || !confirmed || !aggregate || !userStatus) return 'Loading...';\n\n        return (\n            <div className=\"chartContainer\">\n                <InteractiveChart\n                    forecast={forecast}\n                    orgs={orgs}\n                    userPrediction={userPrediction}\n                    confirmed={confirmed}\n                    aggregate={aggregate}\n                    userStatus={userStatus}\n                />\n            </div>\n        );\n    }\n}\n\nexport default InteractiveChartContainer;"]},"metadata":{},"sourceType":"module"}