{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/containers/UserPredictionChartContainer/index.js\";\nimport React, { Component } from 'react';\nimport UserPredictionChart from '../../components/UserPredictionChart';\nimport { cleanConfirmedData, organizeData } from '../../utils/data';\n\nclass UserPredictionChartContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      forecast: null,\n      orgs: null,\n      confirmed: null,\n      userPrediction: null,\n      aggregate: null\n    };\n  }\n\n  componentDidMount() {\n    fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n      const [results, orgs] = organizeData(data);\n      this.setState({\n        forecast: results,\n        orgs\n      });\n    });\n    fetch('/user-prediction?category=us_daily_deaths').then(res => res.json()).then(data => {\n      this.setState({\n        userPrediction: data\n      });\n      console.log(data);\n    });\n    fetch('/us-inc-deaths-confirmed').then(res => res.json()).then(data => {\n      //const result = JSON.parse(data);\n      this.setState({\n        confirmed: data\n      });\n    });\n    fetch('/us-agg-inc-deaths').then(res => res.json()).then(data => {\n      this.setState({\n        aggregate: data\n      });\n    });\n  }\n\n  render() {\n    const {\n      forecast,\n      orgs,\n      userPrediction,\n      confirmed,\n      aggregate\n    } = this.state;\n    if (!forecast || !orgs || !userPrediction || !confirmed || !aggregate) return 'Loading...';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    })\n    /*<div className=\"chartContainer\">\n        <UserPredictionChart\n            forecast={forecast}\n            orgs={orgs}\n            userPrediction={userPrediction}\n            confirmed={confirmed}\n            aggregate={aggregate}\n        />\n    </div>*/\n    ;\n  }\n\n}\n\nexport default UserPredictionChartContainer;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/containers/UserPredictionChartContainer/index.js"],"names":["React","Component","UserPredictionChart","cleanConfirmedData","organizeData","UserPredictionChartContainer","constructor","props","state","forecast","orgs","confirmed","userPrediction","aggregate","componentDidMount","fetch","then","res","json","data","results","setState","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,mBAAP,MAAgC,sCAAhC;AACA,SAASC,kBAAT,EAA6BC,YAA7B,QAAiD,kBAAjD;;AAEA,MAAMC,4BAAN,SAA2CJ,SAA3C,CAAqD;AACjDK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,IADD;AAETC,MAAAA,IAAI,EAAE,IAFG;AAGTC,MAAAA,SAAS,EAAE,IAHF;AAITC,MAAAA,cAAc,EAAE,IAJP;AAKTC,MAAAA,SAAS,EAAE;AALF,KAAb;AAOH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAAC,0BAAD,CAAL,CAAkCC,IAAlC,CAAuCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA9C,EAA0DF,IAA1D,CAA+DG,IAAI,IAAI;AACnE,YAAM,CAACC,OAAD,EAAUV,IAAV,IAAkBN,YAAY,CAACe,IAAD,CAApC;AACA,WAAKE,QAAL,CAAc;AAAEZ,QAAAA,QAAQ,EAAEW,OAAZ;AAAqBV,QAAAA;AAArB,OAAd;AACH,KAHD;AAIIK,IAAAA,KAAK,CAAC,2CAAD,CAAL,CAAmDC,IAAnD,CAAwDC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA/D,EAA2EF,IAA3E,CAAgFG,IAAI,IAAI;AACxF,WAAKE,QAAL,CAAc;AAAET,QAAAA,cAAc,EAAEO;AAAlB,OAAd;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACH,KAHG;AAIJJ,IAAAA,KAAK,CAAC,0BAAD,CAAL,CAAkCC,IAAlC,CAAuCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA9C,EAA0DF,IAA1D,CAA+DG,IAAI,IAAI;AACnE;AACA,WAAKE,QAAL,CAAc;AAAEV,QAAAA,SAAS,EAAEQ;AAAb,OAAd;AACH,KAHD;AAIAJ,IAAAA,KAAK,CAAC,oBAAD,CAAL,CAA4BC,IAA5B,CAAiCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAxC,EAAoDF,IAApD,CAAyDG,IAAI,IAAI;AAC7D,WAAKE,QAAL,CAAc;AAAER,QAAAA,SAAS,EAAEM;AAAb,OAAd;AACH,KAFD;AAGH;;AACDK,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEf,MAAAA,QAAF;AAAYC,MAAAA,IAAZ;AAAkBE,MAAAA,cAAlB;AAAkCD,MAAAA,SAAlC;AAA6CE,MAAAA;AAA7C,QAA2D,KAAKL,KAAtE;AACA,QAAI,CAACC,QAAD,IAAa,CAACC,IAAd,IAAsB,CAACE,cAAvB,IAAyC,CAACD,SAA1C,IAAuD,CAACE,SAA5D,EAAuE,OAAO,YAAP;AAEvE,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAFJ;AAYH;;AA7CgD;;AAgDrD,eAAeR,4BAAf","sourcesContent":["import React, { Component } from 'react';\nimport UserPredictionChart from '../../components/UserPredictionChart';\nimport { cleanConfirmedData, organizeData } from '../../utils/data';\n\nclass UserPredictionChartContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            forecast: null,\n            orgs: null,\n            confirmed: null,\n            userPrediction: null,\n            aggregate: null\n        };\n    }\n\n    componentDidMount() {\n        fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n            const [results, orgs] = organizeData(data);\n            this.setState({ forecast: results, orgs });\n        });\n            fetch('/user-prediction?category=us_daily_deaths').then(res => res.json()).then(data => {\n            this.setState({ userPrediction: data });\n            console.log(data);\n        });\n        fetch('/us-inc-deaths-confirmed').then(res => res.json()).then(data => {\n            //const result = JSON.parse(data);\n            this.setState({ confirmed: data });\n        });\n        fetch('/us-agg-inc-deaths').then(res => res.json()).then(data => {\n            this.setState({ aggregate: data });\n        });\n    }\n    render() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.state;\n        if (!forecast || !orgs || !userPrediction || !confirmed || !aggregate) return 'Loading...';\n\n        return (\n            <div></div>\n            /*<div className=\"chartContainer\">\n                <UserPredictionChart\n                    forecast={forecast}\n                    orgs={orgs}\n                    userPrediction={userPrediction}\n                    confirmed={confirmed}\n                    aggregate={aggregate}\n                />\n            </div>*/\n        );\n    }\n}\n\nexport default UserPredictionChartContainer;"]},"metadata":{},"sourceType":"module"}