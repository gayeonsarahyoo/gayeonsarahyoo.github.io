{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/UserPredictionChart/index.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './UserPredictionChart.css';\nimport { getMostRecentPrediction, sortDictByDate } from '../../utils/data';\n\nclass UserPredictionChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      category: \"us_daily_deaths\"\n    };\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    //console.log(this.props);\n    this.renderChart();\n  }\n\n  renderChart() {\n    const {\n      forecast,\n      orgs,\n      userPrediction,\n      confirmed,\n      aggregate\n    } = this.props;\n    var predictionData = {}; //where we will store formatted userPrediction\n\n    const mostRecentPred = predictionData[temp[temp.length - 1]];\n    const category = this.state.category;\n    var compiledData = []; //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n\n    var confirmedData = Object.keys(confirmed).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: confirmed[key]\n    })); //store userPrediction in predictionData if it exists; parse dates and store as d3 date objects\n\n    if (Object.keys(userPrediction).length > 0) {\n      Object.keys(userPrediction).map(p => {\n        predictionData[p] = userPrediction[p].map(d => ({\n          date: d3.timeParse(\"%Y-%m-%d\")(d.date.substring(0, 10)),\n          value: d.value,\n          defined: d.defined\n        }));\n      });\n    }\n\n    predictionData = sortDictByDate(predictionData);\n    console.log(predictionData); //IMPORTANT BOUNDARIES// \n\n    const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\");\n    var temp = Object.keys(predictionData);\n    const predEndDate = mostRecentPred[mostRecentPred.length - 1].date;\n    const valueMax = 5000; /////////////////////////////////////////////////DRAW CHART//////////////////////////////\n    //set up margin, width, height of chart\n\n    const legendWidth = 180;\n    const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n\n    const contextHeight = 100;\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        width = 800 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    var svg = d3.select(this.chartRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right + legendWidth).attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    var x = d3.scaleTime().domain([confirmedStartDate, predEndDate]).range([0, width]);\n    var xAxis = svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x));\n    var y = d3.scaleLinear().domain([0, valueMax]).range([height, 0]);\n    var yAxis = svg.append(\"g\").call(d3.axisLeft(y)); //DRAW LEGEND//\n\n    const legendString = [\"Daily Confirmed Deaths\", \"User Prediction\"];\n    const color = d3.scaleOrdinal().domain(legendString).range(d3.schemeTableau10);\n    const legend = svg.append('g').attr(\"id\", \"legend\");\n    legend.selectAll(\"rect\").data(legendString).enter().append(\"circle\").attr('cx', width + 30).attr(\"cy\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .attr(\"r\", 6) //.attr(\"width\", size)\n    //.attr(\"height\", size)\n    .style(\"fill\", function (d) {\n      return color(d);\n    });\n    legend.selectAll(\"labels\").data(legendString).enter().append(\"text\").attr(\"x\", width + 45).attr(\"y\", function (d, i) {\n      return 20 + i * 25;\n    }) // 100 is where the first dot appears. 25 is the distance between dots\n    .style(\"fill\", function (d) {\n      return color(d);\n    }).text(function (d) {\n      return d;\n    }).attr(\"text-anchor\", \"left\").style(\"alignment-baseline\", \"middle\"); //SET UP CLIP PATH//\n\n    var mainClip = svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\", \"main-clip\").append(\"svg:rect\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", 0).attr(\"y\", 0);\n    const mainArea = svg.append(\"g\").attr(\"clip-path\", \"url(#main-clip)\"); //SET UP CURVES//\n\n    const lineGenerator = d3.line().curve(d3.curveCatmullRom);\n    const predLineGenerator = d3.line().curve(d3.curveBasis);\n    const line = lineGenerator.x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    });\n    const predLine = predLineGenerator.defined(d => d.defined).x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }); //DRAW CURVES//\n\n    var confirmedCurve = mainArea.append(\"path\").attr(\"id\", \"confirmed\").attr(\"class\", \"line\").datum(confirmedData).attr(\"d\", line).attr(\"stroke\", color(legendString[0]));\n    var predCurve = mainArea.append(\"path\").attr(\"id\", \"prediction\").attr(\"class\", \"line\").datum(mostRecentPred.filter(predLine.defined())).attr(\"d\", predLine).attr(\"stroke\", color(legendString[1])); //SET UP TOOLTIP//\n\n    const tooltip = svg.append(\"g\").attr(\"class\", \"tooltip\");\n    tooltip.append(\"path\").attr(\"id\", \"tooltip-line\").style(\"stroke\", \"black\").style(\"stroke-width\", \"0.5px\").style(\"opacity\", \"0\");\n    var mousePerLine = tooltip.selectAll(\".mouse-per-line\").data(compiledData).enter().append(\"g\").attr(\"class\", \"mouse-per-line\");\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default UserPredictionChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/UserPredictionChart/index.js"],"names":["React","Component","d3","getMostRecentPrediction","sortDictByDate","UserPredictionChart","constructor","props","state","category","chartRef","createRef","componentDidMount","renderChart","forecast","orgs","userPrediction","confirmed","aggregate","predictionData","mostRecentPred","temp","length","compiledData","confirmedData","Object","keys","map","key","date","timeParse","value","p","d","substring","defined","console","log","confirmedStartDate","predEndDate","valueMax","legendWidth","toolTipHeight","contextHeight","margin","top","right","bottom","left","width","height","svg","select","current","append","attr","x","scaleTime","domain","range","xAxis","call","axisBottom","y","scaleLinear","yAxis","axisLeft","legendString","color","scaleOrdinal","schemeTableau10","legend","selectAll","data","enter","i","style","text","mainClip","mainArea","lineGenerator","line","curve","curveCatmullRom","predLineGenerator","curveBasis","predLine","confirmedCurve","datum","predCurve","filter","tooltip","mousePerLine","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './UserPredictionChart.css';\nimport { getMostRecentPrediction, sortDictByDate } from '../../utils/data';\n\nclass UserPredictionChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\" };\n        this.chartRef = React.createRef();\n    }\n\n    componentDidMount() {\n        //console.log(this.props);\n        this.renderChart();\n    }\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = {};//where we will store formatted userPrediction\n        const mostRecentPred = predictionData[temp[temp.length - 1]]\n        const category = this.state.category;\n        var compiledData = [];\n\n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n\n        //store userPrediction in predictionData if it exists; parse dates and store as d3 date objects\n        if(Object.keys(userPrediction).length > 0) {\n            Object.keys(userPrediction).map(p => {\n                predictionData[p]= userPrediction[p].map(d => ({\n                    date: d3.timeParse(\"%Y-%m-%d\")((d.date).substring(0,10)),\n                    value: d.value,\n                    defined: d.defined\n                }))\n            })\n        }\n        predictionData = sortDictByDate(predictionData);\n        console.log(predictionData)\n\n        //IMPORTANT BOUNDARIES// \n        const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\");\n        var temp = Object.keys(predictionData)\n        const predEndDate = mostRecentPred[mostRecentPred.length - 1].date;\n        const valueMax = 5000;\n        /////////////////////////////////////////////////DRAW CHART//////////////////////////////\n        //set up margin, width, height of chart\n        const legendWidth = 180;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        var x = d3\n                    .scaleTime()\n                    .domain([confirmedStartDate, predEndDate])\n                    .range([0, width]);\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        var y = d3\n                    .scaleLinear()\n                    .domain([0, valueMax])\n                    .range([height, 0]);\n        var yAxis = svg\n                        .append(\"g\")\n                        .call(d3.axisLeft(y));\n        \n        //DRAW LEGEND//\n        const legendString = [\"Daily Confirmed Deaths\", \"User Prediction\"];\n        const color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n        const legend = svg\n                            .append('g')\n                            .attr(\"id\", \"legend\");\n        legend\n                .selectAll(\"rect\")\n                .data(legendString)\n                .enter()\n                .append(\"circle\")\n                    .attr('cx', width + 30)\n                    .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .attr(\"r\", 6)\n                    //.attr(\"width\", size)\n                    //.attr(\"height\", size)\n                    .style(\"fill\", function(d){ return color(d)})\n        legend\n                .selectAll(\"labels\")\n                .data(legendString)\n                .enter()\n                .append(\"text\")\n                    .attr(\"x\", width + 45)\n                    .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .style(\"fill\", function(d){ return color(d)})\n                    .text(function(d){ return d})\n                        .attr(\"text-anchor\", \"left\")\n                        .style(\"alignment-baseline\", \"middle\")\n        \n        //SET UP CLIP PATH//\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n        const mainArea = svg.append(\"g\")\n                            .attr(\"clip-path\", \"url(#main-clip)\");\n        \n        //SET UP CURVES//\n        const lineGenerator = d3.line()\n                                .curve(d3.curveCatmullRom);\n        const predLineGenerator = d3.line()\n                                    .curve(d3.curveBasis);\n        const line = lineGenerator\n                        .x(function(d) { return x(d.date) })\n                        .y(function(d) { return y(d.value) })\n        const predLine = predLineGenerator\n                            .defined(d => d.defined)\n                            .x(function(d) { return x(d.date) })\n                            .y(function(d) { return y(d.value) })\n        //DRAW CURVES//\n        var confirmedCurve = mainArea\n                                    .append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")\n                                    .datum(confirmedData)\n                                    .attr(\"d\", line)\n                                    .attr(\"stroke\", color(legendString[0]))\n        var predCurve = mainArea\n                                .append(\"path\")\n                                .attr(\"id\", \"prediction\")\n                                .attr(\"class\", \"line\")\n                                .datum(mostRecentPred.filter(predLine.defined()))\n                                .attr(\"d\", predLine)\n                                .attr(\"stroke\",  color(legendString[1]))\n        \n        //SET UP TOOLTIP//\n        const tooltip = svg \n                            .append(\"g\")\n                            .attr(\"class\", \"tooltip\")\n        tooltip\n                .append(\"path\")\n                .attr(\"id\", \"tooltip-line\")\n                .style(\"stroke\", \"black\")\n                .style(\"stroke-width\", \"0.5px\")\n                .style(\"opacity\", \"0\");\n        var mousePerLine = tooltip\n                                    .selectAll(\".mouse-per-line\")\n                                    .data(compiledData)\n                                    .enter()\n                                    .append(\"g\")\n                                    .attr(\"class\", \"mouse-per-line\");\n    }\n\n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default UserPredictionChart;\n"]},"metadata":{},"sourceType":"module"}