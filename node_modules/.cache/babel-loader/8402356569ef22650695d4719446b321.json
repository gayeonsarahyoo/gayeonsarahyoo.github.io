{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './InteractiveChart.css';\nimport { cleanConfirmedData, clamp } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\n\nclass InteractiveChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userPrediction: null\n    };\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    //console.log(this.props);\n    this.renderChart();\n  }\n\n  savePrediction(model, data) {\n    fetch('/update/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"model\": model,\n        \"data\": data\n      })\n    });\n  }\n\n  renderChart() {\n    const {\n      forecast,\n      org,\n      userPrediction,\n      confirmed\n    } = this.props;\n    console.log(confirmed);\n    const model = org; //console.log(model);\n\n    const confirmedResult = cleanConfirmedData(confirmed, Object.keys(forecast));\n    const savePrediction = this.savePrediction; //set up margin, width, height of chart\n\n    var margin = {\n      top: 20,\n      right: 30,\n      bottom: 20,\n      left: 60\n    },\n        width = 800 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    var svg = d3.select(this.chartRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); //console.log(svg);\n    //line function        \n\n    /*var drawLine = d3.line()\n        .x(function(d) { return x(d.year) })\n        .y(function(d) { return y(d.debt) })*/\n    //process data\n\n    var confirmedData = Object.keys(confirmed).map(key => ({\n      date: d3.timeParse(\"%Y-%m-%d\")(key),\n      value: confirmed[key]\n    })); //get data starting 2020-02-01\n\n    confirmedData = confirmedData.filter(d => +d.date >= +new Date(\"2020-02-01\")); //draw x-axis\n\n    var predStartDate = confirmedData[0].date;\n    var predLength = 63;\n    var endDate = addDays(new Date(), predLength);\n    var x = d3.scaleTime().domain([predStartDate, endDate]).range([0, width]).nice();\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Add Y axis\n\n    var y = d3.scaleLinear().domain([0, d3.max(confirmedData, function (d) {\n      return +d.value;\n    })]).range([height, 0]).nice();\n    svg.append(\"g\").call(d3.axisLeft(y));\n    var lineGenerator = d3.line().curve(d3.curveCatmullRom);\n    var predLineGenerator = d3.line().curve(d3.curveBasis); //d3.curveMonotoneX\n    //d3.curveBasis\n    //d3.curveCardinal\n\n    var line = lineGenerator.x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    });\n    var path = svg.append(\"path\").attr(\"id\", \"confirmed\").datum(confirmedData).attr('d', line);\n    var predictionData = [];\n    var currDate = confirmedData[confirmedData.length - 1].date;\n    var defined = true;\n    var value = confirmedData[confirmedData.length - 1].value;\n    var confirmedLastVal = value;\n\n    for (var i = 0; i < predLength; i++) {\n      predictionData.push({\n        date: currDate,\n        value: value,\n        defined: defined\n      });\n      currDate = addDays(currDate, 1);\n      defined = 0;\n      value = 0;\n    } //append click area rect\n\n\n    var confirmedAreaWidth = path.node().getBoundingClientRect().width;\n    var clickAreaWidth = width - confirmedAreaWidth;\n    console.log(path.node().getBoundingClientRect().left);\n    svg.append(\"rect\").attr(\"id\", \"click-area\").attr(\"width\", clickAreaWidth).attr(\"height\", height).attr(\"transform\", \"translate (\" + confirmedAreaWidth + \" 0)\").attr(\"fill\", \"none\").style(\"pointer-events\", \"visible\");\n    var clickArea = d3.select(\"#click-area\");\n    var predLine = predLineGenerator.defined(d => d.defined).x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    });\n    var yourLine = svg.append(\"path\").attr(\"id\", \"your-line\");\n    /*var gapLine = svg.append(\"path\")\n                        .attr(\"id\", \"gap-line\");*/\n\n    var totalData = confirmedData.concat(predictionData);\n    var drag = d3.drag().on(\"drag\", function () {\n      var pos = d3.mouse(this);\n      var date = clamp(predStartDate, endDate, x.invert(pos[0]));\n      var value = clamp(0, 5000, y.invert(pos[1])); //var date = x.invert(pos[0]);\n      //var value = y.invert(pos[1]);\n\n      console.log(value);\n      predictionData.forEach(function (d) {\n        if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date) && +d3.timeDay.round(d.date) != +predStartDate) {\n          d.value = value;\n          d.defined = true;\n        }\n\n        predictionData[0].value = confirmedLastVal; //update totalData everytime predictionData is updated\n\n        totalData = confirmedData.concat(predictionData);\n        /*yourLine.datum(predictionData)\n                .attr('d', predLine)*/\n\n        var filteredData = predictionData.filter(predLine.defined());\n        yourLine.datum(filteredData).attr('d', predLine);\n        /*gapLine.datum(filteredData)\n                .attr('d', predLine(filteredData));*/\n      });\n    });\n    svg.call(drag); //finds the datapoint closest to the mouse (along x)\n\n    var bisect = () => {\n      const bisectDate = d3.bisector(d => d.date).left;\n      return mx => {\n        const date = x.invert(mx);\n        const index = bisectDate(totalData, date, 1);\n        const a = totalData[index - 1];\n        const b = totalData[index];\n        return b && date - a.date > b.date - date ? b : a;\n      };\n    };\n\n    var callout = (g, value) => {\n      if (!value) return g.style(\"display\", \"none\");\n      g.style(\"display\", null).style(\"pointer-events\", \"none\").style(\"font\", \"10px sans-serif\");\n      const path = g.selectAll(\"path\").data([null]).join(\"path\").attr(\"fill\", \"white\").attr(\"stroke\", \"black\");\n      const text = g.selectAll(\"text\").data([null]).join(\"text\").call(text => text.selectAll(\"tspan\").data((value + \"\").split(/\\n/)).join(\"tspan\").attr(\"x\", 0).attr(\"y\", (d, i) => `${i * 1.1}em`).style(\"font-weight\", (_, i) => i ? null : \"bold\").text(d => d));\n      const {\n        x,\n        y,\n        width: w,\n        height: h\n      } = text.node().getBBox();\n      text.attr(\"transform\", `translate(${-w / 2},${15 - y})`);\n      path.attr(\"d\", `M${-w / 2 - 10},5H-5l5,-5l5,5H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n    };\n\n    const tooltip = svg.append(\"g\");\n    svg.on(\"touchmove mousemove\", function () {\n      console.log(\"yep\");\n      var date = x.invert(d3.mouse(this)[0]);\n      const index = d3.bisector(d => d.date).left(totalData, date, 1);\n      const a = totalData[index - 1];\n      const b = totalData[index]; //d = the data object corresponding to date and value pointed by the cursors\n\n      var d = b && date - a.date > b.date - date ? b : a;\n      date = d.date;\n      var value = Math.round(d.value);\n      tooltip.attr(\"transform\", `translate(${x(date)},${y(value)})`).call(callout, `${value}\n                ${formatDate(date)}`);\n    });\n    svg.on(\"touchend mouseleave\", () => tooltip.call(callout, null));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default InteractiveChart;","map":{"version":3,"sources":["/Users/sarah/Documents/Sarah/Projects/reu/covid19-forecasting-market/frontend/src/components/InteractiveChart/index.js"],"names":["React","Component","d3","cleanConfirmedData","clamp","elementType","addDays","formatDate","InteractiveChart","constructor","props","state","userPrediction","chartRef","createRef","componentDidMount","renderChart","savePrediction","model","data","fetch","method","headers","body","JSON","stringify","forecast","org","confirmed","console","log","confirmedResult","Object","keys","margin","top","right","bottom","left","width","height","svg","select","current","append","attr","confirmedData","map","key","date","timeParse","value","filter","d","Date","predStartDate","predLength","endDate","x","scaleTime","domain","range","nice","call","axisBottom","y","scaleLinear","max","axisLeft","lineGenerator","line","curve","curveCatmullRom","predLineGenerator","curveBasis","path","datum","predictionData","currDate","length","defined","confirmedLastVal","i","push","confirmedAreaWidth","node","getBoundingClientRect","clickAreaWidth","style","clickArea","predLine","yourLine","totalData","concat","drag","on","pos","mouse","invert","forEach","timeDay","round","filteredData","bisect","bisectDate","bisector","mx","index","a","b","callout","g","selectAll","join","text","split","_","w","h","getBBox","tooltip","Math","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport './InteractiveChart.css';\nimport { cleanConfirmedData, clamp } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\n\n\nclass InteractiveChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { userPrediction: null };\n        this.chartRef = React.createRef();\n    }\n    componentDidMount() {\n        //console.log(this.props);\n        this.renderChart();\n    }\n\n    savePrediction(model, data) {\n        fetch('/update/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"model\": model, \"data\": data}),\n        });\n    }\n\n    renderChart() {\n        const { forecast, org, userPrediction, confirmed } = this.props;\n        console.log(confirmed);\n        const model = org;\n        //console.log(model);\n        const confirmedResult = cleanConfirmedData(confirmed, Object.keys(forecast));\n        const savePrediction = this.savePrediction;\n        \n        //set up margin, width, height of chart\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right)\n                        .attr(\"height\", height + margin.top + margin.bottom)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        //console.log(svg);\n\n        //line function        \n        /*var drawLine = d3.line()\n            .x(function(d) { return x(d.year) })\n            .y(function(d) { return y(d.debt) })*/\n        //process data\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }))\n\n        //get data starting 2020-02-01\n        confirmedData = confirmedData.filter(d => +d.date >= +new Date(\"2020-02-01\"));\n\n        //draw x-axis\n        var predStartDate = confirmedData[0].date;\n        var predLength = 63;\n        var endDate = addDays(new Date(), predLength);\n        var x = d3.scaleTime()\n            .domain([predStartDate, endDate])\n            .range([ 0, width ])\n            .nice();\n         svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x));\n      // Add Y axis\n        var y = d3.scaleLinear()\n            .domain([0, d3.max(confirmedData, function(d) { return +d.value; })])\n            .range([ height, 0 ])\n            .nice();\n        svg.append(\"g\")\n            .call(d3.axisLeft(y));\n        \n        var lineGenerator = d3.line()\n            .curve(d3.curveCatmullRom)\n            \n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis);\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        var path = svg\n            .append(\"path\")\n            .attr(\"id\", \"confirmed\")    \n            .datum(confirmedData)    \n            .attr('d', line);\n\n        var predictionData = [];\n        var currDate = confirmedData[confirmedData.length - 1].date;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        var confirmedLastVal = value;\n        for (var i = 0; i < predLength; i++) {            \n            predictionData.push({date: currDate, value: value, defined: defined});\n            currDate = addDays(currDate, 1);\n            defined = 0;\n            value = 0;\n        }\n        //append click area rect\n        var confirmedAreaWidth = path.node().getBoundingClientRect().width;\n        var clickAreaWidth = width - confirmedAreaWidth;\n        console.log(path.node().getBoundingClientRect().left);\n        svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");\n        var clickArea = d3.select(\"#click-area\");\n        \n        var predLine = predLineGenerator\n                    .defined(d => d.defined)\n                    .x(function(d) { return x(d.date) })\n                    .y(function(d) { return y(d.value) })\n       \n        var yourLine = svg.append(\"path\")\n                      .attr(\"id\", \"your-line\");\n        /*var gapLine = svg.append(\"path\")\n                            .attr(\"id\", \"gap-line\");*/\n        \n        var totalData = confirmedData.concat(predictionData);\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, endDate, x.invert(pos[0]));\n                        var value = clamp(0, 5000, y.invert(pos[1]));\n                        //var date = x.invert(pos[0]);\n                        //var value = y.invert(pos[1]);\n                        console.log(value);\n                \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) == +d3.timeDay.round(date) && (+d3.timeDay.round(d.date) != +predStartDate)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                            predictionData[0].value = confirmedLastVal;\n                            //update totalData everytime predictionData is updated\n                            totalData = confirmedData.concat(predictionData);\n                            /*yourLine.datum(predictionData)\n                                    .attr('d', predLine)*/\n                            var filteredData = predictionData.filter(predLine.defined())\n\n                            yourLine.datum(filteredData)\n                                    .attr('d', predLine)\n                            \n                            /*gapLine.datum(filteredData)\n                                    .attr('d', predLine(filteredData));*/\n                        });\n                    })\n        \n        svg.call(drag)\n\n        //finds the datapoint closest to the mouse (along x)\n        var bisect = () => {\n            const bisectDate = d3.bisector(d => d.date).left;\n            return mx => {\n                const date = x.invert(mx);\n                const index = bisectDate(totalData, date, 1);\n                const a = totalData[index - 1];\n                const b = totalData[index];\n                return b && (date - a.date > b.date - date) ? b : a;\n            };\n        }\n        var callout = (g, value) => {\n            if (!value) return g.style(\"display\", \"none\");\n          \n            g\n                .style(\"display\", null)\n                .style(\"pointer-events\", \"none\")\n                .style(\"font\", \"10px sans-serif\");\n          \n            const path = g.selectAll(\"path\")\n              .data([null])\n              .join(\"path\")\n                .attr(\"fill\", \"white\")\n                .attr(\"stroke\", \"black\");\n          \n            const text = g.selectAll(\"text\")\n              .data([null])\n              .join(\"text\")\n              .call(text => text\n                .selectAll(\"tspan\")\n                .data((value + \"\").split(/\\n/))\n                .join(\"tspan\")\n                  .attr(\"x\", 0)\n                  .attr(\"y\", (d, i) => `${i * 1.1}em`)\n                  .style(\"font-weight\", (_, i) => i ? null : \"bold\")\n                  .text(d => d));\n          \n            const {x, y, width: w, height: h} = text.node().getBBox();\n          \n            text.attr(\"transform\", `translate(${-w / 2},${15 - y})`);\n            path.attr(\"d\", `M${-w / 2 - 10},5H-5l5,-5l5,5H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n        }\n        const tooltip = svg.append(\"g\");\n\n        svg.on(\"touchmove mousemove\", function() {\n            console.log(\"yep\");\n            var date = x.invert(d3.mouse(this)[0]);\n            const index = d3.bisector(d => d.date).left(totalData, date, 1);\n            const a = totalData[index - 1];\n            const b = totalData[index];\n            //d = the data object corresponding to date and value pointed by the cursors\n            var d = b && (date - a.date > b.date - date) ? b : a;\n            date = d.date;\n            var value = Math.round(d.value);\n\n            tooltip\n                .attr(\"transform\", `translate(${x(date)},${y(value)})`)\n                .call(callout, `${value}\n                ${formatDate(date)}`);\n\n        });\n\n        svg.on(\"touchend mouseleave\", () => tooltip.call(callout, null));\n    }\n        \n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default InteractiveChart;"]},"metadata":{},"sourceType":"module"}